// >>>>>>> DO NOT EDIT THIS FILE <<<<<<<<<<
// This file is autogenerated via `aws-operator-codegen process`
// If you'd like the change anything about this file make edits to the .templ
// file in the pkg/codegen/assets directory.

package {{.Spec.Resource.Name}}

import (
	"errors"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/cloudformation"
	awsV1alpha1 "github.com/awslabs/aws-service-operator/pkg/apis/service-operator.aws/v1alpha1"
	"github.com/awslabs/aws-service-operator/pkg/config"
	"github.com/awslabs/aws-service-operator/pkg/helpers"
)

// New generates a new object
func New(config config.Config, {{.Spec.Resource.Name}} *awsV1alpha1.{{.Spec.Kind}}, topicARN string) *Cloudformation {
	return &Cloudformation{
		{{.Spec.Kind}}: {{.Spec.Resource.Name}},
		config:					config,
    topicARN:       topicARN,
	}
}

// Cloudformation defines the {{.Spec.Resource.Name}} cfts
type Cloudformation struct {
	config         config.Config
	{{.Spec.Kind}} *awsV1alpha1.{{.Spec.Kind}}
  topicARN       string
}

// StackName returns the name of the stack based on the aws-operator-config
func (s *Cloudformation) StackName() string {
	return helpers.StackName(s.config.ClusterName, "{{.Spec.Resource.Name}}", s.{{.Spec.Kind}}.Name, s.{{.Spec.Kind}}.Namespace)
}

// GetOutputs return the stack outputs from the DescribeStacks call
func (s *Cloudformation) GetOutputs() (map[string]string, error) {
	outputs := map[string]string{}
	sess := s.config.AWSSession
	svc := cloudformation.New(sess)

	stackInputs := cloudformation.DescribeStacksInput{
		StackName:   aws.String(s.StackName()),
	}

	output, err := svc.DescribeStacks(&stackInputs)
	if err != nil {
		return nil, err
	}
	// Not sure if this is even possible
	if len(output.Stacks) != 1 {
		return nil, errors.New("no stacks returned with that stack name")
	}

	for _, out := range output.Stacks[0].Outputs {
		outputs[*out.OutputKey] = *out.OutputValue
	}

	return outputs, err
}

// CreateStack will create the stack with the supplied params
func (s *Cloudformation) CreateStack() (output *cloudformation.CreateStackOutput, err error) {
	sess := s.config.AWSSession
	svc := cloudformation.New(sess)

	cftemplate := helpers.GetCloudFormationTemplate(s.config, "{{.Spec.Resource.Name}}", s.{{.Spec.Kind}}.{{.Spec.Type}}.CloudFormationTemplateName, s.{{.Spec.Kind}}.{{.Spec.Type}}.CloudFormationTemplateNamespace)

	stackInputs := cloudformation.CreateStackInput{
		StackName:   aws.String(s.StackName()),
		TemplateURL: aws.String(cftemplate),
		NotificationARNs: []*string{
			aws.String(s.topicARN),
		},
	}

	resourceName := helpers.CreateParam("ResourceName", s.{{.Spec.Kind}}.Name)
	resourceVersion := helpers.CreateParam("ResourceVersion", s.{{.Spec.Kind}}.ResourceVersion)
	namespace := helpers.CreateParam("Namespace", s.{{.Spec.Kind}}.Namespace)
	clusterName := helpers.CreateParam("ClusterName", s.config.ClusterName)
{{- range $top := .Spec.Body.Schema.Properties}}
	{{- if .Properties}}
	{{- range $nested := .Properties}}

	{{- if .Templatized}}
	{{$top.Key}}{{$nested.Key}}Temp := "{{$nested.Template}}"
	{{- else}}
	{{$top.Key}}{{$nested.Key}}Temp := "{{"{{"}}.Obj.{{$.Spec.Type}}.{{$top.StructKey}}.{{.StructKey}}{{"}}"}}"
	{{- end}}
	{{$top.Key}}{{$nested.Key}}Value, err := helpers.Templatize({{$top.Key}}{{$nested.Key}}Temp, helpers.Data{Obj: s.{{$.Spec.Kind}}, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
  {{$top.Key}}{{$nested.Key}} := helpers.CreateParam("{{$nested.TemplateKey}}", helpers.Stringify({{$top.Key}}{{$nested.Key}}Value))
	{{- end}}
	{{- else}}
	{{- if (eq $top.Type "resourceName")}}
	{{$top.Key}} := helpers.CreateParam("{{$top.TemplateKey}}", helpers.Stringify(s.{{$.Spec.Kind}}.Name))
	{{- else}}

	{{- if .Templatized}}
	{{$top.Key}}Temp :=	"{{$top.Template}}"
	{{- else}}
	{{$top.Key}}Temp :=	"{{"{{"}}.Obj.{{$.Spec.Type}}.{{$top.StructKey}}{{"}}"}}"
	{{- end}}
	{{$top.Key}}Value, err := helpers.Templatize({{$top.Key}}Temp, helpers.Data{Obj: s.{{$.Spec.Kind}}, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	{{$top.Key}} := helpers.CreateParam("{{$top.TemplateKey}}", helpers.Stringify({{$top.Key}}Value))
	{{- end}}
	{{- end}}
{{- end}}

	parameters := []*cloudformation.Parameter{}
	parameters = append(parameters, resourceName)
	parameters = append(parameters, resourceVersion)
	parameters = append(parameters, namespace)
	parameters = append(parameters, clusterName)
{{- range $top := .Spec.Body.Schema.Properties}}
	{{- if .Properties}}
	{{- range $nested := .Properties}}
	parameters = append(parameters, {{$top.Key}}{{$nested.Key}})
	{{- end}}
	{{- else}}
	parameters = append(parameters, {{$top.Key}})
	{{- end}}
{{- end}}

	stackInputs.SetParameters(parameters)

	resourceNameTag := helpers.CreateTag("ResourceName", s.{{.Spec.Kind}}.Name)
	resourceVersionTag := helpers.CreateTag("ResourceVersion", s.{{.Spec.Kind}}.ResourceVersion)
	namespaceTag := helpers.CreateTag("Namespace", s.{{.Spec.Kind}}.Namespace)
	clusterNameTag := helpers.CreateTag("ClusterName", s.config.ClusterName)

	tags := []*cloudformation.Tag{}
	tags = append(tags, resourceNameTag)
	tags = append(tags, resourceVersionTag)
	tags = append(tags, namespaceTag)
	tags = append(tags, clusterNameTag)

	stackInputs.SetTags(tags)

  output, err = svc.CreateStack(&stackInputs)
	return
}

// UpdateStack will update the existing stack
func (s *Cloudformation) UpdateStack(updated *awsV1alpha1.{{.Spec.Kind}}) (output *cloudformation.UpdateStackOutput, err error) {
	sess := s.config.AWSSession
	svc := cloudformation.New(sess)

	cftemplate := helpers.GetCloudFormationTemplate(s.config, "{{.Spec.Resource.Name}}", updated.{{.Spec.Type}}.CloudFormationTemplateName, updated.{{.Spec.Type}}.CloudFormationTemplateNamespace)

	stackInputs := cloudformation.UpdateStackInput{
		StackName:   aws.String(s.StackName()),
		TemplateURL: aws.String(cftemplate),
		NotificationARNs: []*string{
			aws.String(s.topicARN),
		},
	}

	resourceName := helpers.CreateParam("ResourceName", s.{{.Spec.Kind}}.Name)
	resourceVersion := helpers.CreateParam("ResourceVersion", s.{{.Spec.Kind}}.ResourceVersion)
	namespace := helpers.CreateParam("Namespace", s.{{.Spec.Kind}}.Namespace)
	clusterName := helpers.CreateParam("ClusterName", s.config.ClusterName)
{{- range $top := .Spec.Body.Schema.Properties}}
	{{- if .Properties}}
	{{- range $nested := .Properties}}

	{{- if .Templatized}}
	{{$top.Key}}{{$nested.Key}}Temp := "{{$nested.Template}}"
	{{- else}}
	{{$top.Key}}{{$nested.Key}}Temp := "{{"{{"}}.Obj.{{$.Spec.Type}}.{{$top.StructKey}}.{{.StructKey}}{{"}}"}}"
	{{- end}}
	{{$top.Key}}{{$nested.Key}}Value, err := helpers.Templatize({{$top.Key}}{{$nested.Key}}Temp, helpers.Data{Obj: updated, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	{{$top.Key}}{{$nested.Key}} := helpers.CreateParam("{{$nested.TemplateKey}}", helpers.Stringify({{$top.Key}}{{$nested.Key}}Value))
	{{- end}}
	{{- else}}
	{{- if (eq $top.Type "resourceName")}}
	{{$top.Key}} := helpers.CreateParam("{{$top.TemplateKey}}", helpers.Stringify(s.{{$.Spec.Kind}}.Name))
	{{- else}}

	{{- if .Templatized}}
	{{$top.Key}}Temp := "{{$top.Template}}"
	{{- else}}
	{{$top.Key}}Temp :=	"{{"{{"}}.Obj.{{$.Spec.Type}}.{{$top.StructKey}}{{"}}"}}"
	{{- end}}
	{{$top.Key}}Value, err := helpers.Templatize({{$top.Key}}Temp, helpers.Data{Obj: updated, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	{{$top.Key}} := helpers.CreateParam("{{$top.TemplateKey}}", helpers.Stringify({{$top.Key}}Value))
	{{- end}}
	{{- end}}
{{- end}}

	parameters := []*cloudformation.Parameter{}
	parameters = append(parameters, resourceName)
	parameters = append(parameters, resourceVersion)
	parameters = append(parameters, namespace)
	parameters = append(parameters, clusterName)
{{- range $top := .Spec.Body.Schema.Properties}}
	{{- if .Properties}}
	{{- range $nested := .Properties}}
	parameters = append(parameters, {{$top.Key}}{{$nested.Key}})
	{{- end}}
	{{- else}}
	parameters = append(parameters, {{$top.Key}})
	{{- end}}
{{- end}}

	stackInputs.SetParameters(parameters)

	resourceNameTag := helpers.CreateTag("ResourceName", s.{{.Spec.Kind}}.Name)
	resourceVersionTag := helpers.CreateTag("ResourceVersion", s.{{.Spec.Kind}}.ResourceVersion)
	namespaceTag := helpers.CreateTag("Namespace", s.{{.Spec.Kind}}.Namespace)
	clusterNameTag := helpers.CreateTag("ClusterName", s.config.ClusterName)

	tags := []*cloudformation.Tag{}
	tags = append(tags, resourceNameTag)
	tags = append(tags, resourceVersionTag)
	tags = append(tags, namespaceTag)
	tags = append(tags, clusterNameTag)

	stackInputs.SetTags(tags)

  output, err = svc.UpdateStack(&stackInputs)
	return
}

// DeleteStack will delete the stack
func (s *Cloudformation) DeleteStack() (err error) {
	sess := s.config.AWSSession
	svc := cloudformation.New(sess)

	stackInputs := cloudformation.DeleteStackInput{}
	stackInputs.SetStackName(s.StackName())

  _, err = svc.DeleteStack(&stackInputs)
	return
}

// WaitUntilStackDeleted will delete the stack
func (s *Cloudformation) WaitUntilStackDeleted() (err error) {
	sess := s.config.AWSSession
	svc := cloudformation.New(sess)

	stackInputs := cloudformation.DescribeStacksInput{
		StackName:   aws.String(s.StackName()),
	}

  err = svc.WaitUntilStackDeleteComplete(&stackInputs)
	return
}
