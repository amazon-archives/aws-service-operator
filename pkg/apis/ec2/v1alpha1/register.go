/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/

// Code generated by make generate. DO NOT EDIT.

// Package v1alpha1 is the v1alpha1 version of the awsoperator.io api.
package v1alpha1

import (
	awsoperator "awsoperator.io/pkg/apis"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// SchemeGroupVersion is group version used to register ec2 objects
var SchemeGroupVersion = schema.GroupVersion{
	Group:   "ec2." + awsoperator.GroupName,
	Version: awsoperator.Version,
}

// Kind takes an unqualified kind and returns back a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

var (
	SchemeBuilder = runtime.NewSchemeBuilder(addKnownTypes)
	AddToScheme   = SchemeBuilder.AddToScheme
)

// Adds the list of ec2 types to Scheme.
func addKnownTypes(scheme *runtime.Scheme) error {
	scheme.AddKnownTypes(SchemeGroupVersion,
		&CapacityReservation{},
		&CustomerGateway{},
		&DHCPOptions{},
		&EC2Fleet{},
		&EIP{},
		&EIPAssociation{},
		&EgressOnlyInternetGateway{},
		&FlowLog{},
		&Host{},
		&Instance{},
		&InternetGateway{},
		&LaunchTemplate{},
		&NatGateway{},
		&NetworkAcl{},
		&NetworkAclEntry{},
		&NetworkInterface{},
		&NetworkInterfaceAttachment{},
		&NetworkInterfacePermission{},
		&PlacementGroup{},
		&Route{},
		&RouteTable{},
		&SecurityGroup{},
		&SecurityGroupEgress{},
		&SecurityGroupIngress{},
		&SpotFleet{},
		&Subnet{},
		&SubnetCidrBlock{},
		&SubnetNetworkAclAssociation{},
		&SubnetRouteTableAssociation{},
		&TransitGateway{},
		&TransitGatewayAttachment{},
		&TransitGatewayRoute{},
		&TransitGatewayRouteTable{},
		&TransitGatewayRouteTableAssociation{},
		&TransitGatewayRouteTablePropagation{},
		&VPC{},
		&VPCCidrBlock{},
		&VPCDHCPOptionsAssociation{},
		&VPCEndpoint{},
		&VPCEndpointConnectionNotification{},
		&VPCEndpointService{},
		&VPCEndpointServicePermissions{},
		&VPCGatewayAttachment{},
		&VPCPeeringConnection{},
		&VPNConnection{},
		&VPNConnectionRoute{},
		&VPNGateway{},
		&VPNGatewayRoutePropagation{},
		&Volume{},
		&VolumeAttachment{},
		&CapacityReservationList{},
		&CustomerGatewayList{},
		&DHCPOptionsList{},
		&EC2FleetList{},
		&EIPList{},
		&EIPAssociationList{},
		&EgressOnlyInternetGatewayList{},
		&FlowLogList{},
		&HostList{},
		&InstanceList{},
		&InternetGatewayList{},
		&LaunchTemplateList{},
		&NatGatewayList{},
		&NetworkAclList{},
		&NetworkAclEntryList{},
		&NetworkInterfaceList{},
		&NetworkInterfaceAttachmentList{},
		&NetworkInterfacePermissionList{},
		&PlacementGroupList{},
		&RouteList{},
		&RouteTableList{},
		&SecurityGroupList{},
		&SecurityGroupEgressList{},
		&SecurityGroupIngressList{},
		&SpotFleetList{},
		&SubnetList{},
		&SubnetCidrBlockList{},
		&SubnetNetworkAclAssociationList{},
		&SubnetRouteTableAssociationList{},
		&TransitGatewayList{},
		&TransitGatewayAttachmentList{},
		&TransitGatewayRouteList{},
		&TransitGatewayRouteTableList{},
		&TransitGatewayRouteTableAssociationList{},
		&TransitGatewayRouteTablePropagationList{},
		&VPCList{},
		&VPCCidrBlockList{},
		&VPCDHCPOptionsAssociationList{},
		&VPCEndpointList{},
		&VPCEndpointConnectionNotificationList{},
		&VPCEndpointServiceList{},
		&VPCEndpointServicePermissionsList{},
		&VPCGatewayAttachmentList{},
		&VPCPeeringConnectionList{},
		&VPNConnectionList{},
		&VPNConnectionRouteList{},
		&VPNGatewayList{},
		&VPNGatewayRoutePropagationList{},
		&VolumeList{},
		&VolumeAttachmentList{},
	)

	metav1.AddToGroupVersion(scheme, SchemeGroupVersion)
	return nil
}
