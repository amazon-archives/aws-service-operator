/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/

// Code generated by make generate. DO NOT EDIT.

package v1alpha1

import (
	goversion "github.com/christopherhein/go-version"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

const (
	// MetricsEndpoint is where the metrics can be reached at
	MetricsEndpoint = "/metrics"

	// USWest1Region returns the string for us-west-2
	USWest1Region = "us-west-1"

	// USWest2Region returns the string for us-west-2
	USWest2Region = "us-west-2"
)

// +genclient
// +genclient:noStatus
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// Config object holds everything used for the operator
type Config struct {
	// Load k/k TypeMeta for `apiVersion` and `kind`
	metav1.TypeMeta `json:",inline"`

	// ClusterName is the identity for categorizing all resources under
	ClusterName string `json:"clusterName"`

	// Kubernetes contains all the connection details for connecting to the api
	Kubernetes ConfigKubernetes `json:"kubernetes"`

	// AWS contains all the AWS Account specific details
	AWS ConfigAWS `json:"aws"`

	// Server contains the server specific configurations
	Server ConfigServer `json:"server"`

	// Resources is a whitelist of Services and Resources to enable
	Resources []string `json:"resources"`

	// Version stores the operator version information
	Version *goversion.Info `json:"version"`
}

// ConfigKubernetes contains URL, Port or Kubeconfig path details
type ConfigKubernetes struct {
	// Connection string URL for the apiserver
	URL string `json:"url"`

	// Kubeconfig is a path to a Kubeconfig file
	Kubeconfig string `json:"kubeconfig"`
}

// ConfigAWS contains all the AWS specific details
type ConfigAWS struct {
	// DefaultRegion configures which region a stack should be provisioned into by default
	DefaultRegion string `json:"defaultRegion"`

	// SupportedRegions configures which regions CRDs can deploy into
	SupportedRegions []string `json:"supportedRegions"`

	// AccountID defines the account which each resource is connected to
	AccountID string `json:"accountID"`

	// Queue will set up the params for the queue system
	Queue ConfigQueue `json:"queue"`
}

// ConfigServer configures parameters on the server
type ConfigServer struct {
	// Log configures the logger for the operator
	Log ConfigLog `json:"log"`

	// Address to bind the server to
	Address string `json:"address"`

	// Metrics configures metrics specific information
	Metrics ConfigMetrics `json:"metrics"`
}

// ConfigLog configures the logger
type ConfigLog struct {
	// Level defines the log level to be emitted into the logs
	Level int `json:"level"`
}

// ConfigMetrics configure metrics
type ConfigMetrics struct {
	// Enable true will allow for the metrics endpoint to be exposed
	Enable bool `json:"enable"`

	// Endpoint is the path which responses with prometheus details
	Endpoint string `json:"endpoint"`
}

// ConfigQueue holds all the configurations for the SQS & SNS configs
type ConfigQueue struct {
	// Region is where SQS and SNS should be provisioned
	Region string `json:"region"`

	// Name is the name of the SQS queue to be used
	Name string `json:"name"`

	// QueueARN defines a preconfigured queue vs creating them on boot
	QueueARN string `json:"queueARN"`

	// QueueURL defines the URL for the Queue
	QueueURL string `json:"queueURL"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ConfigList is a list of Config resources
type ConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []Config `json:"items"`
}
