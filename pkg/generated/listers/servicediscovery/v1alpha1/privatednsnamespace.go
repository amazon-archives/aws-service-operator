/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/servicediscovery/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PrivateDnsNamespaceLister helps list PrivateDnsNamespaces.
type PrivateDnsNamespaceLister interface {
	// List lists all PrivateDnsNamespaces in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateDnsNamespace, err error)
	// PrivateDnsNamespaces returns an object that can list and get PrivateDnsNamespaces.
	PrivateDnsNamespaces(namespace string) PrivateDnsNamespaceNamespaceLister
	PrivateDnsNamespaceListerExpansion
}

// privateDnsNamespaceLister implements the PrivateDnsNamespaceLister interface.
type privateDnsNamespaceLister struct {
	indexer cache.Indexer
}

// NewPrivateDnsNamespaceLister returns a new PrivateDnsNamespaceLister.
func NewPrivateDnsNamespaceLister(indexer cache.Indexer) PrivateDnsNamespaceLister {
	return &privateDnsNamespaceLister{indexer: indexer}
}

// List lists all PrivateDnsNamespaces in the indexer.
func (s *privateDnsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateDnsNamespace, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateDnsNamespace))
	})
	return ret, err
}

// PrivateDnsNamespaces returns an object that can list and get PrivateDnsNamespaces.
func (s *privateDnsNamespaceLister) PrivateDnsNamespaces(namespace string) PrivateDnsNamespaceNamespaceLister {
	return privateDnsNamespaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PrivateDnsNamespaceNamespaceLister helps list and get PrivateDnsNamespaces.
type PrivateDnsNamespaceNamespaceLister interface {
	// List lists all PrivateDnsNamespaces in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateDnsNamespace, err error)
	// Get retrieves the PrivateDnsNamespace from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PrivateDnsNamespace, error)
	PrivateDnsNamespaceNamespaceListerExpansion
}

// privateDnsNamespaceNamespaceLister implements the PrivateDnsNamespaceNamespaceLister
// interface.
type privateDnsNamespaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PrivateDnsNamespaces in the indexer for a given namespace.
func (s privateDnsNamespaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateDnsNamespace, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateDnsNamespace))
	})
	return ret, err
}

// Get retrieves the PrivateDnsNamespace from the indexer for a given namespace and name.
func (s privateDnsNamespaceNamespaceLister) Get(name string) (*v1alpha1.PrivateDnsNamespace, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("privatednsnamespace"), name)
	}
	return obj.(*v1alpha1.PrivateDnsNamespace), nil
}
