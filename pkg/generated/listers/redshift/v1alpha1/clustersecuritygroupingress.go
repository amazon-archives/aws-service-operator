/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/redshift/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterSecurityGroupIngressLister helps list ClusterSecurityGroupIngresses.
type ClusterSecurityGroupIngressLister interface {
	// List lists all ClusterSecurityGroupIngresses in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterSecurityGroupIngress, err error)
	// ClusterSecurityGroupIngresses returns an object that can list and get ClusterSecurityGroupIngresses.
	ClusterSecurityGroupIngresses(namespace string) ClusterSecurityGroupIngressNamespaceLister
	ClusterSecurityGroupIngressListerExpansion
}

// clusterSecurityGroupIngressLister implements the ClusterSecurityGroupIngressLister interface.
type clusterSecurityGroupIngressLister struct {
	indexer cache.Indexer
}

// NewClusterSecurityGroupIngressLister returns a new ClusterSecurityGroupIngressLister.
func NewClusterSecurityGroupIngressLister(indexer cache.Indexer) ClusterSecurityGroupIngressLister {
	return &clusterSecurityGroupIngressLister{indexer: indexer}
}

// List lists all ClusterSecurityGroupIngresses in the indexer.
func (s *clusterSecurityGroupIngressLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterSecurityGroupIngress, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterSecurityGroupIngress))
	})
	return ret, err
}

// ClusterSecurityGroupIngresses returns an object that can list and get ClusterSecurityGroupIngresses.
func (s *clusterSecurityGroupIngressLister) ClusterSecurityGroupIngresses(namespace string) ClusterSecurityGroupIngressNamespaceLister {
	return clusterSecurityGroupIngressNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterSecurityGroupIngressNamespaceLister helps list and get ClusterSecurityGroupIngresses.
type ClusterSecurityGroupIngressNamespaceLister interface {
	// List lists all ClusterSecurityGroupIngresses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterSecurityGroupIngress, err error)
	// Get retrieves the ClusterSecurityGroupIngress from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ClusterSecurityGroupIngress, error)
	ClusterSecurityGroupIngressNamespaceListerExpansion
}

// clusterSecurityGroupIngressNamespaceLister implements the ClusterSecurityGroupIngressNamespaceLister
// interface.
type clusterSecurityGroupIngressNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterSecurityGroupIngresses in the indexer for a given namespace.
func (s clusterSecurityGroupIngressNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterSecurityGroupIngress, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterSecurityGroupIngress))
	})
	return ret, err
}

// Get retrieves the ClusterSecurityGroupIngress from the indexer for a given namespace and name.
func (s clusterSecurityGroupIngressNamespaceLister) Get(name string) (*v1alpha1.ClusterSecurityGroupIngress, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clustersecuritygroupingress"), name)
	}
	return obj.(*v1alpha1.ClusterSecurityGroupIngress), nil
}
