/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/redshift/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterParameterGroupLister helps list ClusterParameterGroups.
type ClusterParameterGroupLister interface {
	// List lists all ClusterParameterGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterParameterGroup, err error)
	// ClusterParameterGroups returns an object that can list and get ClusterParameterGroups.
	ClusterParameterGroups(namespace string) ClusterParameterGroupNamespaceLister
	ClusterParameterGroupListerExpansion
}

// clusterParameterGroupLister implements the ClusterParameterGroupLister interface.
type clusterParameterGroupLister struct {
	indexer cache.Indexer
}

// NewClusterParameterGroupLister returns a new ClusterParameterGroupLister.
func NewClusterParameterGroupLister(indexer cache.Indexer) ClusterParameterGroupLister {
	return &clusterParameterGroupLister{indexer: indexer}
}

// List lists all ClusterParameterGroups in the indexer.
func (s *clusterParameterGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterParameterGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterParameterGroup))
	})
	return ret, err
}

// ClusterParameterGroups returns an object that can list and get ClusterParameterGroups.
func (s *clusterParameterGroupLister) ClusterParameterGroups(namespace string) ClusterParameterGroupNamespaceLister {
	return clusterParameterGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterParameterGroupNamespaceLister helps list and get ClusterParameterGroups.
type ClusterParameterGroupNamespaceLister interface {
	// List lists all ClusterParameterGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterParameterGroup, err error)
	// Get retrieves the ClusterParameterGroup from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ClusterParameterGroup, error)
	ClusterParameterGroupNamespaceListerExpansion
}

// clusterParameterGroupNamespaceLister implements the ClusterParameterGroupNamespaceLister
// interface.
type clusterParameterGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterParameterGroups in the indexer for a given namespace.
func (s clusterParameterGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterParameterGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterParameterGroup))
	})
	return ret, err
}

// Get retrieves the ClusterParameterGroup from the indexer for a given namespace and name.
func (s clusterParameterGroupNamespaceLister) Get(name string) (*v1alpha1.ClusterParameterGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusterparametergroup"), name)
	}
	return obj.(*v1alpha1.ClusterParameterGroup), nil
}
