/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/redshift/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterSecurityGroupLister helps list ClusterSecurityGroups.
type ClusterSecurityGroupLister interface {
	// List lists all ClusterSecurityGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterSecurityGroup, err error)
	// ClusterSecurityGroups returns an object that can list and get ClusterSecurityGroups.
	ClusterSecurityGroups(namespace string) ClusterSecurityGroupNamespaceLister
	ClusterSecurityGroupListerExpansion
}

// clusterSecurityGroupLister implements the ClusterSecurityGroupLister interface.
type clusterSecurityGroupLister struct {
	indexer cache.Indexer
}

// NewClusterSecurityGroupLister returns a new ClusterSecurityGroupLister.
func NewClusterSecurityGroupLister(indexer cache.Indexer) ClusterSecurityGroupLister {
	return &clusterSecurityGroupLister{indexer: indexer}
}

// List lists all ClusterSecurityGroups in the indexer.
func (s *clusterSecurityGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterSecurityGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterSecurityGroup))
	})
	return ret, err
}

// ClusterSecurityGroups returns an object that can list and get ClusterSecurityGroups.
func (s *clusterSecurityGroupLister) ClusterSecurityGroups(namespace string) ClusterSecurityGroupNamespaceLister {
	return clusterSecurityGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterSecurityGroupNamespaceLister helps list and get ClusterSecurityGroups.
type ClusterSecurityGroupNamespaceLister interface {
	// List lists all ClusterSecurityGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterSecurityGroup, err error)
	// Get retrieves the ClusterSecurityGroup from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ClusterSecurityGroup, error)
	ClusterSecurityGroupNamespaceListerExpansion
}

// clusterSecurityGroupNamespaceLister implements the ClusterSecurityGroupNamespaceLister
// interface.
type clusterSecurityGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterSecurityGroups in the indexer for a given namespace.
func (s clusterSecurityGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterSecurityGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterSecurityGroup))
	})
	return ret, err
}

// Get retrieves the ClusterSecurityGroup from the indexer for a given namespace and name.
func (s clusterSecurityGroupNamespaceLister) Get(name string) (*v1alpha1.ClusterSecurityGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clustersecuritygroup"), name)
	}
	return obj.(*v1alpha1.ClusterSecurityGroup), nil
}
