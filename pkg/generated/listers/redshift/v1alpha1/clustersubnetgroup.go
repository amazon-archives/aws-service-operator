/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/redshift/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterSubnetGroupLister helps list ClusterSubnetGroups.
type ClusterSubnetGroupLister interface {
	// List lists all ClusterSubnetGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterSubnetGroup, err error)
	// ClusterSubnetGroups returns an object that can list and get ClusterSubnetGroups.
	ClusterSubnetGroups(namespace string) ClusterSubnetGroupNamespaceLister
	ClusterSubnetGroupListerExpansion
}

// clusterSubnetGroupLister implements the ClusterSubnetGroupLister interface.
type clusterSubnetGroupLister struct {
	indexer cache.Indexer
}

// NewClusterSubnetGroupLister returns a new ClusterSubnetGroupLister.
func NewClusterSubnetGroupLister(indexer cache.Indexer) ClusterSubnetGroupLister {
	return &clusterSubnetGroupLister{indexer: indexer}
}

// List lists all ClusterSubnetGroups in the indexer.
func (s *clusterSubnetGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterSubnetGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterSubnetGroup))
	})
	return ret, err
}

// ClusterSubnetGroups returns an object that can list and get ClusterSubnetGroups.
func (s *clusterSubnetGroupLister) ClusterSubnetGroups(namespace string) ClusterSubnetGroupNamespaceLister {
	return clusterSubnetGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterSubnetGroupNamespaceLister helps list and get ClusterSubnetGroups.
type ClusterSubnetGroupNamespaceLister interface {
	// List lists all ClusterSubnetGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterSubnetGroup, err error)
	// Get retrieves the ClusterSubnetGroup from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ClusterSubnetGroup, error)
	ClusterSubnetGroupNamespaceListerExpansion
}

// clusterSubnetGroupNamespaceLister implements the ClusterSubnetGroupNamespaceLister
// interface.
type clusterSubnetGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterSubnetGroups in the indexer for a given namespace.
func (s clusterSubnetGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterSubnetGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterSubnetGroup))
	})
	return ret, err
}

// Get retrieves the ClusterSubnetGroup from the indexer for a given namespace and name.
func (s clusterSubnetGroupNamespaceLister) Get(name string) (*v1alpha1.ClusterSubnetGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clustersubnetgroup"), name)
	}
	return obj.(*v1alpha1.ClusterSubnetGroup), nil
}
