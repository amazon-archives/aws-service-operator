/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/config/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AggregationAuthorizationLister helps list AggregationAuthorizations.
type AggregationAuthorizationLister interface {
	// List lists all AggregationAuthorizations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AggregationAuthorization, err error)
	// AggregationAuthorizations returns an object that can list and get AggregationAuthorizations.
	AggregationAuthorizations(namespace string) AggregationAuthorizationNamespaceLister
	AggregationAuthorizationListerExpansion
}

// aggregationAuthorizationLister implements the AggregationAuthorizationLister interface.
type aggregationAuthorizationLister struct {
	indexer cache.Indexer
}

// NewAggregationAuthorizationLister returns a new AggregationAuthorizationLister.
func NewAggregationAuthorizationLister(indexer cache.Indexer) AggregationAuthorizationLister {
	return &aggregationAuthorizationLister{indexer: indexer}
}

// List lists all AggregationAuthorizations in the indexer.
func (s *aggregationAuthorizationLister) List(selector labels.Selector) (ret []*v1alpha1.AggregationAuthorization, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AggregationAuthorization))
	})
	return ret, err
}

// AggregationAuthorizations returns an object that can list and get AggregationAuthorizations.
func (s *aggregationAuthorizationLister) AggregationAuthorizations(namespace string) AggregationAuthorizationNamespaceLister {
	return aggregationAuthorizationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AggregationAuthorizationNamespaceLister helps list and get AggregationAuthorizations.
type AggregationAuthorizationNamespaceLister interface {
	// List lists all AggregationAuthorizations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AggregationAuthorization, err error)
	// Get retrieves the AggregationAuthorization from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AggregationAuthorization, error)
	AggregationAuthorizationNamespaceListerExpansion
}

// aggregationAuthorizationNamespaceLister implements the AggregationAuthorizationNamespaceLister
// interface.
type aggregationAuthorizationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AggregationAuthorizations in the indexer for a given namespace.
func (s aggregationAuthorizationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AggregationAuthorization, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AggregationAuthorization))
	})
	return ret, err
}

// Get retrieves the AggregationAuthorization from the indexer for a given namespace and name.
func (s aggregationAuthorizationNamespaceLister) Get(name string) (*v1alpha1.AggregationAuthorization, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("aggregationauthorization"), name)
	}
	return obj.(*v1alpha1.AggregationAuthorization), nil
}
