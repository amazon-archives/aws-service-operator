/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/config/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigurationAggregatorLister helps list ConfigurationAggregators.
type ConfigurationAggregatorLister interface {
	// List lists all ConfigurationAggregators in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationAggregator, err error)
	// ConfigurationAggregators returns an object that can list and get ConfigurationAggregators.
	ConfigurationAggregators(namespace string) ConfigurationAggregatorNamespaceLister
	ConfigurationAggregatorListerExpansion
}

// configurationAggregatorLister implements the ConfigurationAggregatorLister interface.
type configurationAggregatorLister struct {
	indexer cache.Indexer
}

// NewConfigurationAggregatorLister returns a new ConfigurationAggregatorLister.
func NewConfigurationAggregatorLister(indexer cache.Indexer) ConfigurationAggregatorLister {
	return &configurationAggregatorLister{indexer: indexer}
}

// List lists all ConfigurationAggregators in the indexer.
func (s *configurationAggregatorLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationAggregator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationAggregator))
	})
	return ret, err
}

// ConfigurationAggregators returns an object that can list and get ConfigurationAggregators.
func (s *configurationAggregatorLister) ConfigurationAggregators(namespace string) ConfigurationAggregatorNamespaceLister {
	return configurationAggregatorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigurationAggregatorNamespaceLister helps list and get ConfigurationAggregators.
type ConfigurationAggregatorNamespaceLister interface {
	// List lists all ConfigurationAggregators in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationAggregator, err error)
	// Get retrieves the ConfigurationAggregator from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ConfigurationAggregator, error)
	ConfigurationAggregatorNamespaceListerExpansion
}

// configurationAggregatorNamespaceLister implements the ConfigurationAggregatorNamespaceLister
// interface.
type configurationAggregatorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigurationAggregators in the indexer for a given namespace.
func (s configurationAggregatorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationAggregator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationAggregator))
	})
	return ret, err
}

// Get retrieves the ConfigurationAggregator from the indexer for a given namespace and name.
func (s configurationAggregatorNamespaceLister) Get(name string) (*v1alpha1.ConfigurationAggregator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configurationaggregator"), name)
	}
	return obj.(*v1alpha1.ConfigurationAggregator), nil
}
