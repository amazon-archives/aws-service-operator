/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/lambda/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LayerVersionLister helps list LayerVersions.
type LayerVersionLister interface {
	// List lists all LayerVersions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LayerVersion, err error)
	// LayerVersions returns an object that can list and get LayerVersions.
	LayerVersions(namespace string) LayerVersionNamespaceLister
	LayerVersionListerExpansion
}

// layerVersionLister implements the LayerVersionLister interface.
type layerVersionLister struct {
	indexer cache.Indexer
}

// NewLayerVersionLister returns a new LayerVersionLister.
func NewLayerVersionLister(indexer cache.Indexer) LayerVersionLister {
	return &layerVersionLister{indexer: indexer}
}

// List lists all LayerVersions in the indexer.
func (s *layerVersionLister) List(selector labels.Selector) (ret []*v1alpha1.LayerVersion, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LayerVersion))
	})
	return ret, err
}

// LayerVersions returns an object that can list and get LayerVersions.
func (s *layerVersionLister) LayerVersions(namespace string) LayerVersionNamespaceLister {
	return layerVersionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LayerVersionNamespaceLister helps list and get LayerVersions.
type LayerVersionNamespaceLister interface {
	// List lists all LayerVersions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LayerVersion, err error)
	// Get retrieves the LayerVersion from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LayerVersion, error)
	LayerVersionNamespaceListerExpansion
}

// layerVersionNamespaceLister implements the LayerVersionNamespaceLister
// interface.
type layerVersionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LayerVersions in the indexer for a given namespace.
func (s layerVersionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LayerVersion, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LayerVersion))
	})
	return ret, err
}

// Get retrieves the LayerVersion from the indexer for a given namespace and name.
func (s layerVersionNamespaceLister) Get(name string) (*v1alpha1.LayerVersion, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("layerversion"), name)
	}
	return obj.(*v1alpha1.LayerVersion), nil
}
