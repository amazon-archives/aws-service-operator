/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/lambda/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EventSourceMappingLister helps list EventSourceMappings.
type EventSourceMappingLister interface {
	// List lists all EventSourceMappings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.EventSourceMapping, err error)
	// EventSourceMappings returns an object that can list and get EventSourceMappings.
	EventSourceMappings(namespace string) EventSourceMappingNamespaceLister
	EventSourceMappingListerExpansion
}

// eventSourceMappingLister implements the EventSourceMappingLister interface.
type eventSourceMappingLister struct {
	indexer cache.Indexer
}

// NewEventSourceMappingLister returns a new EventSourceMappingLister.
func NewEventSourceMappingLister(indexer cache.Indexer) EventSourceMappingLister {
	return &eventSourceMappingLister{indexer: indexer}
}

// List lists all EventSourceMappings in the indexer.
func (s *eventSourceMappingLister) List(selector labels.Selector) (ret []*v1alpha1.EventSourceMapping, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventSourceMapping))
	})
	return ret, err
}

// EventSourceMappings returns an object that can list and get EventSourceMappings.
func (s *eventSourceMappingLister) EventSourceMappings(namespace string) EventSourceMappingNamespaceLister {
	return eventSourceMappingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EventSourceMappingNamespaceLister helps list and get EventSourceMappings.
type EventSourceMappingNamespaceLister interface {
	// List lists all EventSourceMappings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.EventSourceMapping, err error)
	// Get retrieves the EventSourceMapping from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.EventSourceMapping, error)
	EventSourceMappingNamespaceListerExpansion
}

// eventSourceMappingNamespaceLister implements the EventSourceMappingNamespaceLister
// interface.
type eventSourceMappingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EventSourceMappings in the indexer for a given namespace.
func (s eventSourceMappingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EventSourceMapping, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventSourceMapping))
	})
	return ret, err
}

// Get retrieves the EventSourceMapping from the indexer for a given namespace and name.
func (s eventSourceMappingNamespaceLister) Get(name string) (*v1alpha1.EventSourceMapping, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("eventsourcemapping"), name)
	}
	return obj.(*v1alpha1.EventSourceMapping), nil
}
