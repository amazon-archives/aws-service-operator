/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/apigateway/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VpcLinkLister helps list VpcLinks.
type VpcLinkLister interface {
	// List lists all VpcLinks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.VpcLink, err error)
	// VpcLinks returns an object that can list and get VpcLinks.
	VpcLinks(namespace string) VpcLinkNamespaceLister
	VpcLinkListerExpansion
}

// vpcLinkLister implements the VpcLinkLister interface.
type vpcLinkLister struct {
	indexer cache.Indexer
}

// NewVpcLinkLister returns a new VpcLinkLister.
func NewVpcLinkLister(indexer cache.Indexer) VpcLinkLister {
	return &vpcLinkLister{indexer: indexer}
}

// List lists all VpcLinks in the indexer.
func (s *vpcLinkLister) List(selector labels.Selector) (ret []*v1alpha1.VpcLink, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcLink))
	})
	return ret, err
}

// VpcLinks returns an object that can list and get VpcLinks.
func (s *vpcLinkLister) VpcLinks(namespace string) VpcLinkNamespaceLister {
	return vpcLinkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VpcLinkNamespaceLister helps list and get VpcLinks.
type VpcLinkNamespaceLister interface {
	// List lists all VpcLinks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.VpcLink, err error)
	// Get retrieves the VpcLink from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.VpcLink, error)
	VpcLinkNamespaceListerExpansion
}

// vpcLinkNamespaceLister implements the VpcLinkNamespaceLister
// interface.
type vpcLinkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VpcLinks in the indexer for a given namespace.
func (s vpcLinkNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VpcLink, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VpcLink))
	})
	return ret, err
}

// Get retrieves the VpcLink from the indexer for a given namespace and name.
func (s vpcLinkNamespaceLister) Get(name string) (*v1alpha1.VpcLink, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpclink"), name)
	}
	return obj.(*v1alpha1.VpcLink), nil
}
