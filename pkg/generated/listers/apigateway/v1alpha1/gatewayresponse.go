/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/apigateway/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GatewayResponseLister helps list GatewayResponses.
type GatewayResponseLister interface {
	// List lists all GatewayResponses in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.GatewayResponse, err error)
	// GatewayResponses returns an object that can list and get GatewayResponses.
	GatewayResponses(namespace string) GatewayResponseNamespaceLister
	GatewayResponseListerExpansion
}

// gatewayResponseLister implements the GatewayResponseLister interface.
type gatewayResponseLister struct {
	indexer cache.Indexer
}

// NewGatewayResponseLister returns a new GatewayResponseLister.
func NewGatewayResponseLister(indexer cache.Indexer) GatewayResponseLister {
	return &gatewayResponseLister{indexer: indexer}
}

// List lists all GatewayResponses in the indexer.
func (s *gatewayResponseLister) List(selector labels.Selector) (ret []*v1alpha1.GatewayResponse, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GatewayResponse))
	})
	return ret, err
}

// GatewayResponses returns an object that can list and get GatewayResponses.
func (s *gatewayResponseLister) GatewayResponses(namespace string) GatewayResponseNamespaceLister {
	return gatewayResponseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GatewayResponseNamespaceLister helps list and get GatewayResponses.
type GatewayResponseNamespaceLister interface {
	// List lists all GatewayResponses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.GatewayResponse, err error)
	// Get retrieves the GatewayResponse from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.GatewayResponse, error)
	GatewayResponseNamespaceListerExpansion
}

// gatewayResponseNamespaceLister implements the GatewayResponseNamespaceLister
// interface.
type gatewayResponseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GatewayResponses in the indexer for a given namespace.
func (s gatewayResponseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GatewayResponse, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GatewayResponse))
	})
	return ret, err
}

// Get retrieves the GatewayResponse from the indexer for a given namespace and name.
func (s gatewayResponseNamespaceLister) Get(name string) (*v1alpha1.GatewayResponse, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gatewayresponse"), name)
	}
	return obj.(*v1alpha1.GatewayResponse), nil
}
