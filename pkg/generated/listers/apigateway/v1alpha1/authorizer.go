/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/apigateway/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AuthorizerLister helps list Authorizers.
type AuthorizerLister interface {
	// List lists all Authorizers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Authorizer, err error)
	// Authorizers returns an object that can list and get Authorizers.
	Authorizers(namespace string) AuthorizerNamespaceLister
	AuthorizerListerExpansion
}

// authorizerLister implements the AuthorizerLister interface.
type authorizerLister struct {
	indexer cache.Indexer
}

// NewAuthorizerLister returns a new AuthorizerLister.
func NewAuthorizerLister(indexer cache.Indexer) AuthorizerLister {
	return &authorizerLister{indexer: indexer}
}

// List lists all Authorizers in the indexer.
func (s *authorizerLister) List(selector labels.Selector) (ret []*v1alpha1.Authorizer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Authorizer))
	})
	return ret, err
}

// Authorizers returns an object that can list and get Authorizers.
func (s *authorizerLister) Authorizers(namespace string) AuthorizerNamespaceLister {
	return authorizerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AuthorizerNamespaceLister helps list and get Authorizers.
type AuthorizerNamespaceLister interface {
	// List lists all Authorizers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Authorizer, err error)
	// Get retrieves the Authorizer from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Authorizer, error)
	AuthorizerNamespaceListerExpansion
}

// authorizerNamespaceLister implements the AuthorizerNamespaceLister
// interface.
type authorizerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Authorizers in the indexer for a given namespace.
func (s authorizerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Authorizer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Authorizer))
	})
	return ret, err
}

// Get retrieves the Authorizer from the indexer for a given namespace and name.
func (s authorizerNamespaceLister) Get(name string) (*v1alpha1.Authorizer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("authorizer"), name)
	}
	return obj.(*v1alpha1.Authorizer), nil
}
