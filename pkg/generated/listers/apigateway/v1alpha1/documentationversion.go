/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/apigateway/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DocumentationVersionLister helps list DocumentationVersions.
type DocumentationVersionLister interface {
	// List lists all DocumentationVersions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DocumentationVersion, err error)
	// DocumentationVersions returns an object that can list and get DocumentationVersions.
	DocumentationVersions(namespace string) DocumentationVersionNamespaceLister
	DocumentationVersionListerExpansion
}

// documentationVersionLister implements the DocumentationVersionLister interface.
type documentationVersionLister struct {
	indexer cache.Indexer
}

// NewDocumentationVersionLister returns a new DocumentationVersionLister.
func NewDocumentationVersionLister(indexer cache.Indexer) DocumentationVersionLister {
	return &documentationVersionLister{indexer: indexer}
}

// List lists all DocumentationVersions in the indexer.
func (s *documentationVersionLister) List(selector labels.Selector) (ret []*v1alpha1.DocumentationVersion, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DocumentationVersion))
	})
	return ret, err
}

// DocumentationVersions returns an object that can list and get DocumentationVersions.
func (s *documentationVersionLister) DocumentationVersions(namespace string) DocumentationVersionNamespaceLister {
	return documentationVersionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DocumentationVersionNamespaceLister helps list and get DocumentationVersions.
type DocumentationVersionNamespaceLister interface {
	// List lists all DocumentationVersions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DocumentationVersion, err error)
	// Get retrieves the DocumentationVersion from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DocumentationVersion, error)
	DocumentationVersionNamespaceListerExpansion
}

// documentationVersionNamespaceLister implements the DocumentationVersionNamespaceLister
// interface.
type documentationVersionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DocumentationVersions in the indexer for a given namespace.
func (s documentationVersionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DocumentationVersion, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DocumentationVersion))
	})
	return ret, err
}

// Get retrieves the DocumentationVersion from the indexer for a given namespace and name.
func (s documentationVersionNamespaceLister) Get(name string) (*v1alpha1.DocumentationVersion, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("documentationversion"), name)
	}
	return obj.(*v1alpha1.DocumentationVersion), nil
}
