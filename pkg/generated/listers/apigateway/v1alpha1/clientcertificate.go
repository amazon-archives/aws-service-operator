/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/apigateway/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClientCertificateLister helps list ClientCertificates.
type ClientCertificateLister interface {
	// List lists all ClientCertificates in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ClientCertificate, err error)
	// ClientCertificates returns an object that can list and get ClientCertificates.
	ClientCertificates(namespace string) ClientCertificateNamespaceLister
	ClientCertificateListerExpansion
}

// clientCertificateLister implements the ClientCertificateLister interface.
type clientCertificateLister struct {
	indexer cache.Indexer
}

// NewClientCertificateLister returns a new ClientCertificateLister.
func NewClientCertificateLister(indexer cache.Indexer) ClientCertificateLister {
	return &clientCertificateLister{indexer: indexer}
}

// List lists all ClientCertificates in the indexer.
func (s *clientCertificateLister) List(selector labels.Selector) (ret []*v1alpha1.ClientCertificate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClientCertificate))
	})
	return ret, err
}

// ClientCertificates returns an object that can list and get ClientCertificates.
func (s *clientCertificateLister) ClientCertificates(namespace string) ClientCertificateNamespaceLister {
	return clientCertificateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClientCertificateNamespaceLister helps list and get ClientCertificates.
type ClientCertificateNamespaceLister interface {
	// List lists all ClientCertificates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ClientCertificate, err error)
	// Get retrieves the ClientCertificate from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ClientCertificate, error)
	ClientCertificateNamespaceListerExpansion
}

// clientCertificateNamespaceLister implements the ClientCertificateNamespaceLister
// interface.
type clientCertificateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClientCertificates in the indexer for a given namespace.
func (s clientCertificateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClientCertificate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClientCertificate))
	})
	return ret, err
}

// Get retrieves the ClientCertificate from the indexer for a given namespace and name.
func (s clientCertificateNamespaceLister) Get(name string) (*v1alpha1.ClientCertificate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clientcertificate"), name)
	}
	return obj.(*v1alpha1.ClientCertificate), nil
}
