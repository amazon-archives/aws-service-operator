/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/apigateway/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BasePathMappingLister helps list BasePathMappings.
type BasePathMappingLister interface {
	// List lists all BasePathMappings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BasePathMapping, err error)
	// BasePathMappings returns an object that can list and get BasePathMappings.
	BasePathMappings(namespace string) BasePathMappingNamespaceLister
	BasePathMappingListerExpansion
}

// basePathMappingLister implements the BasePathMappingLister interface.
type basePathMappingLister struct {
	indexer cache.Indexer
}

// NewBasePathMappingLister returns a new BasePathMappingLister.
func NewBasePathMappingLister(indexer cache.Indexer) BasePathMappingLister {
	return &basePathMappingLister{indexer: indexer}
}

// List lists all BasePathMappings in the indexer.
func (s *basePathMappingLister) List(selector labels.Selector) (ret []*v1alpha1.BasePathMapping, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BasePathMapping))
	})
	return ret, err
}

// BasePathMappings returns an object that can list and get BasePathMappings.
func (s *basePathMappingLister) BasePathMappings(namespace string) BasePathMappingNamespaceLister {
	return basePathMappingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BasePathMappingNamespaceLister helps list and get BasePathMappings.
type BasePathMappingNamespaceLister interface {
	// List lists all BasePathMappings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BasePathMapping, err error)
	// Get retrieves the BasePathMapping from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BasePathMapping, error)
	BasePathMappingNamespaceListerExpansion
}

// basePathMappingNamespaceLister implements the BasePathMappingNamespaceLister
// interface.
type basePathMappingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BasePathMappings in the indexer for a given namespace.
func (s basePathMappingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BasePathMapping, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BasePathMapping))
	})
	return ret, err
}

// Get retrieves the BasePathMapping from the indexer for a given namespace and name.
func (s basePathMappingNamespaceLister) Get(name string) (*v1alpha1.BasePathMapping, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("basepathmapping"), name)
	}
	return obj.(*v1alpha1.BasePathMapping), nil
}
