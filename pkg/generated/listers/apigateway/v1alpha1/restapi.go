/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/apigateway/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RestApiLister helps list RestApis.
type RestApiLister interface {
	// List lists all RestApis in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RestApi, err error)
	// RestApis returns an object that can list and get RestApis.
	RestApis(namespace string) RestApiNamespaceLister
	RestApiListerExpansion
}

// restApiLister implements the RestApiLister interface.
type restApiLister struct {
	indexer cache.Indexer
}

// NewRestApiLister returns a new RestApiLister.
func NewRestApiLister(indexer cache.Indexer) RestApiLister {
	return &restApiLister{indexer: indexer}
}

// List lists all RestApis in the indexer.
func (s *restApiLister) List(selector labels.Selector) (ret []*v1alpha1.RestApi, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RestApi))
	})
	return ret, err
}

// RestApis returns an object that can list and get RestApis.
func (s *restApiLister) RestApis(namespace string) RestApiNamespaceLister {
	return restApiNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RestApiNamespaceLister helps list and get RestApis.
type RestApiNamespaceLister interface {
	// List lists all RestApis in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RestApi, err error)
	// Get retrieves the RestApi from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RestApi, error)
	RestApiNamespaceListerExpansion
}

// restApiNamespaceLister implements the RestApiNamespaceLister
// interface.
type restApiNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RestApis in the indexer for a given namespace.
func (s restApiNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RestApi, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RestApi))
	})
	return ret, err
}

// Get retrieves the RestApi from the indexer for a given namespace and name.
func (s restApiNamespaceLister) Get(name string) (*v1alpha1.RestApi, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("restapi"), name)
	}
	return obj.(*v1alpha1.RestApi), nil
}
