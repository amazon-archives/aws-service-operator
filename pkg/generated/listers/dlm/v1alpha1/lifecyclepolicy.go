/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/dlm/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LifecyclePolicyLister helps list LifecyclePolicies.
type LifecyclePolicyLister interface {
	// List lists all LifecyclePolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LifecyclePolicy, err error)
	// LifecyclePolicies returns an object that can list and get LifecyclePolicies.
	LifecyclePolicies(namespace string) LifecyclePolicyNamespaceLister
	LifecyclePolicyListerExpansion
}

// lifecyclePolicyLister implements the LifecyclePolicyLister interface.
type lifecyclePolicyLister struct {
	indexer cache.Indexer
}

// NewLifecyclePolicyLister returns a new LifecyclePolicyLister.
func NewLifecyclePolicyLister(indexer cache.Indexer) LifecyclePolicyLister {
	return &lifecyclePolicyLister{indexer: indexer}
}

// List lists all LifecyclePolicies in the indexer.
func (s *lifecyclePolicyLister) List(selector labels.Selector) (ret []*v1alpha1.LifecyclePolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LifecyclePolicy))
	})
	return ret, err
}

// LifecyclePolicies returns an object that can list and get LifecyclePolicies.
func (s *lifecyclePolicyLister) LifecyclePolicies(namespace string) LifecyclePolicyNamespaceLister {
	return lifecyclePolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LifecyclePolicyNamespaceLister helps list and get LifecyclePolicies.
type LifecyclePolicyNamespaceLister interface {
	// List lists all LifecyclePolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LifecyclePolicy, err error)
	// Get retrieves the LifecyclePolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LifecyclePolicy, error)
	LifecyclePolicyNamespaceListerExpansion
}

// lifecyclePolicyNamespaceLister implements the LifecyclePolicyNamespaceLister
// interface.
type lifecyclePolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LifecyclePolicies in the indexer for a given namespace.
func (s lifecyclePolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LifecyclePolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LifecyclePolicy))
	})
	return ret, err
}

// Get retrieves the LifecyclePolicy from the indexer for a given namespace and name.
func (s lifecyclePolicyNamespaceLister) Get(name string) (*v1alpha1.LifecyclePolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lifecyclepolicy"), name)
	}
	return obj.(*v1alpha1.LifecyclePolicy), nil
}
