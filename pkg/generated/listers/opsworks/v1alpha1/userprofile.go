/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/opsworks/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UserProfileLister helps list UserProfiles.
type UserProfileLister interface {
	// List lists all UserProfiles in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.UserProfile, err error)
	// UserProfiles returns an object that can list and get UserProfiles.
	UserProfiles(namespace string) UserProfileNamespaceLister
	UserProfileListerExpansion
}

// userProfileLister implements the UserProfileLister interface.
type userProfileLister struct {
	indexer cache.Indexer
}

// NewUserProfileLister returns a new UserProfileLister.
func NewUserProfileLister(indexer cache.Indexer) UserProfileLister {
	return &userProfileLister{indexer: indexer}
}

// List lists all UserProfiles in the indexer.
func (s *userProfileLister) List(selector labels.Selector) (ret []*v1alpha1.UserProfile, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserProfile))
	})
	return ret, err
}

// UserProfiles returns an object that can list and get UserProfiles.
func (s *userProfileLister) UserProfiles(namespace string) UserProfileNamespaceLister {
	return userProfileNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UserProfileNamespaceLister helps list and get UserProfiles.
type UserProfileNamespaceLister interface {
	// List lists all UserProfiles in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.UserProfile, err error)
	// Get retrieves the UserProfile from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.UserProfile, error)
	UserProfileNamespaceListerExpansion
}

// userProfileNamespaceLister implements the UserProfileNamespaceLister
// interface.
type userProfileNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UserProfiles in the indexer for a given namespace.
func (s userProfileNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UserProfile, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserProfile))
	})
	return ret, err
}

// Get retrieves the UserProfile from the indexer for a given namespace and name.
func (s userProfileNamespaceLister) Get(name string) (*v1alpha1.UserProfile, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("userprofile"), name)
	}
	return obj.(*v1alpha1.UserProfile), nil
}
