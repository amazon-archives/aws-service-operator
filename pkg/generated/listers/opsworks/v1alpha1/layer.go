/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/opsworks/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LayerLister helps list Layers.
type LayerLister interface {
	// List lists all Layers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Layer, err error)
	// Layers returns an object that can list and get Layers.
	Layers(namespace string) LayerNamespaceLister
	LayerListerExpansion
}

// layerLister implements the LayerLister interface.
type layerLister struct {
	indexer cache.Indexer
}

// NewLayerLister returns a new LayerLister.
func NewLayerLister(indexer cache.Indexer) LayerLister {
	return &layerLister{indexer: indexer}
}

// List lists all Layers in the indexer.
func (s *layerLister) List(selector labels.Selector) (ret []*v1alpha1.Layer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Layer))
	})
	return ret, err
}

// Layers returns an object that can list and get Layers.
func (s *layerLister) Layers(namespace string) LayerNamespaceLister {
	return layerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LayerNamespaceLister helps list and get Layers.
type LayerNamespaceLister interface {
	// List lists all Layers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Layer, err error)
	// Get retrieves the Layer from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Layer, error)
	LayerNamespaceListerExpansion
}

// layerNamespaceLister implements the LayerNamespaceLister
// interface.
type layerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Layers in the indexer for a given namespace.
func (s layerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Layer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Layer))
	})
	return ret, err
}

// Get retrieves the Layer from the indexer for a given namespace and name.
func (s layerNamespaceLister) Get(name string) (*v1alpha1.Layer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("layer"), name)
	}
	return obj.(*v1alpha1.Layer), nil
}
