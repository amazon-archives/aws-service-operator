/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/kinesisanalyticsv2/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApplicationCloudWatchLoggingOptionLister helps list ApplicationCloudWatchLoggingOptions.
type ApplicationCloudWatchLoggingOptionLister interface {
	// List lists all ApplicationCloudWatchLoggingOptions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationCloudWatchLoggingOption, err error)
	// ApplicationCloudWatchLoggingOptions returns an object that can list and get ApplicationCloudWatchLoggingOptions.
	ApplicationCloudWatchLoggingOptions(namespace string) ApplicationCloudWatchLoggingOptionNamespaceLister
	ApplicationCloudWatchLoggingOptionListerExpansion
}

// applicationCloudWatchLoggingOptionLister implements the ApplicationCloudWatchLoggingOptionLister interface.
type applicationCloudWatchLoggingOptionLister struct {
	indexer cache.Indexer
}

// NewApplicationCloudWatchLoggingOptionLister returns a new ApplicationCloudWatchLoggingOptionLister.
func NewApplicationCloudWatchLoggingOptionLister(indexer cache.Indexer) ApplicationCloudWatchLoggingOptionLister {
	return &applicationCloudWatchLoggingOptionLister{indexer: indexer}
}

// List lists all ApplicationCloudWatchLoggingOptions in the indexer.
func (s *applicationCloudWatchLoggingOptionLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationCloudWatchLoggingOption, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationCloudWatchLoggingOption))
	})
	return ret, err
}

// ApplicationCloudWatchLoggingOptions returns an object that can list and get ApplicationCloudWatchLoggingOptions.
func (s *applicationCloudWatchLoggingOptionLister) ApplicationCloudWatchLoggingOptions(namespace string) ApplicationCloudWatchLoggingOptionNamespaceLister {
	return applicationCloudWatchLoggingOptionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApplicationCloudWatchLoggingOptionNamespaceLister helps list and get ApplicationCloudWatchLoggingOptions.
type ApplicationCloudWatchLoggingOptionNamespaceLister interface {
	// List lists all ApplicationCloudWatchLoggingOptions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationCloudWatchLoggingOption, err error)
	// Get retrieves the ApplicationCloudWatchLoggingOption from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ApplicationCloudWatchLoggingOption, error)
	ApplicationCloudWatchLoggingOptionNamespaceListerExpansion
}

// applicationCloudWatchLoggingOptionNamespaceLister implements the ApplicationCloudWatchLoggingOptionNamespaceLister
// interface.
type applicationCloudWatchLoggingOptionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApplicationCloudWatchLoggingOptions in the indexer for a given namespace.
func (s applicationCloudWatchLoggingOptionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationCloudWatchLoggingOption, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationCloudWatchLoggingOption))
	})
	return ret, err
}

// Get retrieves the ApplicationCloudWatchLoggingOption from the indexer for a given namespace and name.
func (s applicationCloudWatchLoggingOptionNamespaceLister) Get(name string) (*v1alpha1.ApplicationCloudWatchLoggingOption, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("applicationcloudwatchloggingoption"), name)
	}
	return obj.(*v1alpha1.ApplicationCloudWatchLoggingOption), nil
}
