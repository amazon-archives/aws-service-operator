/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/waf/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SizeConstraintSetLister helps list SizeConstraintSets.
type SizeConstraintSetLister interface {
	// List lists all SizeConstraintSets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SizeConstraintSet, err error)
	// SizeConstraintSets returns an object that can list and get SizeConstraintSets.
	SizeConstraintSets(namespace string) SizeConstraintSetNamespaceLister
	SizeConstraintSetListerExpansion
}

// sizeConstraintSetLister implements the SizeConstraintSetLister interface.
type sizeConstraintSetLister struct {
	indexer cache.Indexer
}

// NewSizeConstraintSetLister returns a new SizeConstraintSetLister.
func NewSizeConstraintSetLister(indexer cache.Indexer) SizeConstraintSetLister {
	return &sizeConstraintSetLister{indexer: indexer}
}

// List lists all SizeConstraintSets in the indexer.
func (s *sizeConstraintSetLister) List(selector labels.Selector) (ret []*v1alpha1.SizeConstraintSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SizeConstraintSet))
	})
	return ret, err
}

// SizeConstraintSets returns an object that can list and get SizeConstraintSets.
func (s *sizeConstraintSetLister) SizeConstraintSets(namespace string) SizeConstraintSetNamespaceLister {
	return sizeConstraintSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SizeConstraintSetNamespaceLister helps list and get SizeConstraintSets.
type SizeConstraintSetNamespaceLister interface {
	// List lists all SizeConstraintSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SizeConstraintSet, err error)
	// Get retrieves the SizeConstraintSet from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SizeConstraintSet, error)
	SizeConstraintSetNamespaceListerExpansion
}

// sizeConstraintSetNamespaceLister implements the SizeConstraintSetNamespaceLister
// interface.
type sizeConstraintSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SizeConstraintSets in the indexer for a given namespace.
func (s sizeConstraintSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SizeConstraintSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SizeConstraintSet))
	})
	return ret, err
}

// Get retrieves the SizeConstraintSet from the indexer for a given namespace and name.
func (s sizeConstraintSetNamespaceLister) Get(name string) (*v1alpha1.SizeConstraintSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sizeconstraintset"), name)
	}
	return obj.(*v1alpha1.SizeConstraintSet), nil
}
