/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/waf/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IPSetLister helps list IPSets.
type IPSetLister interface {
	// List lists all IPSets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.IPSet, err error)
	// IPSets returns an object that can list and get IPSets.
	IPSets(namespace string) IPSetNamespaceLister
	IPSetListerExpansion
}

// iPSetLister implements the IPSetLister interface.
type iPSetLister struct {
	indexer cache.Indexer
}

// NewIPSetLister returns a new IPSetLister.
func NewIPSetLister(indexer cache.Indexer) IPSetLister {
	return &iPSetLister{indexer: indexer}
}

// List lists all IPSets in the indexer.
func (s *iPSetLister) List(selector labels.Selector) (ret []*v1alpha1.IPSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IPSet))
	})
	return ret, err
}

// IPSets returns an object that can list and get IPSets.
func (s *iPSetLister) IPSets(namespace string) IPSetNamespaceLister {
	return iPSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IPSetNamespaceLister helps list and get IPSets.
type IPSetNamespaceLister interface {
	// List lists all IPSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.IPSet, err error)
	// Get retrieves the IPSet from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.IPSet, error)
	IPSetNamespaceListerExpansion
}

// iPSetNamespaceLister implements the IPSetNamespaceLister
// interface.
type iPSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IPSets in the indexer for a given namespace.
func (s iPSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IPSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IPSet))
	})
	return ret, err
}

// Get retrieves the IPSet from the indexer for a given namespace and name.
func (s iPSetNamespaceLister) Get(name string) (*v1alpha1.IPSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipset"), name)
	}
	return obj.(*v1alpha1.IPSet), nil
}
