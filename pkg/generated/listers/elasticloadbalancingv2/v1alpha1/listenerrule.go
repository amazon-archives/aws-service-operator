/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/elasticloadbalancingv2/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ListenerRuleLister helps list ListenerRules.
type ListenerRuleLister interface {
	// List lists all ListenerRules in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ListenerRule, err error)
	// ListenerRules returns an object that can list and get ListenerRules.
	ListenerRules(namespace string) ListenerRuleNamespaceLister
	ListenerRuleListerExpansion
}

// listenerRuleLister implements the ListenerRuleLister interface.
type listenerRuleLister struct {
	indexer cache.Indexer
}

// NewListenerRuleLister returns a new ListenerRuleLister.
func NewListenerRuleLister(indexer cache.Indexer) ListenerRuleLister {
	return &listenerRuleLister{indexer: indexer}
}

// List lists all ListenerRules in the indexer.
func (s *listenerRuleLister) List(selector labels.Selector) (ret []*v1alpha1.ListenerRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ListenerRule))
	})
	return ret, err
}

// ListenerRules returns an object that can list and get ListenerRules.
func (s *listenerRuleLister) ListenerRules(namespace string) ListenerRuleNamespaceLister {
	return listenerRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ListenerRuleNamespaceLister helps list and get ListenerRules.
type ListenerRuleNamespaceLister interface {
	// List lists all ListenerRules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ListenerRule, err error)
	// Get retrieves the ListenerRule from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ListenerRule, error)
	ListenerRuleNamespaceListerExpansion
}

// listenerRuleNamespaceLister implements the ListenerRuleNamespaceLister
// interface.
type listenerRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ListenerRules in the indexer for a given namespace.
func (s listenerRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ListenerRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ListenerRule))
	})
	return ret, err
}

// Get retrieves the ListenerRule from the indexer for a given namespace and name.
func (s listenerRuleNamespaceLister) Get(name string) (*v1alpha1.ListenerRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("listenerrule"), name)
	}
	return obj.(*v1alpha1.ListenerRule), nil
}
