/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/ec2/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EIPLister helps list EIPs.
type EIPLister interface {
	// List lists all EIPs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.EIP, err error)
	// EIPs returns an object that can list and get EIPs.
	EIPs(namespace string) EIPNamespaceLister
	EIPListerExpansion
}

// eIPLister implements the EIPLister interface.
type eIPLister struct {
	indexer cache.Indexer
}

// NewEIPLister returns a new EIPLister.
func NewEIPLister(indexer cache.Indexer) EIPLister {
	return &eIPLister{indexer: indexer}
}

// List lists all EIPs in the indexer.
func (s *eIPLister) List(selector labels.Selector) (ret []*v1alpha1.EIP, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EIP))
	})
	return ret, err
}

// EIPs returns an object that can list and get EIPs.
func (s *eIPLister) EIPs(namespace string) EIPNamespaceLister {
	return eIPNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EIPNamespaceLister helps list and get EIPs.
type EIPNamespaceLister interface {
	// List lists all EIPs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.EIP, err error)
	// Get retrieves the EIP from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.EIP, error)
	EIPNamespaceListerExpansion
}

// eIPNamespaceLister implements the EIPNamespaceLister
// interface.
type eIPNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EIPs in the indexer for a given namespace.
func (s eIPNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EIP, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EIP))
	})
	return ret, err
}

// Get retrieves the EIP from the indexer for a given namespace and name.
func (s eIPNamespaceLister) Get(name string) (*v1alpha1.EIP, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("eip"), name)
	}
	return obj.(*v1alpha1.EIP), nil
}
