/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/ec2/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VPCPeeringConnectionLister helps list VPCPeeringConnections.
type VPCPeeringConnectionLister interface {
	// List lists all VPCPeeringConnections in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.VPCPeeringConnection, err error)
	// VPCPeeringConnections returns an object that can list and get VPCPeeringConnections.
	VPCPeeringConnections(namespace string) VPCPeeringConnectionNamespaceLister
	VPCPeeringConnectionListerExpansion
}

// vPCPeeringConnectionLister implements the VPCPeeringConnectionLister interface.
type vPCPeeringConnectionLister struct {
	indexer cache.Indexer
}

// NewVPCPeeringConnectionLister returns a new VPCPeeringConnectionLister.
func NewVPCPeeringConnectionLister(indexer cache.Indexer) VPCPeeringConnectionLister {
	return &vPCPeeringConnectionLister{indexer: indexer}
}

// List lists all VPCPeeringConnections in the indexer.
func (s *vPCPeeringConnectionLister) List(selector labels.Selector) (ret []*v1alpha1.VPCPeeringConnection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VPCPeeringConnection))
	})
	return ret, err
}

// VPCPeeringConnections returns an object that can list and get VPCPeeringConnections.
func (s *vPCPeeringConnectionLister) VPCPeeringConnections(namespace string) VPCPeeringConnectionNamespaceLister {
	return vPCPeeringConnectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VPCPeeringConnectionNamespaceLister helps list and get VPCPeeringConnections.
type VPCPeeringConnectionNamespaceLister interface {
	// List lists all VPCPeeringConnections in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.VPCPeeringConnection, err error)
	// Get retrieves the VPCPeeringConnection from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.VPCPeeringConnection, error)
	VPCPeeringConnectionNamespaceListerExpansion
}

// vPCPeeringConnectionNamespaceLister implements the VPCPeeringConnectionNamespaceLister
// interface.
type vPCPeeringConnectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VPCPeeringConnections in the indexer for a given namespace.
func (s vPCPeeringConnectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VPCPeeringConnection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VPCPeeringConnection))
	})
	return ret, err
}

// Get retrieves the VPCPeeringConnection from the indexer for a given namespace and name.
func (s vPCPeeringConnectionNamespaceLister) Get(name string) (*v1alpha1.VPCPeeringConnection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpcpeeringconnection"), name)
	}
	return obj.(*v1alpha1.VPCPeeringConnection), nil
}
