/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/ec2/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SubnetNetworkAclAssociationLister helps list SubnetNetworkAclAssociations.
type SubnetNetworkAclAssociationLister interface {
	// List lists all SubnetNetworkAclAssociations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SubnetNetworkAclAssociation, err error)
	// SubnetNetworkAclAssociations returns an object that can list and get SubnetNetworkAclAssociations.
	SubnetNetworkAclAssociations(namespace string) SubnetNetworkAclAssociationNamespaceLister
	SubnetNetworkAclAssociationListerExpansion
}

// subnetNetworkAclAssociationLister implements the SubnetNetworkAclAssociationLister interface.
type subnetNetworkAclAssociationLister struct {
	indexer cache.Indexer
}

// NewSubnetNetworkAclAssociationLister returns a new SubnetNetworkAclAssociationLister.
func NewSubnetNetworkAclAssociationLister(indexer cache.Indexer) SubnetNetworkAclAssociationLister {
	return &subnetNetworkAclAssociationLister{indexer: indexer}
}

// List lists all SubnetNetworkAclAssociations in the indexer.
func (s *subnetNetworkAclAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.SubnetNetworkAclAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubnetNetworkAclAssociation))
	})
	return ret, err
}

// SubnetNetworkAclAssociations returns an object that can list and get SubnetNetworkAclAssociations.
func (s *subnetNetworkAclAssociationLister) SubnetNetworkAclAssociations(namespace string) SubnetNetworkAclAssociationNamespaceLister {
	return subnetNetworkAclAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SubnetNetworkAclAssociationNamespaceLister helps list and get SubnetNetworkAclAssociations.
type SubnetNetworkAclAssociationNamespaceLister interface {
	// List lists all SubnetNetworkAclAssociations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SubnetNetworkAclAssociation, err error)
	// Get retrieves the SubnetNetworkAclAssociation from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SubnetNetworkAclAssociation, error)
	SubnetNetworkAclAssociationNamespaceListerExpansion
}

// subnetNetworkAclAssociationNamespaceLister implements the SubnetNetworkAclAssociationNamespaceLister
// interface.
type subnetNetworkAclAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SubnetNetworkAclAssociations in the indexer for a given namespace.
func (s subnetNetworkAclAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SubnetNetworkAclAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubnetNetworkAclAssociation))
	})
	return ret, err
}

// Get retrieves the SubnetNetworkAclAssociation from the indexer for a given namespace and name.
func (s subnetNetworkAclAssociationNamespaceLister) Get(name string) (*v1alpha1.SubnetNetworkAclAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("subnetnetworkaclassociation"), name)
	}
	return obj.(*v1alpha1.SubnetNetworkAclAssociation), nil
}
