/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/ec2/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VPNGatewayLister helps list VPNGateways.
type VPNGatewayLister interface {
	// List lists all VPNGateways in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.VPNGateway, err error)
	// VPNGateways returns an object that can list and get VPNGateways.
	VPNGateways(namespace string) VPNGatewayNamespaceLister
	VPNGatewayListerExpansion
}

// vPNGatewayLister implements the VPNGatewayLister interface.
type vPNGatewayLister struct {
	indexer cache.Indexer
}

// NewVPNGatewayLister returns a new VPNGatewayLister.
func NewVPNGatewayLister(indexer cache.Indexer) VPNGatewayLister {
	return &vPNGatewayLister{indexer: indexer}
}

// List lists all VPNGateways in the indexer.
func (s *vPNGatewayLister) List(selector labels.Selector) (ret []*v1alpha1.VPNGateway, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VPNGateway))
	})
	return ret, err
}

// VPNGateways returns an object that can list and get VPNGateways.
func (s *vPNGatewayLister) VPNGateways(namespace string) VPNGatewayNamespaceLister {
	return vPNGatewayNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VPNGatewayNamespaceLister helps list and get VPNGateways.
type VPNGatewayNamespaceLister interface {
	// List lists all VPNGateways in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.VPNGateway, err error)
	// Get retrieves the VPNGateway from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.VPNGateway, error)
	VPNGatewayNamespaceListerExpansion
}

// vPNGatewayNamespaceLister implements the VPNGatewayNamespaceLister
// interface.
type vPNGatewayNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VPNGateways in the indexer for a given namespace.
func (s vPNGatewayNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VPNGateway, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VPNGateway))
	})
	return ret, err
}

// Get retrieves the VPNGateway from the indexer for a given namespace and name.
func (s vPNGatewayNamespaceLister) Get(name string) (*v1alpha1.VPNGateway, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpngateway"), name)
	}
	return obj.(*v1alpha1.VPNGateway), nil
}
