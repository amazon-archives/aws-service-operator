/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/ec2/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VPCCidrBlockLister helps list VPCCidrBlocks.
type VPCCidrBlockLister interface {
	// List lists all VPCCidrBlocks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.VPCCidrBlock, err error)
	// VPCCidrBlocks returns an object that can list and get VPCCidrBlocks.
	VPCCidrBlocks(namespace string) VPCCidrBlockNamespaceLister
	VPCCidrBlockListerExpansion
}

// vPCCidrBlockLister implements the VPCCidrBlockLister interface.
type vPCCidrBlockLister struct {
	indexer cache.Indexer
}

// NewVPCCidrBlockLister returns a new VPCCidrBlockLister.
func NewVPCCidrBlockLister(indexer cache.Indexer) VPCCidrBlockLister {
	return &vPCCidrBlockLister{indexer: indexer}
}

// List lists all VPCCidrBlocks in the indexer.
func (s *vPCCidrBlockLister) List(selector labels.Selector) (ret []*v1alpha1.VPCCidrBlock, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VPCCidrBlock))
	})
	return ret, err
}

// VPCCidrBlocks returns an object that can list and get VPCCidrBlocks.
func (s *vPCCidrBlockLister) VPCCidrBlocks(namespace string) VPCCidrBlockNamespaceLister {
	return vPCCidrBlockNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VPCCidrBlockNamespaceLister helps list and get VPCCidrBlocks.
type VPCCidrBlockNamespaceLister interface {
	// List lists all VPCCidrBlocks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.VPCCidrBlock, err error)
	// Get retrieves the VPCCidrBlock from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.VPCCidrBlock, error)
	VPCCidrBlockNamespaceListerExpansion
}

// vPCCidrBlockNamespaceLister implements the VPCCidrBlockNamespaceLister
// interface.
type vPCCidrBlockNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VPCCidrBlocks in the indexer for a given namespace.
func (s vPCCidrBlockNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VPCCidrBlock, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VPCCidrBlock))
	})
	return ret, err
}

// Get retrieves the VPCCidrBlock from the indexer for a given namespace and name.
func (s vPCCidrBlockNamespaceLister) Get(name string) (*v1alpha1.VPCCidrBlock, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpccidrblock"), name)
	}
	return obj.(*v1alpha1.VPCCidrBlock), nil
}
