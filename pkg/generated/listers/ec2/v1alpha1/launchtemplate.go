/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/ec2/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LaunchTemplateLister helps list LaunchTemplates.
type LaunchTemplateLister interface {
	// List lists all LaunchTemplates in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LaunchTemplate, err error)
	// LaunchTemplates returns an object that can list and get LaunchTemplates.
	LaunchTemplates(namespace string) LaunchTemplateNamespaceLister
	LaunchTemplateListerExpansion
}

// launchTemplateLister implements the LaunchTemplateLister interface.
type launchTemplateLister struct {
	indexer cache.Indexer
}

// NewLaunchTemplateLister returns a new LaunchTemplateLister.
func NewLaunchTemplateLister(indexer cache.Indexer) LaunchTemplateLister {
	return &launchTemplateLister{indexer: indexer}
}

// List lists all LaunchTemplates in the indexer.
func (s *launchTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.LaunchTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LaunchTemplate))
	})
	return ret, err
}

// LaunchTemplates returns an object that can list and get LaunchTemplates.
func (s *launchTemplateLister) LaunchTemplates(namespace string) LaunchTemplateNamespaceLister {
	return launchTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LaunchTemplateNamespaceLister helps list and get LaunchTemplates.
type LaunchTemplateNamespaceLister interface {
	// List lists all LaunchTemplates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LaunchTemplate, err error)
	// Get retrieves the LaunchTemplate from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LaunchTemplate, error)
	LaunchTemplateNamespaceListerExpansion
}

// launchTemplateNamespaceLister implements the LaunchTemplateNamespaceLister
// interface.
type launchTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LaunchTemplates in the indexer for a given namespace.
func (s launchTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LaunchTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LaunchTemplate))
	})
	return ret, err
}

// Get retrieves the LaunchTemplate from the indexer for a given namespace and name.
func (s launchTemplateNamespaceLister) Get(name string) (*v1alpha1.LaunchTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("launchtemplate"), name)
	}
	return obj.(*v1alpha1.LaunchTemplate), nil
}
