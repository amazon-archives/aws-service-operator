/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/ec2/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VPCEndpointConnectionNotificationLister helps list VPCEndpointConnectionNotifications.
type VPCEndpointConnectionNotificationLister interface {
	// List lists all VPCEndpointConnectionNotifications in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.VPCEndpointConnectionNotification, err error)
	// VPCEndpointConnectionNotifications returns an object that can list and get VPCEndpointConnectionNotifications.
	VPCEndpointConnectionNotifications(namespace string) VPCEndpointConnectionNotificationNamespaceLister
	VPCEndpointConnectionNotificationListerExpansion
}

// vPCEndpointConnectionNotificationLister implements the VPCEndpointConnectionNotificationLister interface.
type vPCEndpointConnectionNotificationLister struct {
	indexer cache.Indexer
}

// NewVPCEndpointConnectionNotificationLister returns a new VPCEndpointConnectionNotificationLister.
func NewVPCEndpointConnectionNotificationLister(indexer cache.Indexer) VPCEndpointConnectionNotificationLister {
	return &vPCEndpointConnectionNotificationLister{indexer: indexer}
}

// List lists all VPCEndpointConnectionNotifications in the indexer.
func (s *vPCEndpointConnectionNotificationLister) List(selector labels.Selector) (ret []*v1alpha1.VPCEndpointConnectionNotification, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VPCEndpointConnectionNotification))
	})
	return ret, err
}

// VPCEndpointConnectionNotifications returns an object that can list and get VPCEndpointConnectionNotifications.
func (s *vPCEndpointConnectionNotificationLister) VPCEndpointConnectionNotifications(namespace string) VPCEndpointConnectionNotificationNamespaceLister {
	return vPCEndpointConnectionNotificationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VPCEndpointConnectionNotificationNamespaceLister helps list and get VPCEndpointConnectionNotifications.
type VPCEndpointConnectionNotificationNamespaceLister interface {
	// List lists all VPCEndpointConnectionNotifications in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.VPCEndpointConnectionNotification, err error)
	// Get retrieves the VPCEndpointConnectionNotification from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.VPCEndpointConnectionNotification, error)
	VPCEndpointConnectionNotificationNamespaceListerExpansion
}

// vPCEndpointConnectionNotificationNamespaceLister implements the VPCEndpointConnectionNotificationNamespaceLister
// interface.
type vPCEndpointConnectionNotificationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VPCEndpointConnectionNotifications in the indexer for a given namespace.
func (s vPCEndpointConnectionNotificationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VPCEndpointConnectionNotification, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VPCEndpointConnectionNotification))
	})
	return ret, err
}

// Get retrieves the VPCEndpointConnectionNotification from the indexer for a given namespace and name.
func (s vPCEndpointConnectionNotificationNamespaceLister) Get(name string) (*v1alpha1.VPCEndpointConnectionNotification, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vpcendpointconnectionnotification"), name)
	}
	return obj.(*v1alpha1.VPCEndpointConnectionNotification), nil
}
