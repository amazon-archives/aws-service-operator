/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/ec2/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetworkInterfaceAttachmentLister helps list NetworkInterfaceAttachments.
type NetworkInterfaceAttachmentLister interface {
	// List lists all NetworkInterfaceAttachments in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkInterfaceAttachment, err error)
	// NetworkInterfaceAttachments returns an object that can list and get NetworkInterfaceAttachments.
	NetworkInterfaceAttachments(namespace string) NetworkInterfaceAttachmentNamespaceLister
	NetworkInterfaceAttachmentListerExpansion
}

// networkInterfaceAttachmentLister implements the NetworkInterfaceAttachmentLister interface.
type networkInterfaceAttachmentLister struct {
	indexer cache.Indexer
}

// NewNetworkInterfaceAttachmentLister returns a new NetworkInterfaceAttachmentLister.
func NewNetworkInterfaceAttachmentLister(indexer cache.Indexer) NetworkInterfaceAttachmentLister {
	return &networkInterfaceAttachmentLister{indexer: indexer}
}

// List lists all NetworkInterfaceAttachments in the indexer.
func (s *networkInterfaceAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkInterfaceAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkInterfaceAttachment))
	})
	return ret, err
}

// NetworkInterfaceAttachments returns an object that can list and get NetworkInterfaceAttachments.
func (s *networkInterfaceAttachmentLister) NetworkInterfaceAttachments(namespace string) NetworkInterfaceAttachmentNamespaceLister {
	return networkInterfaceAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkInterfaceAttachmentNamespaceLister helps list and get NetworkInterfaceAttachments.
type NetworkInterfaceAttachmentNamespaceLister interface {
	// List lists all NetworkInterfaceAttachments in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkInterfaceAttachment, err error)
	// Get retrieves the NetworkInterfaceAttachment from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.NetworkInterfaceAttachment, error)
	NetworkInterfaceAttachmentNamespaceListerExpansion
}

// networkInterfaceAttachmentNamespaceLister implements the NetworkInterfaceAttachmentNamespaceLister
// interface.
type networkInterfaceAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkInterfaceAttachments in the indexer for a given namespace.
func (s networkInterfaceAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkInterfaceAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkInterfaceAttachment))
	})
	return ret, err
}

// Get retrieves the NetworkInterfaceAttachment from the indexer for a given namespace and name.
func (s networkInterfaceAttachmentNamespaceLister) Get(name string) (*v1alpha1.NetworkInterfaceAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("networkinterfaceattachment"), name)
	}
	return obj.(*v1alpha1.NetworkInterfaceAttachment), nil
}
