/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/ec2/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SubnetCidrBlockLister helps list SubnetCidrBlocks.
type SubnetCidrBlockLister interface {
	// List lists all SubnetCidrBlocks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SubnetCidrBlock, err error)
	// SubnetCidrBlocks returns an object that can list and get SubnetCidrBlocks.
	SubnetCidrBlocks(namespace string) SubnetCidrBlockNamespaceLister
	SubnetCidrBlockListerExpansion
}

// subnetCidrBlockLister implements the SubnetCidrBlockLister interface.
type subnetCidrBlockLister struct {
	indexer cache.Indexer
}

// NewSubnetCidrBlockLister returns a new SubnetCidrBlockLister.
func NewSubnetCidrBlockLister(indexer cache.Indexer) SubnetCidrBlockLister {
	return &subnetCidrBlockLister{indexer: indexer}
}

// List lists all SubnetCidrBlocks in the indexer.
func (s *subnetCidrBlockLister) List(selector labels.Selector) (ret []*v1alpha1.SubnetCidrBlock, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubnetCidrBlock))
	})
	return ret, err
}

// SubnetCidrBlocks returns an object that can list and get SubnetCidrBlocks.
func (s *subnetCidrBlockLister) SubnetCidrBlocks(namespace string) SubnetCidrBlockNamespaceLister {
	return subnetCidrBlockNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SubnetCidrBlockNamespaceLister helps list and get SubnetCidrBlocks.
type SubnetCidrBlockNamespaceLister interface {
	// List lists all SubnetCidrBlocks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SubnetCidrBlock, err error)
	// Get retrieves the SubnetCidrBlock from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SubnetCidrBlock, error)
	SubnetCidrBlockNamespaceListerExpansion
}

// subnetCidrBlockNamespaceLister implements the SubnetCidrBlockNamespaceLister
// interface.
type subnetCidrBlockNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SubnetCidrBlocks in the indexer for a given namespace.
func (s subnetCidrBlockNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SubnetCidrBlock, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubnetCidrBlock))
	})
	return ret, err
}

// Get retrieves the SubnetCidrBlock from the indexer for a given namespace and name.
func (s subnetCidrBlockNamespaceLister) Get(name string) (*v1alpha1.SubnetCidrBlock, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("subnetcidrblock"), name)
	}
	return obj.(*v1alpha1.SubnetCidrBlock), nil
}
