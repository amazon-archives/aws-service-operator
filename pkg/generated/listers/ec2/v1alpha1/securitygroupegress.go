/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/ec2/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SecurityGroupEgressLister helps list SecurityGroupEgresses.
type SecurityGroupEgressLister interface {
	// List lists all SecurityGroupEgresses in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SecurityGroupEgress, err error)
	// SecurityGroupEgresses returns an object that can list and get SecurityGroupEgresses.
	SecurityGroupEgresses(namespace string) SecurityGroupEgressNamespaceLister
	SecurityGroupEgressListerExpansion
}

// securityGroupEgressLister implements the SecurityGroupEgressLister interface.
type securityGroupEgressLister struct {
	indexer cache.Indexer
}

// NewSecurityGroupEgressLister returns a new SecurityGroupEgressLister.
func NewSecurityGroupEgressLister(indexer cache.Indexer) SecurityGroupEgressLister {
	return &securityGroupEgressLister{indexer: indexer}
}

// List lists all SecurityGroupEgresses in the indexer.
func (s *securityGroupEgressLister) List(selector labels.Selector) (ret []*v1alpha1.SecurityGroupEgress, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecurityGroupEgress))
	})
	return ret, err
}

// SecurityGroupEgresses returns an object that can list and get SecurityGroupEgresses.
func (s *securityGroupEgressLister) SecurityGroupEgresses(namespace string) SecurityGroupEgressNamespaceLister {
	return securityGroupEgressNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SecurityGroupEgressNamespaceLister helps list and get SecurityGroupEgresses.
type SecurityGroupEgressNamespaceLister interface {
	// List lists all SecurityGroupEgresses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SecurityGroupEgress, err error)
	// Get retrieves the SecurityGroupEgress from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SecurityGroupEgress, error)
	SecurityGroupEgressNamespaceListerExpansion
}

// securityGroupEgressNamespaceLister implements the SecurityGroupEgressNamespaceLister
// interface.
type securityGroupEgressNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SecurityGroupEgresses in the indexer for a given namespace.
func (s securityGroupEgressNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SecurityGroupEgress, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecurityGroupEgress))
	})
	return ret, err
}

// Get retrieves the SecurityGroupEgress from the indexer for a given namespace and name.
func (s securityGroupEgressNamespaceLister) Get(name string) (*v1alpha1.SecurityGroupEgress, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("securitygroupegress"), name)
	}
	return obj.(*v1alpha1.SecurityGroupEgress), nil
}
