/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/inspector/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AssessmentTargetLister helps list AssessmentTargets.
type AssessmentTargetLister interface {
	// List lists all AssessmentTargets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AssessmentTarget, err error)
	// AssessmentTargets returns an object that can list and get AssessmentTargets.
	AssessmentTargets(namespace string) AssessmentTargetNamespaceLister
	AssessmentTargetListerExpansion
}

// assessmentTargetLister implements the AssessmentTargetLister interface.
type assessmentTargetLister struct {
	indexer cache.Indexer
}

// NewAssessmentTargetLister returns a new AssessmentTargetLister.
func NewAssessmentTargetLister(indexer cache.Indexer) AssessmentTargetLister {
	return &assessmentTargetLister{indexer: indexer}
}

// List lists all AssessmentTargets in the indexer.
func (s *assessmentTargetLister) List(selector labels.Selector) (ret []*v1alpha1.AssessmentTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AssessmentTarget))
	})
	return ret, err
}

// AssessmentTargets returns an object that can list and get AssessmentTargets.
func (s *assessmentTargetLister) AssessmentTargets(namespace string) AssessmentTargetNamespaceLister {
	return assessmentTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AssessmentTargetNamespaceLister helps list and get AssessmentTargets.
type AssessmentTargetNamespaceLister interface {
	// List lists all AssessmentTargets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AssessmentTarget, err error)
	// Get retrieves the AssessmentTarget from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AssessmentTarget, error)
	AssessmentTargetNamespaceListerExpansion
}

// assessmentTargetNamespaceLister implements the AssessmentTargetNamespaceLister
// interface.
type assessmentTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AssessmentTargets in the indexer for a given namespace.
func (s assessmentTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AssessmentTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AssessmentTarget))
	})
	return ret, err
}

// Get retrieves the AssessmentTarget from the indexer for a given namespace and name.
func (s assessmentTargetNamespaceLister) Get(name string) (*v1alpha1.AssessmentTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("assessmenttarget"), name)
	}
	return obj.(*v1alpha1.AssessmentTarget), nil
}
