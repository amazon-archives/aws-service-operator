/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/logs/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DestinationLister helps list Destinations.
type DestinationLister interface {
	// List lists all Destinations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Destination, err error)
	// Destinations returns an object that can list and get Destinations.
	Destinations(namespace string) DestinationNamespaceLister
	DestinationListerExpansion
}

// destinationLister implements the DestinationLister interface.
type destinationLister struct {
	indexer cache.Indexer
}

// NewDestinationLister returns a new DestinationLister.
func NewDestinationLister(indexer cache.Indexer) DestinationLister {
	return &destinationLister{indexer: indexer}
}

// List lists all Destinations in the indexer.
func (s *destinationLister) List(selector labels.Selector) (ret []*v1alpha1.Destination, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Destination))
	})
	return ret, err
}

// Destinations returns an object that can list and get Destinations.
func (s *destinationLister) Destinations(namespace string) DestinationNamespaceLister {
	return destinationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DestinationNamespaceLister helps list and get Destinations.
type DestinationNamespaceLister interface {
	// List lists all Destinations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Destination, err error)
	// Get retrieves the Destination from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Destination, error)
	DestinationNamespaceListerExpansion
}

// destinationNamespaceLister implements the DestinationNamespaceLister
// interface.
type destinationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Destinations in the indexer for a given namespace.
func (s destinationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Destination, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Destination))
	})
	return ret, err
}

// Get retrieves the Destination from the indexer for a given namespace and name.
func (s destinationNamespaceLister) Get(name string) (*v1alpha1.Destination, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("destination"), name)
	}
	return obj.(*v1alpha1.Destination), nil
}
