/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/logs/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SubscriptionFilterLister helps list SubscriptionFilters.
type SubscriptionFilterLister interface {
	// List lists all SubscriptionFilters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SubscriptionFilter, err error)
	// SubscriptionFilters returns an object that can list and get SubscriptionFilters.
	SubscriptionFilters(namespace string) SubscriptionFilterNamespaceLister
	SubscriptionFilterListerExpansion
}

// subscriptionFilterLister implements the SubscriptionFilterLister interface.
type subscriptionFilterLister struct {
	indexer cache.Indexer
}

// NewSubscriptionFilterLister returns a new SubscriptionFilterLister.
func NewSubscriptionFilterLister(indexer cache.Indexer) SubscriptionFilterLister {
	return &subscriptionFilterLister{indexer: indexer}
}

// List lists all SubscriptionFilters in the indexer.
func (s *subscriptionFilterLister) List(selector labels.Selector) (ret []*v1alpha1.SubscriptionFilter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubscriptionFilter))
	})
	return ret, err
}

// SubscriptionFilters returns an object that can list and get SubscriptionFilters.
func (s *subscriptionFilterLister) SubscriptionFilters(namespace string) SubscriptionFilterNamespaceLister {
	return subscriptionFilterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SubscriptionFilterNamespaceLister helps list and get SubscriptionFilters.
type SubscriptionFilterNamespaceLister interface {
	// List lists all SubscriptionFilters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SubscriptionFilter, err error)
	// Get retrieves the SubscriptionFilter from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SubscriptionFilter, error)
	SubscriptionFilterNamespaceListerExpansion
}

// subscriptionFilterNamespaceLister implements the SubscriptionFilterNamespaceLister
// interface.
type subscriptionFilterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SubscriptionFilters in the indexer for a given namespace.
func (s subscriptionFilterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SubscriptionFilter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubscriptionFilter))
	})
	return ret, err
}

// Get retrieves the SubscriptionFilter from the indexer for a given namespace and name.
func (s subscriptionFilterNamespaceLister) Get(name string) (*v1alpha1.SubscriptionFilter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("subscriptionfilter"), name)
	}
	return obj.(*v1alpha1.SubscriptionFilter), nil
}
