/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/s3/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BucketPolicyLister helps list BucketPolicies.
type BucketPolicyLister interface {
	// List lists all BucketPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BucketPolicy, err error)
	// BucketPolicies returns an object that can list and get BucketPolicies.
	BucketPolicies(namespace string) BucketPolicyNamespaceLister
	BucketPolicyListerExpansion
}

// bucketPolicyLister implements the BucketPolicyLister interface.
type bucketPolicyLister struct {
	indexer cache.Indexer
}

// NewBucketPolicyLister returns a new BucketPolicyLister.
func NewBucketPolicyLister(indexer cache.Indexer) BucketPolicyLister {
	return &bucketPolicyLister{indexer: indexer}
}

// List lists all BucketPolicies in the indexer.
func (s *bucketPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.BucketPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketPolicy))
	})
	return ret, err
}

// BucketPolicies returns an object that can list and get BucketPolicies.
func (s *bucketPolicyLister) BucketPolicies(namespace string) BucketPolicyNamespaceLister {
	return bucketPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BucketPolicyNamespaceLister helps list and get BucketPolicies.
type BucketPolicyNamespaceLister interface {
	// List lists all BucketPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BucketPolicy, err error)
	// Get retrieves the BucketPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BucketPolicy, error)
	BucketPolicyNamespaceListerExpansion
}

// bucketPolicyNamespaceLister implements the BucketPolicyNamespaceLister
// interface.
type bucketPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BucketPolicies in the indexer for a given namespace.
func (s bucketPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BucketPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BucketPolicy))
	})
	return ret, err
}

// Get retrieves the BucketPolicy from the indexer for a given namespace and name.
func (s bucketPolicyNamespaceLister) Get(name string) (*v1alpha1.BucketPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bucketpolicy"), name)
	}
	return obj.(*v1alpha1.BucketPolicy), nil
}
