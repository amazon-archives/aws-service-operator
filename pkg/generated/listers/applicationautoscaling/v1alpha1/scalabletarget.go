/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/applicationautoscaling/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScalableTargetLister helps list ScalableTargets.
type ScalableTargetLister interface {
	// List lists all ScalableTargets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ScalableTarget, err error)
	// ScalableTargets returns an object that can list and get ScalableTargets.
	ScalableTargets(namespace string) ScalableTargetNamespaceLister
	ScalableTargetListerExpansion
}

// scalableTargetLister implements the ScalableTargetLister interface.
type scalableTargetLister struct {
	indexer cache.Indexer
}

// NewScalableTargetLister returns a new ScalableTargetLister.
func NewScalableTargetLister(indexer cache.Indexer) ScalableTargetLister {
	return &scalableTargetLister{indexer: indexer}
}

// List lists all ScalableTargets in the indexer.
func (s *scalableTargetLister) List(selector labels.Selector) (ret []*v1alpha1.ScalableTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScalableTarget))
	})
	return ret, err
}

// ScalableTargets returns an object that can list and get ScalableTargets.
func (s *scalableTargetLister) ScalableTargets(namespace string) ScalableTargetNamespaceLister {
	return scalableTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScalableTargetNamespaceLister helps list and get ScalableTargets.
type ScalableTargetNamespaceLister interface {
	// List lists all ScalableTargets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ScalableTarget, err error)
	// Get retrieves the ScalableTarget from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ScalableTarget, error)
	ScalableTargetNamespaceListerExpansion
}

// scalableTargetNamespaceLister implements the ScalableTargetNamespaceLister
// interface.
type scalableTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ScalableTargets in the indexer for a given namespace.
func (s scalableTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ScalableTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScalableTarget))
	})
	return ret, err
}

// Get retrieves the ScalableTarget from the indexer for a given namespace and name.
func (s scalableTargetNamespaceLister) Get(name string) (*v1alpha1.ScalableTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("scalabletarget"), name)
	}
	return obj.(*v1alpha1.ScalableTarget), nil
}
