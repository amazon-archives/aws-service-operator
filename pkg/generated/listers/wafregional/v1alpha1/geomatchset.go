/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/wafregional/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GeoMatchSetLister helps list GeoMatchSets.
type GeoMatchSetLister interface {
	// List lists all GeoMatchSets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.GeoMatchSet, err error)
	// GeoMatchSets returns an object that can list and get GeoMatchSets.
	GeoMatchSets(namespace string) GeoMatchSetNamespaceLister
	GeoMatchSetListerExpansion
}

// geoMatchSetLister implements the GeoMatchSetLister interface.
type geoMatchSetLister struct {
	indexer cache.Indexer
}

// NewGeoMatchSetLister returns a new GeoMatchSetLister.
func NewGeoMatchSetLister(indexer cache.Indexer) GeoMatchSetLister {
	return &geoMatchSetLister{indexer: indexer}
}

// List lists all GeoMatchSets in the indexer.
func (s *geoMatchSetLister) List(selector labels.Selector) (ret []*v1alpha1.GeoMatchSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GeoMatchSet))
	})
	return ret, err
}

// GeoMatchSets returns an object that can list and get GeoMatchSets.
func (s *geoMatchSetLister) GeoMatchSets(namespace string) GeoMatchSetNamespaceLister {
	return geoMatchSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GeoMatchSetNamespaceLister helps list and get GeoMatchSets.
type GeoMatchSetNamespaceLister interface {
	// List lists all GeoMatchSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.GeoMatchSet, err error)
	// Get retrieves the GeoMatchSet from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.GeoMatchSet, error)
	GeoMatchSetNamespaceListerExpansion
}

// geoMatchSetNamespaceLister implements the GeoMatchSetNamespaceLister
// interface.
type geoMatchSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GeoMatchSets in the indexer for a given namespace.
func (s geoMatchSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GeoMatchSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GeoMatchSet))
	})
	return ret, err
}

// Get retrieves the GeoMatchSet from the indexer for a given namespace and name.
func (s geoMatchSetNamespaceLister) Get(name string) (*v1alpha1.GeoMatchSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("geomatchset"), name)
	}
	return obj.(*v1alpha1.GeoMatchSet), nil
}
