/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/appstream/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StackUserAssociationLister helps list StackUserAssociations.
type StackUserAssociationLister interface {
	// List lists all StackUserAssociations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.StackUserAssociation, err error)
	// StackUserAssociations returns an object that can list and get StackUserAssociations.
	StackUserAssociations(namespace string) StackUserAssociationNamespaceLister
	StackUserAssociationListerExpansion
}

// stackUserAssociationLister implements the StackUserAssociationLister interface.
type stackUserAssociationLister struct {
	indexer cache.Indexer
}

// NewStackUserAssociationLister returns a new StackUserAssociationLister.
func NewStackUserAssociationLister(indexer cache.Indexer) StackUserAssociationLister {
	return &stackUserAssociationLister{indexer: indexer}
}

// List lists all StackUserAssociations in the indexer.
func (s *stackUserAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.StackUserAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StackUserAssociation))
	})
	return ret, err
}

// StackUserAssociations returns an object that can list and get StackUserAssociations.
func (s *stackUserAssociationLister) StackUserAssociations(namespace string) StackUserAssociationNamespaceLister {
	return stackUserAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StackUserAssociationNamespaceLister helps list and get StackUserAssociations.
type StackUserAssociationNamespaceLister interface {
	// List lists all StackUserAssociations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.StackUserAssociation, err error)
	// Get retrieves the StackUserAssociation from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.StackUserAssociation, error)
	StackUserAssociationNamespaceListerExpansion
}

// stackUserAssociationNamespaceLister implements the StackUserAssociationNamespaceLister
// interface.
type stackUserAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StackUserAssociations in the indexer for a given namespace.
func (s stackUserAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StackUserAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StackUserAssociation))
	})
	return ret, err
}

// Get retrieves the StackUserAssociation from the indexer for a given namespace and name.
func (s stackUserAssociationNamespaceLister) Get(name string) (*v1alpha1.StackUserAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("stackuserassociation"), name)
	}
	return obj.(*v1alpha1.StackUserAssociation), nil
}
