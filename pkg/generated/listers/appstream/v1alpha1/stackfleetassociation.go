/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/appstream/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StackFleetAssociationLister helps list StackFleetAssociations.
type StackFleetAssociationLister interface {
	// List lists all StackFleetAssociations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.StackFleetAssociation, err error)
	// StackFleetAssociations returns an object that can list and get StackFleetAssociations.
	StackFleetAssociations(namespace string) StackFleetAssociationNamespaceLister
	StackFleetAssociationListerExpansion
}

// stackFleetAssociationLister implements the StackFleetAssociationLister interface.
type stackFleetAssociationLister struct {
	indexer cache.Indexer
}

// NewStackFleetAssociationLister returns a new StackFleetAssociationLister.
func NewStackFleetAssociationLister(indexer cache.Indexer) StackFleetAssociationLister {
	return &stackFleetAssociationLister{indexer: indexer}
}

// List lists all StackFleetAssociations in the indexer.
func (s *stackFleetAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.StackFleetAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StackFleetAssociation))
	})
	return ret, err
}

// StackFleetAssociations returns an object that can list and get StackFleetAssociations.
func (s *stackFleetAssociationLister) StackFleetAssociations(namespace string) StackFleetAssociationNamespaceLister {
	return stackFleetAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StackFleetAssociationNamespaceLister helps list and get StackFleetAssociations.
type StackFleetAssociationNamespaceLister interface {
	// List lists all StackFleetAssociations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.StackFleetAssociation, err error)
	// Get retrieves the StackFleetAssociation from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.StackFleetAssociation, error)
	StackFleetAssociationNamespaceListerExpansion
}

// stackFleetAssociationNamespaceLister implements the StackFleetAssociationNamespaceLister
// interface.
type stackFleetAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StackFleetAssociations in the indexer for a given namespace.
func (s stackFleetAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StackFleetAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StackFleetAssociation))
	})
	return ret, err
}

// Get retrieves the StackFleetAssociation from the indexer for a given namespace and name.
func (s stackFleetAssociationNamespaceLister) Get(name string) (*v1alpha1.StackFleetAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("stackfleetassociation"), name)
	}
	return obj.(*v1alpha1.StackFleetAssociation), nil
}
