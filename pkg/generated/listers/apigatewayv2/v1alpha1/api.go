/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/apigatewayv2/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApiLister helps list Apis.
type ApiLister interface {
	// List lists all Apis in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Api, err error)
	// Apis returns an object that can list and get Apis.
	Apis(namespace string) ApiNamespaceLister
	ApiListerExpansion
}

// apiLister implements the ApiLister interface.
type apiLister struct {
	indexer cache.Indexer
}

// NewApiLister returns a new ApiLister.
func NewApiLister(indexer cache.Indexer) ApiLister {
	return &apiLister{indexer: indexer}
}

// List lists all Apis in the indexer.
func (s *apiLister) List(selector labels.Selector) (ret []*v1alpha1.Api, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Api))
	})
	return ret, err
}

// Apis returns an object that can list and get Apis.
func (s *apiLister) Apis(namespace string) ApiNamespaceLister {
	return apiNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiNamespaceLister helps list and get Apis.
type ApiNamespaceLister interface {
	// List lists all Apis in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Api, err error)
	// Get retrieves the Api from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Api, error)
	ApiNamespaceListerExpansion
}

// apiNamespaceLister implements the ApiNamespaceLister
// interface.
type apiNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Apis in the indexer for a given namespace.
func (s apiNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Api, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Api))
	})
	return ret, err
}

// Get retrieves the Api from the indexer for a given namespace and name.
func (s apiNamespaceLister) Get(name string) (*v1alpha1.Api, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("api"), name)
	}
	return obj.(*v1alpha1.Api), nil
}
