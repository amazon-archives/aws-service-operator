/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/ram/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResourceShareLister helps list ResourceShares.
type ResourceShareLister interface {
	// List lists all ResourceShares in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceShare, err error)
	// ResourceShares returns an object that can list and get ResourceShares.
	ResourceShares(namespace string) ResourceShareNamespaceLister
	ResourceShareListerExpansion
}

// resourceShareLister implements the ResourceShareLister interface.
type resourceShareLister struct {
	indexer cache.Indexer
}

// NewResourceShareLister returns a new ResourceShareLister.
func NewResourceShareLister(indexer cache.Indexer) ResourceShareLister {
	return &resourceShareLister{indexer: indexer}
}

// List lists all ResourceShares in the indexer.
func (s *resourceShareLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceShare, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceShare))
	})
	return ret, err
}

// ResourceShares returns an object that can list and get ResourceShares.
func (s *resourceShareLister) ResourceShares(namespace string) ResourceShareNamespaceLister {
	return resourceShareNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResourceShareNamespaceLister helps list and get ResourceShares.
type ResourceShareNamespaceLister interface {
	// List lists all ResourceShares in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceShare, err error)
	// Get retrieves the ResourceShare from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ResourceShare, error)
	ResourceShareNamespaceListerExpansion
}

// resourceShareNamespaceLister implements the ResourceShareNamespaceLister
// interface.
type resourceShareNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResourceShares in the indexer for a given namespace.
func (s resourceShareNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceShare, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceShare))
	})
	return ret, err
}

// Get retrieves the ResourceShare from the indexer for a given namespace and name.
func (s resourceShareNamespaceLister) Get(name string) (*v1alpha1.ResourceShare, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("resourceshare"), name)
	}
	return obj.(*v1alpha1.ResourceShare), nil
}
