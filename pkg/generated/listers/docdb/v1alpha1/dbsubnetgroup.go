/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/docdb/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DBSubnetGroupLister helps list DBSubnetGroups.
type DBSubnetGroupLister interface {
	// List lists all DBSubnetGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DBSubnetGroup, err error)
	// DBSubnetGroups returns an object that can list and get DBSubnetGroups.
	DBSubnetGroups(namespace string) DBSubnetGroupNamespaceLister
	DBSubnetGroupListerExpansion
}

// dBSubnetGroupLister implements the DBSubnetGroupLister interface.
type dBSubnetGroupLister struct {
	indexer cache.Indexer
}

// NewDBSubnetGroupLister returns a new DBSubnetGroupLister.
func NewDBSubnetGroupLister(indexer cache.Indexer) DBSubnetGroupLister {
	return &dBSubnetGroupLister{indexer: indexer}
}

// List lists all DBSubnetGroups in the indexer.
func (s *dBSubnetGroupLister) List(selector labels.Selector) (ret []*v1alpha1.DBSubnetGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DBSubnetGroup))
	})
	return ret, err
}

// DBSubnetGroups returns an object that can list and get DBSubnetGroups.
func (s *dBSubnetGroupLister) DBSubnetGroups(namespace string) DBSubnetGroupNamespaceLister {
	return dBSubnetGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DBSubnetGroupNamespaceLister helps list and get DBSubnetGroups.
type DBSubnetGroupNamespaceLister interface {
	// List lists all DBSubnetGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DBSubnetGroup, err error)
	// Get retrieves the DBSubnetGroup from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DBSubnetGroup, error)
	DBSubnetGroupNamespaceListerExpansion
}

// dBSubnetGroupNamespaceLister implements the DBSubnetGroupNamespaceLister
// interface.
type dBSubnetGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DBSubnetGroups in the indexer for a given namespace.
func (s dBSubnetGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DBSubnetGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DBSubnetGroup))
	})
	return ret, err
}

// Get retrieves the DBSubnetGroup from the indexer for a given namespace and name.
func (s dBSubnetGroupNamespaceLister) Get(name string) (*v1alpha1.DBSubnetGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dbsubnetgroup"), name)
	}
	return obj.(*v1alpha1.DBSubnetGroup), nil
}
