/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/servicecatalog/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PortfolioProductAssociationLister helps list PortfolioProductAssociations.
type PortfolioProductAssociationLister interface {
	// List lists all PortfolioProductAssociations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PortfolioProductAssociation, err error)
	// PortfolioProductAssociations returns an object that can list and get PortfolioProductAssociations.
	PortfolioProductAssociations(namespace string) PortfolioProductAssociationNamespaceLister
	PortfolioProductAssociationListerExpansion
}

// portfolioProductAssociationLister implements the PortfolioProductAssociationLister interface.
type portfolioProductAssociationLister struct {
	indexer cache.Indexer
}

// NewPortfolioProductAssociationLister returns a new PortfolioProductAssociationLister.
func NewPortfolioProductAssociationLister(indexer cache.Indexer) PortfolioProductAssociationLister {
	return &portfolioProductAssociationLister{indexer: indexer}
}

// List lists all PortfolioProductAssociations in the indexer.
func (s *portfolioProductAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.PortfolioProductAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PortfolioProductAssociation))
	})
	return ret, err
}

// PortfolioProductAssociations returns an object that can list and get PortfolioProductAssociations.
func (s *portfolioProductAssociationLister) PortfolioProductAssociations(namespace string) PortfolioProductAssociationNamespaceLister {
	return portfolioProductAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PortfolioProductAssociationNamespaceLister helps list and get PortfolioProductAssociations.
type PortfolioProductAssociationNamespaceLister interface {
	// List lists all PortfolioProductAssociations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PortfolioProductAssociation, err error)
	// Get retrieves the PortfolioProductAssociation from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PortfolioProductAssociation, error)
	PortfolioProductAssociationNamespaceListerExpansion
}

// portfolioProductAssociationNamespaceLister implements the PortfolioProductAssociationNamespaceLister
// interface.
type portfolioProductAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PortfolioProductAssociations in the indexer for a given namespace.
func (s portfolioProductAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PortfolioProductAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PortfolioProductAssociation))
	})
	return ret, err
}

// Get retrieves the PortfolioProductAssociation from the indexer for a given namespace and name.
func (s portfolioProductAssociationNamespaceLister) Get(name string) (*v1alpha1.PortfolioProductAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("portfolioproductassociation"), name)
	}
	return obj.(*v1alpha1.PortfolioProductAssociation), nil
}
