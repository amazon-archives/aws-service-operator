/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/servicecatalog/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CloudFormationProvisionedProductLister helps list CloudFormationProvisionedProducts.
type CloudFormationProvisionedProductLister interface {
	// List lists all CloudFormationProvisionedProducts in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CloudFormationProvisionedProduct, err error)
	// CloudFormationProvisionedProducts returns an object that can list and get CloudFormationProvisionedProducts.
	CloudFormationProvisionedProducts(namespace string) CloudFormationProvisionedProductNamespaceLister
	CloudFormationProvisionedProductListerExpansion
}

// cloudFormationProvisionedProductLister implements the CloudFormationProvisionedProductLister interface.
type cloudFormationProvisionedProductLister struct {
	indexer cache.Indexer
}

// NewCloudFormationProvisionedProductLister returns a new CloudFormationProvisionedProductLister.
func NewCloudFormationProvisionedProductLister(indexer cache.Indexer) CloudFormationProvisionedProductLister {
	return &cloudFormationProvisionedProductLister{indexer: indexer}
}

// List lists all CloudFormationProvisionedProducts in the indexer.
func (s *cloudFormationProvisionedProductLister) List(selector labels.Selector) (ret []*v1alpha1.CloudFormationProvisionedProduct, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudFormationProvisionedProduct))
	})
	return ret, err
}

// CloudFormationProvisionedProducts returns an object that can list and get CloudFormationProvisionedProducts.
func (s *cloudFormationProvisionedProductLister) CloudFormationProvisionedProducts(namespace string) CloudFormationProvisionedProductNamespaceLister {
	return cloudFormationProvisionedProductNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CloudFormationProvisionedProductNamespaceLister helps list and get CloudFormationProvisionedProducts.
type CloudFormationProvisionedProductNamespaceLister interface {
	// List lists all CloudFormationProvisionedProducts in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CloudFormationProvisionedProduct, err error)
	// Get retrieves the CloudFormationProvisionedProduct from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CloudFormationProvisionedProduct, error)
	CloudFormationProvisionedProductNamespaceListerExpansion
}

// cloudFormationProvisionedProductNamespaceLister implements the CloudFormationProvisionedProductNamespaceLister
// interface.
type cloudFormationProvisionedProductNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CloudFormationProvisionedProducts in the indexer for a given namespace.
func (s cloudFormationProvisionedProductNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CloudFormationProvisionedProduct, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudFormationProvisionedProduct))
	})
	return ret, err
}

// Get retrieves the CloudFormationProvisionedProduct from the indexer for a given namespace and name.
func (s cloudFormationProvisionedProductNamespaceLister) Get(name string) (*v1alpha1.CloudFormationProvisionedProduct, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cloudformationprovisionedproduct"), name)
	}
	return obj.(*v1alpha1.CloudFormationProvisionedProduct), nil
}
