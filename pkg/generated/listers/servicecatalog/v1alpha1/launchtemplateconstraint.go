/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/servicecatalog/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LaunchTemplateConstraintLister helps list LaunchTemplateConstraints.
type LaunchTemplateConstraintLister interface {
	// List lists all LaunchTemplateConstraints in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LaunchTemplateConstraint, err error)
	// LaunchTemplateConstraints returns an object that can list and get LaunchTemplateConstraints.
	LaunchTemplateConstraints(namespace string) LaunchTemplateConstraintNamespaceLister
	LaunchTemplateConstraintListerExpansion
}

// launchTemplateConstraintLister implements the LaunchTemplateConstraintLister interface.
type launchTemplateConstraintLister struct {
	indexer cache.Indexer
}

// NewLaunchTemplateConstraintLister returns a new LaunchTemplateConstraintLister.
func NewLaunchTemplateConstraintLister(indexer cache.Indexer) LaunchTemplateConstraintLister {
	return &launchTemplateConstraintLister{indexer: indexer}
}

// List lists all LaunchTemplateConstraints in the indexer.
func (s *launchTemplateConstraintLister) List(selector labels.Selector) (ret []*v1alpha1.LaunchTemplateConstraint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LaunchTemplateConstraint))
	})
	return ret, err
}

// LaunchTemplateConstraints returns an object that can list and get LaunchTemplateConstraints.
func (s *launchTemplateConstraintLister) LaunchTemplateConstraints(namespace string) LaunchTemplateConstraintNamespaceLister {
	return launchTemplateConstraintNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LaunchTemplateConstraintNamespaceLister helps list and get LaunchTemplateConstraints.
type LaunchTemplateConstraintNamespaceLister interface {
	// List lists all LaunchTemplateConstraints in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LaunchTemplateConstraint, err error)
	// Get retrieves the LaunchTemplateConstraint from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LaunchTemplateConstraint, error)
	LaunchTemplateConstraintNamespaceListerExpansion
}

// launchTemplateConstraintNamespaceLister implements the LaunchTemplateConstraintNamespaceLister
// interface.
type launchTemplateConstraintNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LaunchTemplateConstraints in the indexer for a given namespace.
func (s launchTemplateConstraintNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LaunchTemplateConstraint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LaunchTemplateConstraint))
	})
	return ret, err
}

// Get retrieves the LaunchTemplateConstraint from the indexer for a given namespace and name.
func (s launchTemplateConstraintNamespaceLister) Get(name string) (*v1alpha1.LaunchTemplateConstraint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("launchtemplateconstraint"), name)
	}
	return obj.(*v1alpha1.LaunchTemplateConstraint), nil
}
