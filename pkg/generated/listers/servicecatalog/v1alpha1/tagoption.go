/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/servicecatalog/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TagOptionLister helps list TagOptions.
type TagOptionLister interface {
	// List lists all TagOptions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.TagOption, err error)
	// TagOptions returns an object that can list and get TagOptions.
	TagOptions(namespace string) TagOptionNamespaceLister
	TagOptionListerExpansion
}

// tagOptionLister implements the TagOptionLister interface.
type tagOptionLister struct {
	indexer cache.Indexer
}

// NewTagOptionLister returns a new TagOptionLister.
func NewTagOptionLister(indexer cache.Indexer) TagOptionLister {
	return &tagOptionLister{indexer: indexer}
}

// List lists all TagOptions in the indexer.
func (s *tagOptionLister) List(selector labels.Selector) (ret []*v1alpha1.TagOption, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TagOption))
	})
	return ret, err
}

// TagOptions returns an object that can list and get TagOptions.
func (s *tagOptionLister) TagOptions(namespace string) TagOptionNamespaceLister {
	return tagOptionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TagOptionNamespaceLister helps list and get TagOptions.
type TagOptionNamespaceLister interface {
	// List lists all TagOptions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.TagOption, err error)
	// Get retrieves the TagOption from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.TagOption, error)
	TagOptionNamespaceListerExpansion
}

// tagOptionNamespaceLister implements the TagOptionNamespaceLister
// interface.
type tagOptionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TagOptions in the indexer for a given namespace.
func (s tagOptionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TagOption, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TagOption))
	})
	return ret, err
}

// Get retrieves the TagOption from the indexer for a given namespace and name.
func (s tagOptionNamespaceLister) Get(name string) (*v1alpha1.TagOption, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tagoption"), name)
	}
	return obj.(*v1alpha1.TagOption), nil
}
