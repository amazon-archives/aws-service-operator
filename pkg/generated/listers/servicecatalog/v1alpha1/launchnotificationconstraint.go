/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/servicecatalog/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LaunchNotificationConstraintLister helps list LaunchNotificationConstraints.
type LaunchNotificationConstraintLister interface {
	// List lists all LaunchNotificationConstraints in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LaunchNotificationConstraint, err error)
	// LaunchNotificationConstraints returns an object that can list and get LaunchNotificationConstraints.
	LaunchNotificationConstraints(namespace string) LaunchNotificationConstraintNamespaceLister
	LaunchNotificationConstraintListerExpansion
}

// launchNotificationConstraintLister implements the LaunchNotificationConstraintLister interface.
type launchNotificationConstraintLister struct {
	indexer cache.Indexer
}

// NewLaunchNotificationConstraintLister returns a new LaunchNotificationConstraintLister.
func NewLaunchNotificationConstraintLister(indexer cache.Indexer) LaunchNotificationConstraintLister {
	return &launchNotificationConstraintLister{indexer: indexer}
}

// List lists all LaunchNotificationConstraints in the indexer.
func (s *launchNotificationConstraintLister) List(selector labels.Selector) (ret []*v1alpha1.LaunchNotificationConstraint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LaunchNotificationConstraint))
	})
	return ret, err
}

// LaunchNotificationConstraints returns an object that can list and get LaunchNotificationConstraints.
func (s *launchNotificationConstraintLister) LaunchNotificationConstraints(namespace string) LaunchNotificationConstraintNamespaceLister {
	return launchNotificationConstraintNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LaunchNotificationConstraintNamespaceLister helps list and get LaunchNotificationConstraints.
type LaunchNotificationConstraintNamespaceLister interface {
	// List lists all LaunchNotificationConstraints in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LaunchNotificationConstraint, err error)
	// Get retrieves the LaunchNotificationConstraint from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LaunchNotificationConstraint, error)
	LaunchNotificationConstraintNamespaceListerExpansion
}

// launchNotificationConstraintNamespaceLister implements the LaunchNotificationConstraintNamespaceLister
// interface.
type launchNotificationConstraintNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LaunchNotificationConstraints in the indexer for a given namespace.
func (s launchNotificationConstraintNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LaunchNotificationConstraint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LaunchNotificationConstraint))
	})
	return ret, err
}

// Get retrieves the LaunchNotificationConstraint from the indexer for a given namespace and name.
func (s launchNotificationConstraintNamespaceLister) Get(name string) (*v1alpha1.LaunchNotificationConstraint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("launchnotificationconstraint"), name)
	}
	return obj.(*v1alpha1.LaunchNotificationConstraint), nil
}
