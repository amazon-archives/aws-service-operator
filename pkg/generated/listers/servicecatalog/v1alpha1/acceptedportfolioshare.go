/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/servicecatalog/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AcceptedPortfolioShareLister helps list AcceptedPortfolioShares.
type AcceptedPortfolioShareLister interface {
	// List lists all AcceptedPortfolioShares in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AcceptedPortfolioShare, err error)
	// AcceptedPortfolioShares returns an object that can list and get AcceptedPortfolioShares.
	AcceptedPortfolioShares(namespace string) AcceptedPortfolioShareNamespaceLister
	AcceptedPortfolioShareListerExpansion
}

// acceptedPortfolioShareLister implements the AcceptedPortfolioShareLister interface.
type acceptedPortfolioShareLister struct {
	indexer cache.Indexer
}

// NewAcceptedPortfolioShareLister returns a new AcceptedPortfolioShareLister.
func NewAcceptedPortfolioShareLister(indexer cache.Indexer) AcceptedPortfolioShareLister {
	return &acceptedPortfolioShareLister{indexer: indexer}
}

// List lists all AcceptedPortfolioShares in the indexer.
func (s *acceptedPortfolioShareLister) List(selector labels.Selector) (ret []*v1alpha1.AcceptedPortfolioShare, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AcceptedPortfolioShare))
	})
	return ret, err
}

// AcceptedPortfolioShares returns an object that can list and get AcceptedPortfolioShares.
func (s *acceptedPortfolioShareLister) AcceptedPortfolioShares(namespace string) AcceptedPortfolioShareNamespaceLister {
	return acceptedPortfolioShareNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AcceptedPortfolioShareNamespaceLister helps list and get AcceptedPortfolioShares.
type AcceptedPortfolioShareNamespaceLister interface {
	// List lists all AcceptedPortfolioShares in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AcceptedPortfolioShare, err error)
	// Get retrieves the AcceptedPortfolioShare from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AcceptedPortfolioShare, error)
	AcceptedPortfolioShareNamespaceListerExpansion
}

// acceptedPortfolioShareNamespaceLister implements the AcceptedPortfolioShareNamespaceLister
// interface.
type acceptedPortfolioShareNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AcceptedPortfolioShares in the indexer for a given namespace.
func (s acceptedPortfolioShareNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AcceptedPortfolioShare, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AcceptedPortfolioShare))
	})
	return ret, err
}

// Get retrieves the AcceptedPortfolioShare from the indexer for a given namespace and name.
func (s acceptedPortfolioShareNamespaceLister) Get(name string) (*v1alpha1.AcceptedPortfolioShare, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("acceptedportfolioshare"), name)
	}
	return obj.(*v1alpha1.AcceptedPortfolioShare), nil
}
