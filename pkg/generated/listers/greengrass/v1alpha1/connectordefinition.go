/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/greengrass/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConnectorDefinitionLister helps list ConnectorDefinitions.
type ConnectorDefinitionLister interface {
	// List lists all ConnectorDefinitions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectorDefinition, err error)
	// ConnectorDefinitions returns an object that can list and get ConnectorDefinitions.
	ConnectorDefinitions(namespace string) ConnectorDefinitionNamespaceLister
	ConnectorDefinitionListerExpansion
}

// connectorDefinitionLister implements the ConnectorDefinitionLister interface.
type connectorDefinitionLister struct {
	indexer cache.Indexer
}

// NewConnectorDefinitionLister returns a new ConnectorDefinitionLister.
func NewConnectorDefinitionLister(indexer cache.Indexer) ConnectorDefinitionLister {
	return &connectorDefinitionLister{indexer: indexer}
}

// List lists all ConnectorDefinitions in the indexer.
func (s *connectorDefinitionLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectorDefinition, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectorDefinition))
	})
	return ret, err
}

// ConnectorDefinitions returns an object that can list and get ConnectorDefinitions.
func (s *connectorDefinitionLister) ConnectorDefinitions(namespace string) ConnectorDefinitionNamespaceLister {
	return connectorDefinitionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConnectorDefinitionNamespaceLister helps list and get ConnectorDefinitions.
type ConnectorDefinitionNamespaceLister interface {
	// List lists all ConnectorDefinitions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectorDefinition, err error)
	// Get retrieves the ConnectorDefinition from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ConnectorDefinition, error)
	ConnectorDefinitionNamespaceListerExpansion
}

// connectorDefinitionNamespaceLister implements the ConnectorDefinitionNamespaceLister
// interface.
type connectorDefinitionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConnectorDefinitions in the indexer for a given namespace.
func (s connectorDefinitionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectorDefinition, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectorDefinition))
	})
	return ret, err
}

// Get retrieves the ConnectorDefinition from the indexer for a given namespace and name.
func (s connectorDefinitionNamespaceLister) Get(name string) (*v1alpha1.ConnectorDefinition, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("connectordefinition"), name)
	}
	return obj.(*v1alpha1.ConnectorDefinition), nil
}
