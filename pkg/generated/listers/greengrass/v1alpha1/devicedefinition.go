/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/greengrass/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DeviceDefinitionLister helps list DeviceDefinitions.
type DeviceDefinitionLister interface {
	// List lists all DeviceDefinitions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DeviceDefinition, err error)
	// DeviceDefinitions returns an object that can list and get DeviceDefinitions.
	DeviceDefinitions(namespace string) DeviceDefinitionNamespaceLister
	DeviceDefinitionListerExpansion
}

// deviceDefinitionLister implements the DeviceDefinitionLister interface.
type deviceDefinitionLister struct {
	indexer cache.Indexer
}

// NewDeviceDefinitionLister returns a new DeviceDefinitionLister.
func NewDeviceDefinitionLister(indexer cache.Indexer) DeviceDefinitionLister {
	return &deviceDefinitionLister{indexer: indexer}
}

// List lists all DeviceDefinitions in the indexer.
func (s *deviceDefinitionLister) List(selector labels.Selector) (ret []*v1alpha1.DeviceDefinition, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeviceDefinition))
	})
	return ret, err
}

// DeviceDefinitions returns an object that can list and get DeviceDefinitions.
func (s *deviceDefinitionLister) DeviceDefinitions(namespace string) DeviceDefinitionNamespaceLister {
	return deviceDefinitionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DeviceDefinitionNamespaceLister helps list and get DeviceDefinitions.
type DeviceDefinitionNamespaceLister interface {
	// List lists all DeviceDefinitions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DeviceDefinition, err error)
	// Get retrieves the DeviceDefinition from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DeviceDefinition, error)
	DeviceDefinitionNamespaceListerExpansion
}

// deviceDefinitionNamespaceLister implements the DeviceDefinitionNamespaceLister
// interface.
type deviceDefinitionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DeviceDefinitions in the indexer for a given namespace.
func (s deviceDefinitionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DeviceDefinition, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeviceDefinition))
	})
	return ret, err
}

// Get retrieves the DeviceDefinition from the indexer for a given namespace and name.
func (s deviceDefinitionNamespaceLister) Get(name string) (*v1alpha1.DeviceDefinition, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("devicedefinition"), name)
	}
	return obj.(*v1alpha1.DeviceDefinition), nil
}
