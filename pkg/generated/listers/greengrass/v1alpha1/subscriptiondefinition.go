/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/greengrass/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SubscriptionDefinitionLister helps list SubscriptionDefinitions.
type SubscriptionDefinitionLister interface {
	// List lists all SubscriptionDefinitions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SubscriptionDefinition, err error)
	// SubscriptionDefinitions returns an object that can list and get SubscriptionDefinitions.
	SubscriptionDefinitions(namespace string) SubscriptionDefinitionNamespaceLister
	SubscriptionDefinitionListerExpansion
}

// subscriptionDefinitionLister implements the SubscriptionDefinitionLister interface.
type subscriptionDefinitionLister struct {
	indexer cache.Indexer
}

// NewSubscriptionDefinitionLister returns a new SubscriptionDefinitionLister.
func NewSubscriptionDefinitionLister(indexer cache.Indexer) SubscriptionDefinitionLister {
	return &subscriptionDefinitionLister{indexer: indexer}
}

// List lists all SubscriptionDefinitions in the indexer.
func (s *subscriptionDefinitionLister) List(selector labels.Selector) (ret []*v1alpha1.SubscriptionDefinition, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubscriptionDefinition))
	})
	return ret, err
}

// SubscriptionDefinitions returns an object that can list and get SubscriptionDefinitions.
func (s *subscriptionDefinitionLister) SubscriptionDefinitions(namespace string) SubscriptionDefinitionNamespaceLister {
	return subscriptionDefinitionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SubscriptionDefinitionNamespaceLister helps list and get SubscriptionDefinitions.
type SubscriptionDefinitionNamespaceLister interface {
	// List lists all SubscriptionDefinitions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SubscriptionDefinition, err error)
	// Get retrieves the SubscriptionDefinition from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SubscriptionDefinition, error)
	SubscriptionDefinitionNamespaceListerExpansion
}

// subscriptionDefinitionNamespaceLister implements the SubscriptionDefinitionNamespaceLister
// interface.
type subscriptionDefinitionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SubscriptionDefinitions in the indexer for a given namespace.
func (s subscriptionDefinitionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SubscriptionDefinition, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubscriptionDefinition))
	})
	return ret, err
}

// Get retrieves the SubscriptionDefinition from the indexer for a given namespace and name.
func (s subscriptionDefinitionNamespaceLister) Get(name string) (*v1alpha1.SubscriptionDefinition, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("subscriptiondefinition"), name)
	}
	return obj.(*v1alpha1.SubscriptionDefinition), nil
}
