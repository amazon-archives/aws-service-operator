/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/greengrass/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CoreDefinitionVersionLister helps list CoreDefinitionVersions.
type CoreDefinitionVersionLister interface {
	// List lists all CoreDefinitionVersions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CoreDefinitionVersion, err error)
	// CoreDefinitionVersions returns an object that can list and get CoreDefinitionVersions.
	CoreDefinitionVersions(namespace string) CoreDefinitionVersionNamespaceLister
	CoreDefinitionVersionListerExpansion
}

// coreDefinitionVersionLister implements the CoreDefinitionVersionLister interface.
type coreDefinitionVersionLister struct {
	indexer cache.Indexer
}

// NewCoreDefinitionVersionLister returns a new CoreDefinitionVersionLister.
func NewCoreDefinitionVersionLister(indexer cache.Indexer) CoreDefinitionVersionLister {
	return &coreDefinitionVersionLister{indexer: indexer}
}

// List lists all CoreDefinitionVersions in the indexer.
func (s *coreDefinitionVersionLister) List(selector labels.Selector) (ret []*v1alpha1.CoreDefinitionVersion, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CoreDefinitionVersion))
	})
	return ret, err
}

// CoreDefinitionVersions returns an object that can list and get CoreDefinitionVersions.
func (s *coreDefinitionVersionLister) CoreDefinitionVersions(namespace string) CoreDefinitionVersionNamespaceLister {
	return coreDefinitionVersionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CoreDefinitionVersionNamespaceLister helps list and get CoreDefinitionVersions.
type CoreDefinitionVersionNamespaceLister interface {
	// List lists all CoreDefinitionVersions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CoreDefinitionVersion, err error)
	// Get retrieves the CoreDefinitionVersion from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CoreDefinitionVersion, error)
	CoreDefinitionVersionNamespaceListerExpansion
}

// coreDefinitionVersionNamespaceLister implements the CoreDefinitionVersionNamespaceLister
// interface.
type coreDefinitionVersionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CoreDefinitionVersions in the indexer for a given namespace.
func (s coreDefinitionVersionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CoreDefinitionVersion, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CoreDefinitionVersion))
	})
	return ret, err
}

// Get retrieves the CoreDefinitionVersion from the indexer for a given namespace and name.
func (s coreDefinitionVersionNamespaceLister) Get(name string) (*v1alpha1.CoreDefinitionVersion, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("coredefinitionversion"), name)
	}
	return obj.(*v1alpha1.CoreDefinitionVersion), nil
}
