/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/greengrass/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SubscriptionDefinitionVersionLister helps list SubscriptionDefinitionVersions.
type SubscriptionDefinitionVersionLister interface {
	// List lists all SubscriptionDefinitionVersions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SubscriptionDefinitionVersion, err error)
	// SubscriptionDefinitionVersions returns an object that can list and get SubscriptionDefinitionVersions.
	SubscriptionDefinitionVersions(namespace string) SubscriptionDefinitionVersionNamespaceLister
	SubscriptionDefinitionVersionListerExpansion
}

// subscriptionDefinitionVersionLister implements the SubscriptionDefinitionVersionLister interface.
type subscriptionDefinitionVersionLister struct {
	indexer cache.Indexer
}

// NewSubscriptionDefinitionVersionLister returns a new SubscriptionDefinitionVersionLister.
func NewSubscriptionDefinitionVersionLister(indexer cache.Indexer) SubscriptionDefinitionVersionLister {
	return &subscriptionDefinitionVersionLister{indexer: indexer}
}

// List lists all SubscriptionDefinitionVersions in the indexer.
func (s *subscriptionDefinitionVersionLister) List(selector labels.Selector) (ret []*v1alpha1.SubscriptionDefinitionVersion, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubscriptionDefinitionVersion))
	})
	return ret, err
}

// SubscriptionDefinitionVersions returns an object that can list and get SubscriptionDefinitionVersions.
func (s *subscriptionDefinitionVersionLister) SubscriptionDefinitionVersions(namespace string) SubscriptionDefinitionVersionNamespaceLister {
	return subscriptionDefinitionVersionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SubscriptionDefinitionVersionNamespaceLister helps list and get SubscriptionDefinitionVersions.
type SubscriptionDefinitionVersionNamespaceLister interface {
	// List lists all SubscriptionDefinitionVersions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SubscriptionDefinitionVersion, err error)
	// Get retrieves the SubscriptionDefinitionVersion from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SubscriptionDefinitionVersion, error)
	SubscriptionDefinitionVersionNamespaceListerExpansion
}

// subscriptionDefinitionVersionNamespaceLister implements the SubscriptionDefinitionVersionNamespaceLister
// interface.
type subscriptionDefinitionVersionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SubscriptionDefinitionVersions in the indexer for a given namespace.
func (s subscriptionDefinitionVersionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SubscriptionDefinitionVersion, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubscriptionDefinitionVersion))
	})
	return ret, err
}

// Get retrieves the SubscriptionDefinitionVersion from the indexer for a given namespace and name.
func (s subscriptionDefinitionVersionNamespaceLister) Get(name string) (*v1alpha1.SubscriptionDefinitionVersion, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("subscriptiondefinitionversion"), name)
	}
	return obj.(*v1alpha1.SubscriptionDefinitionVersion), nil
}
