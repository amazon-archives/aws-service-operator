/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/greengrass/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConnectorDefinitionVersionLister helps list ConnectorDefinitionVersions.
type ConnectorDefinitionVersionLister interface {
	// List lists all ConnectorDefinitionVersions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectorDefinitionVersion, err error)
	// ConnectorDefinitionVersions returns an object that can list and get ConnectorDefinitionVersions.
	ConnectorDefinitionVersions(namespace string) ConnectorDefinitionVersionNamespaceLister
	ConnectorDefinitionVersionListerExpansion
}

// connectorDefinitionVersionLister implements the ConnectorDefinitionVersionLister interface.
type connectorDefinitionVersionLister struct {
	indexer cache.Indexer
}

// NewConnectorDefinitionVersionLister returns a new ConnectorDefinitionVersionLister.
func NewConnectorDefinitionVersionLister(indexer cache.Indexer) ConnectorDefinitionVersionLister {
	return &connectorDefinitionVersionLister{indexer: indexer}
}

// List lists all ConnectorDefinitionVersions in the indexer.
func (s *connectorDefinitionVersionLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectorDefinitionVersion, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectorDefinitionVersion))
	})
	return ret, err
}

// ConnectorDefinitionVersions returns an object that can list and get ConnectorDefinitionVersions.
func (s *connectorDefinitionVersionLister) ConnectorDefinitionVersions(namespace string) ConnectorDefinitionVersionNamespaceLister {
	return connectorDefinitionVersionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConnectorDefinitionVersionNamespaceLister helps list and get ConnectorDefinitionVersions.
type ConnectorDefinitionVersionNamespaceLister interface {
	// List lists all ConnectorDefinitionVersions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectorDefinitionVersion, err error)
	// Get retrieves the ConnectorDefinitionVersion from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ConnectorDefinitionVersion, error)
	ConnectorDefinitionVersionNamespaceListerExpansion
}

// connectorDefinitionVersionNamespaceLister implements the ConnectorDefinitionVersionNamespaceLister
// interface.
type connectorDefinitionVersionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConnectorDefinitionVersions in the indexer for a given namespace.
func (s connectorDefinitionVersionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectorDefinitionVersion, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectorDefinitionVersion))
	})
	return ret, err
}

// Get retrieves the ConnectorDefinitionVersion from the indexer for a given namespace and name.
func (s connectorDefinitionVersionNamespaceLister) Get(name string) (*v1alpha1.ConnectorDefinitionVersion, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("connectordefinitionversion"), name)
	}
	return obj.(*v1alpha1.ConnectorDefinitionVersion), nil
}
