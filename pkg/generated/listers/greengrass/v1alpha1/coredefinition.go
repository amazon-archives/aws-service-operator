/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/greengrass/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CoreDefinitionLister helps list CoreDefinitions.
type CoreDefinitionLister interface {
	// List lists all CoreDefinitions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CoreDefinition, err error)
	// CoreDefinitions returns an object that can list and get CoreDefinitions.
	CoreDefinitions(namespace string) CoreDefinitionNamespaceLister
	CoreDefinitionListerExpansion
}

// coreDefinitionLister implements the CoreDefinitionLister interface.
type coreDefinitionLister struct {
	indexer cache.Indexer
}

// NewCoreDefinitionLister returns a new CoreDefinitionLister.
func NewCoreDefinitionLister(indexer cache.Indexer) CoreDefinitionLister {
	return &coreDefinitionLister{indexer: indexer}
}

// List lists all CoreDefinitions in the indexer.
func (s *coreDefinitionLister) List(selector labels.Selector) (ret []*v1alpha1.CoreDefinition, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CoreDefinition))
	})
	return ret, err
}

// CoreDefinitions returns an object that can list and get CoreDefinitions.
func (s *coreDefinitionLister) CoreDefinitions(namespace string) CoreDefinitionNamespaceLister {
	return coreDefinitionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CoreDefinitionNamespaceLister helps list and get CoreDefinitions.
type CoreDefinitionNamespaceLister interface {
	// List lists all CoreDefinitions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CoreDefinition, err error)
	// Get retrieves the CoreDefinition from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CoreDefinition, error)
	CoreDefinitionNamespaceListerExpansion
}

// coreDefinitionNamespaceLister implements the CoreDefinitionNamespaceLister
// interface.
type coreDefinitionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CoreDefinitions in the indexer for a given namespace.
func (s coreDefinitionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CoreDefinition, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CoreDefinition))
	})
	return ret, err
}

// Get retrieves the CoreDefinition from the indexer for a given namespace and name.
func (s coreDefinitionNamespaceLister) Get(name string) (*v1alpha1.CoreDefinition, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("coredefinition"), name)
	}
	return obj.(*v1alpha1.CoreDefinition), nil
}
