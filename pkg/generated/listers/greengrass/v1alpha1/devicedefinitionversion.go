/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/greengrass/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DeviceDefinitionVersionLister helps list DeviceDefinitionVersions.
type DeviceDefinitionVersionLister interface {
	// List lists all DeviceDefinitionVersions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DeviceDefinitionVersion, err error)
	// DeviceDefinitionVersions returns an object that can list and get DeviceDefinitionVersions.
	DeviceDefinitionVersions(namespace string) DeviceDefinitionVersionNamespaceLister
	DeviceDefinitionVersionListerExpansion
}

// deviceDefinitionVersionLister implements the DeviceDefinitionVersionLister interface.
type deviceDefinitionVersionLister struct {
	indexer cache.Indexer
}

// NewDeviceDefinitionVersionLister returns a new DeviceDefinitionVersionLister.
func NewDeviceDefinitionVersionLister(indexer cache.Indexer) DeviceDefinitionVersionLister {
	return &deviceDefinitionVersionLister{indexer: indexer}
}

// List lists all DeviceDefinitionVersions in the indexer.
func (s *deviceDefinitionVersionLister) List(selector labels.Selector) (ret []*v1alpha1.DeviceDefinitionVersion, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeviceDefinitionVersion))
	})
	return ret, err
}

// DeviceDefinitionVersions returns an object that can list and get DeviceDefinitionVersions.
func (s *deviceDefinitionVersionLister) DeviceDefinitionVersions(namespace string) DeviceDefinitionVersionNamespaceLister {
	return deviceDefinitionVersionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DeviceDefinitionVersionNamespaceLister helps list and get DeviceDefinitionVersions.
type DeviceDefinitionVersionNamespaceLister interface {
	// List lists all DeviceDefinitionVersions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DeviceDefinitionVersion, err error)
	// Get retrieves the DeviceDefinitionVersion from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DeviceDefinitionVersion, error)
	DeviceDefinitionVersionNamespaceListerExpansion
}

// deviceDefinitionVersionNamespaceLister implements the DeviceDefinitionVersionNamespaceLister
// interface.
type deviceDefinitionVersionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DeviceDefinitionVersions in the indexer for a given namespace.
func (s deviceDefinitionVersionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DeviceDefinitionVersion, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeviceDefinitionVersion))
	})
	return ret, err
}

// Get retrieves the DeviceDefinitionVersion from the indexer for a given namespace and name.
func (s deviceDefinitionVersionNamespaceLister) Get(name string) (*v1alpha1.DeviceDefinitionVersion, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("devicedefinitionversion"), name)
	}
	return obj.(*v1alpha1.DeviceDefinitionVersion), nil
}
