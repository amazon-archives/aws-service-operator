/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/ssm/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MaintenanceWindowTargetLister helps list MaintenanceWindowTargets.
type MaintenanceWindowTargetLister interface {
	// List lists all MaintenanceWindowTargets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MaintenanceWindowTarget, err error)
	// MaintenanceWindowTargets returns an object that can list and get MaintenanceWindowTargets.
	MaintenanceWindowTargets(namespace string) MaintenanceWindowTargetNamespaceLister
	MaintenanceWindowTargetListerExpansion
}

// maintenanceWindowTargetLister implements the MaintenanceWindowTargetLister interface.
type maintenanceWindowTargetLister struct {
	indexer cache.Indexer
}

// NewMaintenanceWindowTargetLister returns a new MaintenanceWindowTargetLister.
func NewMaintenanceWindowTargetLister(indexer cache.Indexer) MaintenanceWindowTargetLister {
	return &maintenanceWindowTargetLister{indexer: indexer}
}

// List lists all MaintenanceWindowTargets in the indexer.
func (s *maintenanceWindowTargetLister) List(selector labels.Selector) (ret []*v1alpha1.MaintenanceWindowTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MaintenanceWindowTarget))
	})
	return ret, err
}

// MaintenanceWindowTargets returns an object that can list and get MaintenanceWindowTargets.
func (s *maintenanceWindowTargetLister) MaintenanceWindowTargets(namespace string) MaintenanceWindowTargetNamespaceLister {
	return maintenanceWindowTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MaintenanceWindowTargetNamespaceLister helps list and get MaintenanceWindowTargets.
type MaintenanceWindowTargetNamespaceLister interface {
	// List lists all MaintenanceWindowTargets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MaintenanceWindowTarget, err error)
	// Get retrieves the MaintenanceWindowTarget from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MaintenanceWindowTarget, error)
	MaintenanceWindowTargetNamespaceListerExpansion
}

// maintenanceWindowTargetNamespaceLister implements the MaintenanceWindowTargetNamespaceLister
// interface.
type maintenanceWindowTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MaintenanceWindowTargets in the indexer for a given namespace.
func (s maintenanceWindowTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MaintenanceWindowTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MaintenanceWindowTarget))
	})
	return ret, err
}

// Get retrieves the MaintenanceWindowTarget from the indexer for a given namespace and name.
func (s maintenanceWindowTargetNamespaceLister) Get(name string) (*v1alpha1.MaintenanceWindowTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("maintenancewindowtarget"), name)
	}
	return obj.(*v1alpha1.MaintenanceWindowTarget), nil
}
