/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/cognito/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IdentityPoolLister helps list IdentityPools.
type IdentityPoolLister interface {
	// List lists all IdentityPools in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.IdentityPool, err error)
	// IdentityPools returns an object that can list and get IdentityPools.
	IdentityPools(namespace string) IdentityPoolNamespaceLister
	IdentityPoolListerExpansion
}

// identityPoolLister implements the IdentityPoolLister interface.
type identityPoolLister struct {
	indexer cache.Indexer
}

// NewIdentityPoolLister returns a new IdentityPoolLister.
func NewIdentityPoolLister(indexer cache.Indexer) IdentityPoolLister {
	return &identityPoolLister{indexer: indexer}
}

// List lists all IdentityPools in the indexer.
func (s *identityPoolLister) List(selector labels.Selector) (ret []*v1alpha1.IdentityPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IdentityPool))
	})
	return ret, err
}

// IdentityPools returns an object that can list and get IdentityPools.
func (s *identityPoolLister) IdentityPools(namespace string) IdentityPoolNamespaceLister {
	return identityPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IdentityPoolNamespaceLister helps list and get IdentityPools.
type IdentityPoolNamespaceLister interface {
	// List lists all IdentityPools in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.IdentityPool, err error)
	// Get retrieves the IdentityPool from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.IdentityPool, error)
	IdentityPoolNamespaceListerExpansion
}

// identityPoolNamespaceLister implements the IdentityPoolNamespaceLister
// interface.
type identityPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IdentityPools in the indexer for a given namespace.
func (s identityPoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IdentityPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IdentityPool))
	})
	return ret, err
}

// Get retrieves the IdentityPool from the indexer for a given namespace and name.
func (s identityPoolNamespaceLister) Get(name string) (*v1alpha1.IdentityPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("identitypool"), name)
	}
	return obj.(*v1alpha1.IdentityPool), nil
}
