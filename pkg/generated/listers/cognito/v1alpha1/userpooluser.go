/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/cognito/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UserPoolUserLister helps list UserPoolUsers.
type UserPoolUserLister interface {
	// List lists all UserPoolUsers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.UserPoolUser, err error)
	// UserPoolUsers returns an object that can list and get UserPoolUsers.
	UserPoolUsers(namespace string) UserPoolUserNamespaceLister
	UserPoolUserListerExpansion
}

// userPoolUserLister implements the UserPoolUserLister interface.
type userPoolUserLister struct {
	indexer cache.Indexer
}

// NewUserPoolUserLister returns a new UserPoolUserLister.
func NewUserPoolUserLister(indexer cache.Indexer) UserPoolUserLister {
	return &userPoolUserLister{indexer: indexer}
}

// List lists all UserPoolUsers in the indexer.
func (s *userPoolUserLister) List(selector labels.Selector) (ret []*v1alpha1.UserPoolUser, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserPoolUser))
	})
	return ret, err
}

// UserPoolUsers returns an object that can list and get UserPoolUsers.
func (s *userPoolUserLister) UserPoolUsers(namespace string) UserPoolUserNamespaceLister {
	return userPoolUserNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UserPoolUserNamespaceLister helps list and get UserPoolUsers.
type UserPoolUserNamespaceLister interface {
	// List lists all UserPoolUsers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.UserPoolUser, err error)
	// Get retrieves the UserPoolUser from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.UserPoolUser, error)
	UserPoolUserNamespaceListerExpansion
}

// userPoolUserNamespaceLister implements the UserPoolUserNamespaceLister
// interface.
type userPoolUserNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UserPoolUsers in the indexer for a given namespace.
func (s userPoolUserNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UserPoolUser, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserPoolUser))
	})
	return ret, err
}

// Get retrieves the UserPoolUser from the indexer for a given namespace and name.
func (s userPoolUserNamespaceLister) Get(name string) (*v1alpha1.UserPoolUser, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("userpooluser"), name)
	}
	return obj.(*v1alpha1.UserPoolUser), nil
}
