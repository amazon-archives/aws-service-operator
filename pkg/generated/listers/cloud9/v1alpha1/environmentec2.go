/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/cloud9/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EnvironmentEC2Lister helps list EnvironmentEC2s.
type EnvironmentEC2Lister interface {
	// List lists all EnvironmentEC2s in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.EnvironmentEC2, err error)
	// EnvironmentEC2s returns an object that can list and get EnvironmentEC2s.
	EnvironmentEC2s(namespace string) EnvironmentEC2NamespaceLister
	EnvironmentEC2ListerExpansion
}

// environmentEC2Lister implements the EnvironmentEC2Lister interface.
type environmentEC2Lister struct {
	indexer cache.Indexer
}

// NewEnvironmentEC2Lister returns a new EnvironmentEC2Lister.
func NewEnvironmentEC2Lister(indexer cache.Indexer) EnvironmentEC2Lister {
	return &environmentEC2Lister{indexer: indexer}
}

// List lists all EnvironmentEC2s in the indexer.
func (s *environmentEC2Lister) List(selector labels.Selector) (ret []*v1alpha1.EnvironmentEC2, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EnvironmentEC2))
	})
	return ret, err
}

// EnvironmentEC2s returns an object that can list and get EnvironmentEC2s.
func (s *environmentEC2Lister) EnvironmentEC2s(namespace string) EnvironmentEC2NamespaceLister {
	return environmentEC2NamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EnvironmentEC2NamespaceLister helps list and get EnvironmentEC2s.
type EnvironmentEC2NamespaceLister interface {
	// List lists all EnvironmentEC2s in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.EnvironmentEC2, err error)
	// Get retrieves the EnvironmentEC2 from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.EnvironmentEC2, error)
	EnvironmentEC2NamespaceListerExpansion
}

// environmentEC2NamespaceLister implements the EnvironmentEC2NamespaceLister
// interface.
type environmentEC2NamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EnvironmentEC2s in the indexer for a given namespace.
func (s environmentEC2NamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EnvironmentEC2, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EnvironmentEC2))
	})
	return ret, err
}

// Get retrieves the EnvironmentEC2 from the indexer for a given namespace and name.
func (s environmentEC2NamespaceLister) Get(name string) (*v1alpha1.EnvironmentEC2, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("environmentec2"), name)
	}
	return obj.(*v1alpha1.EnvironmentEC2), nil
}
