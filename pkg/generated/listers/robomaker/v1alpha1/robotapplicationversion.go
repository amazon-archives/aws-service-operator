/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/robomaker/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RobotApplicationVersionLister helps list RobotApplicationVersions.
type RobotApplicationVersionLister interface {
	// List lists all RobotApplicationVersions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RobotApplicationVersion, err error)
	// RobotApplicationVersions returns an object that can list and get RobotApplicationVersions.
	RobotApplicationVersions(namespace string) RobotApplicationVersionNamespaceLister
	RobotApplicationVersionListerExpansion
}

// robotApplicationVersionLister implements the RobotApplicationVersionLister interface.
type robotApplicationVersionLister struct {
	indexer cache.Indexer
}

// NewRobotApplicationVersionLister returns a new RobotApplicationVersionLister.
func NewRobotApplicationVersionLister(indexer cache.Indexer) RobotApplicationVersionLister {
	return &robotApplicationVersionLister{indexer: indexer}
}

// List lists all RobotApplicationVersions in the indexer.
func (s *robotApplicationVersionLister) List(selector labels.Selector) (ret []*v1alpha1.RobotApplicationVersion, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RobotApplicationVersion))
	})
	return ret, err
}

// RobotApplicationVersions returns an object that can list and get RobotApplicationVersions.
func (s *robotApplicationVersionLister) RobotApplicationVersions(namespace string) RobotApplicationVersionNamespaceLister {
	return robotApplicationVersionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RobotApplicationVersionNamespaceLister helps list and get RobotApplicationVersions.
type RobotApplicationVersionNamespaceLister interface {
	// List lists all RobotApplicationVersions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RobotApplicationVersion, err error)
	// Get retrieves the RobotApplicationVersion from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RobotApplicationVersion, error)
	RobotApplicationVersionNamespaceListerExpansion
}

// robotApplicationVersionNamespaceLister implements the RobotApplicationVersionNamespaceLister
// interface.
type robotApplicationVersionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RobotApplicationVersions in the indexer for a given namespace.
func (s robotApplicationVersionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RobotApplicationVersion, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RobotApplicationVersion))
	})
	return ret, err
}

// Get retrieves the RobotApplicationVersion from the indexer for a given namespace and name.
func (s robotApplicationVersionNamespaceLister) Get(name string) (*v1alpha1.RobotApplicationVersion, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("robotapplicationversion"), name)
	}
	return obj.(*v1alpha1.RobotApplicationVersion), nil
}
