/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/robomaker/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SimulationApplicationLister helps list SimulationApplications.
type SimulationApplicationLister interface {
	// List lists all SimulationApplications in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SimulationApplication, err error)
	// SimulationApplications returns an object that can list and get SimulationApplications.
	SimulationApplications(namespace string) SimulationApplicationNamespaceLister
	SimulationApplicationListerExpansion
}

// simulationApplicationLister implements the SimulationApplicationLister interface.
type simulationApplicationLister struct {
	indexer cache.Indexer
}

// NewSimulationApplicationLister returns a new SimulationApplicationLister.
func NewSimulationApplicationLister(indexer cache.Indexer) SimulationApplicationLister {
	return &simulationApplicationLister{indexer: indexer}
}

// List lists all SimulationApplications in the indexer.
func (s *simulationApplicationLister) List(selector labels.Selector) (ret []*v1alpha1.SimulationApplication, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SimulationApplication))
	})
	return ret, err
}

// SimulationApplications returns an object that can list and get SimulationApplications.
func (s *simulationApplicationLister) SimulationApplications(namespace string) SimulationApplicationNamespaceLister {
	return simulationApplicationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SimulationApplicationNamespaceLister helps list and get SimulationApplications.
type SimulationApplicationNamespaceLister interface {
	// List lists all SimulationApplications in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SimulationApplication, err error)
	// Get retrieves the SimulationApplication from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SimulationApplication, error)
	SimulationApplicationNamespaceListerExpansion
}

// simulationApplicationNamespaceLister implements the SimulationApplicationNamespaceLister
// interface.
type simulationApplicationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SimulationApplications in the indexer for a given namespace.
func (s simulationApplicationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SimulationApplication, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SimulationApplication))
	})
	return ret, err
}

// Get retrieves the SimulationApplication from the indexer for a given namespace and name.
func (s simulationApplicationNamespaceLister) Get(name string) (*v1alpha1.SimulationApplication, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("simulationapplication"), name)
	}
	return obj.(*v1alpha1.SimulationApplication), nil
}
