/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/mq/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigurationAssociationLister helps list ConfigurationAssociations.
type ConfigurationAssociationLister interface {
	// List lists all ConfigurationAssociations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationAssociation, err error)
	// ConfigurationAssociations returns an object that can list and get ConfigurationAssociations.
	ConfigurationAssociations(namespace string) ConfigurationAssociationNamespaceLister
	ConfigurationAssociationListerExpansion
}

// configurationAssociationLister implements the ConfigurationAssociationLister interface.
type configurationAssociationLister struct {
	indexer cache.Indexer
}

// NewConfigurationAssociationLister returns a new ConfigurationAssociationLister.
func NewConfigurationAssociationLister(indexer cache.Indexer) ConfigurationAssociationLister {
	return &configurationAssociationLister{indexer: indexer}
}

// List lists all ConfigurationAssociations in the indexer.
func (s *configurationAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationAssociation))
	})
	return ret, err
}

// ConfigurationAssociations returns an object that can list and get ConfigurationAssociations.
func (s *configurationAssociationLister) ConfigurationAssociations(namespace string) ConfigurationAssociationNamespaceLister {
	return configurationAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigurationAssociationNamespaceLister helps list and get ConfigurationAssociations.
type ConfigurationAssociationNamespaceLister interface {
	// List lists all ConfigurationAssociations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationAssociation, err error)
	// Get retrieves the ConfigurationAssociation from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ConfigurationAssociation, error)
	ConfigurationAssociationNamespaceListerExpansion
}

// configurationAssociationNamespaceLister implements the ConfigurationAssociationNamespaceLister
// interface.
type configurationAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigurationAssociations in the indexer for a given namespace.
func (s configurationAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationAssociation))
	})
	return ret, err
}

// Get retrieves the ConfigurationAssociation from the indexer for a given namespace and name.
func (s configurationAssociationNamespaceLister) Get(name string) (*v1alpha1.ConfigurationAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configurationassociation"), name)
	}
	return obj.(*v1alpha1.ConfigurationAssociation), nil
}
