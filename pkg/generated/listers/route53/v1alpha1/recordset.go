/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/route53/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RecordSetLister helps list RecordSets.
type RecordSetLister interface {
	// List lists all RecordSets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RecordSet, err error)
	// RecordSets returns an object that can list and get RecordSets.
	RecordSets(namespace string) RecordSetNamespaceLister
	RecordSetListerExpansion
}

// recordSetLister implements the RecordSetLister interface.
type recordSetLister struct {
	indexer cache.Indexer
}

// NewRecordSetLister returns a new RecordSetLister.
func NewRecordSetLister(indexer cache.Indexer) RecordSetLister {
	return &recordSetLister{indexer: indexer}
}

// List lists all RecordSets in the indexer.
func (s *recordSetLister) List(selector labels.Selector) (ret []*v1alpha1.RecordSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RecordSet))
	})
	return ret, err
}

// RecordSets returns an object that can list and get RecordSets.
func (s *recordSetLister) RecordSets(namespace string) RecordSetNamespaceLister {
	return recordSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RecordSetNamespaceLister helps list and get RecordSets.
type RecordSetNamespaceLister interface {
	// List lists all RecordSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RecordSet, err error)
	// Get retrieves the RecordSet from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RecordSet, error)
	RecordSetNamespaceListerExpansion
}

// recordSetNamespaceLister implements the RecordSetNamespaceLister
// interface.
type recordSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RecordSets in the indexer for a given namespace.
func (s recordSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RecordSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RecordSet))
	})
	return ret, err
}

// Get retrieves the RecordSet from the indexer for a given namespace and name.
func (s recordSetNamespaceLister) Get(name string) (*v1alpha1.RecordSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("recordset"), name)
	}
	return obj.(*v1alpha1.RecordSet), nil
}
