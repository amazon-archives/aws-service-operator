/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/pinpointemail/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IdentityLister helps list Identities.
type IdentityLister interface {
	// List lists all Identities in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Identity, err error)
	// Identities returns an object that can list and get Identities.
	Identities(namespace string) IdentityNamespaceLister
	IdentityListerExpansion
}

// identityLister implements the IdentityLister interface.
type identityLister struct {
	indexer cache.Indexer
}

// NewIdentityLister returns a new IdentityLister.
func NewIdentityLister(indexer cache.Indexer) IdentityLister {
	return &identityLister{indexer: indexer}
}

// List lists all Identities in the indexer.
func (s *identityLister) List(selector labels.Selector) (ret []*v1alpha1.Identity, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Identity))
	})
	return ret, err
}

// Identities returns an object that can list and get Identities.
func (s *identityLister) Identities(namespace string) IdentityNamespaceLister {
	return identityNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IdentityNamespaceLister helps list and get Identities.
type IdentityNamespaceLister interface {
	// List lists all Identities in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Identity, err error)
	// Get retrieves the Identity from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Identity, error)
	IdentityNamespaceListerExpansion
}

// identityNamespaceLister implements the IdentityNamespaceLister
// interface.
type identityNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Identities in the indexer for a given namespace.
func (s identityNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Identity, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Identity))
	})
	return ret, err
}

// Get retrieves the Identity from the indexer for a given namespace and name.
func (s identityNamespaceLister) Get(name string) (*v1alpha1.Identity, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("identity"), name)
	}
	return obj.(*v1alpha1.Identity), nil
}
