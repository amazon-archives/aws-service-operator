/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/pinpointemail/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DedicatedIpPoolLister helps list DedicatedIpPools.
type DedicatedIpPoolLister interface {
	// List lists all DedicatedIpPools in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DedicatedIpPool, err error)
	// DedicatedIpPools returns an object that can list and get DedicatedIpPools.
	DedicatedIpPools(namespace string) DedicatedIpPoolNamespaceLister
	DedicatedIpPoolListerExpansion
}

// dedicatedIpPoolLister implements the DedicatedIpPoolLister interface.
type dedicatedIpPoolLister struct {
	indexer cache.Indexer
}

// NewDedicatedIpPoolLister returns a new DedicatedIpPoolLister.
func NewDedicatedIpPoolLister(indexer cache.Indexer) DedicatedIpPoolLister {
	return &dedicatedIpPoolLister{indexer: indexer}
}

// List lists all DedicatedIpPools in the indexer.
func (s *dedicatedIpPoolLister) List(selector labels.Selector) (ret []*v1alpha1.DedicatedIpPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DedicatedIpPool))
	})
	return ret, err
}

// DedicatedIpPools returns an object that can list and get DedicatedIpPools.
func (s *dedicatedIpPoolLister) DedicatedIpPools(namespace string) DedicatedIpPoolNamespaceLister {
	return dedicatedIpPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DedicatedIpPoolNamespaceLister helps list and get DedicatedIpPools.
type DedicatedIpPoolNamespaceLister interface {
	// List lists all DedicatedIpPools in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DedicatedIpPool, err error)
	// Get retrieves the DedicatedIpPool from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DedicatedIpPool, error)
	DedicatedIpPoolNamespaceListerExpansion
}

// dedicatedIpPoolNamespaceLister implements the DedicatedIpPoolNamespaceLister
// interface.
type dedicatedIpPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DedicatedIpPools in the indexer for a given namespace.
func (s dedicatedIpPoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DedicatedIpPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DedicatedIpPool))
	})
	return ret, err
}

// Get retrieves the DedicatedIpPool from the indexer for a given namespace and name.
func (s dedicatedIpPoolNamespaceLister) Get(name string) (*v1alpha1.DedicatedIpPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dedicatedippool"), name)
	}
	return obj.(*v1alpha1.DedicatedIpPool), nil
}
