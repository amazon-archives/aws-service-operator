/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/elasticache/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CacheClusterLister helps list CacheClusters.
type CacheClusterLister interface {
	// List lists all CacheClusters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CacheCluster, err error)
	// CacheClusters returns an object that can list and get CacheClusters.
	CacheClusters(namespace string) CacheClusterNamespaceLister
	CacheClusterListerExpansion
}

// cacheClusterLister implements the CacheClusterLister interface.
type cacheClusterLister struct {
	indexer cache.Indexer
}

// NewCacheClusterLister returns a new CacheClusterLister.
func NewCacheClusterLister(indexer cache.Indexer) CacheClusterLister {
	return &cacheClusterLister{indexer: indexer}
}

// List lists all CacheClusters in the indexer.
func (s *cacheClusterLister) List(selector labels.Selector) (ret []*v1alpha1.CacheCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CacheCluster))
	})
	return ret, err
}

// CacheClusters returns an object that can list and get CacheClusters.
func (s *cacheClusterLister) CacheClusters(namespace string) CacheClusterNamespaceLister {
	return cacheClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CacheClusterNamespaceLister helps list and get CacheClusters.
type CacheClusterNamespaceLister interface {
	// List lists all CacheClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CacheCluster, err error)
	// Get retrieves the CacheCluster from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CacheCluster, error)
	CacheClusterNamespaceListerExpansion
}

// cacheClusterNamespaceLister implements the CacheClusterNamespaceLister
// interface.
type cacheClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CacheClusters in the indexer for a given namespace.
func (s cacheClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CacheCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CacheCluster))
	})
	return ret, err
}

// Get retrieves the CacheCluster from the indexer for a given namespace and name.
func (s cacheClusterNamespaceLister) Get(name string) (*v1alpha1.CacheCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cachecluster"), name)
	}
	return obj.(*v1alpha1.CacheCluster), nil
}
