/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/elasticache/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ReplicationGroupLister helps list ReplicationGroups.
type ReplicationGroupLister interface {
	// List lists all ReplicationGroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ReplicationGroup, err error)
	// ReplicationGroups returns an object that can list and get ReplicationGroups.
	ReplicationGroups(namespace string) ReplicationGroupNamespaceLister
	ReplicationGroupListerExpansion
}

// replicationGroupLister implements the ReplicationGroupLister interface.
type replicationGroupLister struct {
	indexer cache.Indexer
}

// NewReplicationGroupLister returns a new ReplicationGroupLister.
func NewReplicationGroupLister(indexer cache.Indexer) ReplicationGroupLister {
	return &replicationGroupLister{indexer: indexer}
}

// List lists all ReplicationGroups in the indexer.
func (s *replicationGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ReplicationGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReplicationGroup))
	})
	return ret, err
}

// ReplicationGroups returns an object that can list and get ReplicationGroups.
func (s *replicationGroupLister) ReplicationGroups(namespace string) ReplicationGroupNamespaceLister {
	return replicationGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ReplicationGroupNamespaceLister helps list and get ReplicationGroups.
type ReplicationGroupNamespaceLister interface {
	// List lists all ReplicationGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ReplicationGroup, err error)
	// Get retrieves the ReplicationGroup from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ReplicationGroup, error)
	ReplicationGroupNamespaceListerExpansion
}

// replicationGroupNamespaceLister implements the ReplicationGroupNamespaceLister
// interface.
type replicationGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ReplicationGroups in the indexer for a given namespace.
func (s replicationGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ReplicationGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReplicationGroup))
	})
	return ret, err
}

// Get retrieves the ReplicationGroup from the indexer for a given namespace and name.
func (s replicationGroupNamespaceLister) Get(name string) (*v1alpha1.ReplicationGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("replicationgroup"), name)
	}
	return obj.(*v1alpha1.ReplicationGroup), nil
}
