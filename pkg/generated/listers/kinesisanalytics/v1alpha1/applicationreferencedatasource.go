/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/kinesisanalytics/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApplicationReferenceDataSourceLister helps list ApplicationReferenceDataSources.
type ApplicationReferenceDataSourceLister interface {
	// List lists all ApplicationReferenceDataSources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationReferenceDataSource, err error)
	// ApplicationReferenceDataSources returns an object that can list and get ApplicationReferenceDataSources.
	ApplicationReferenceDataSources(namespace string) ApplicationReferenceDataSourceNamespaceLister
	ApplicationReferenceDataSourceListerExpansion
}

// applicationReferenceDataSourceLister implements the ApplicationReferenceDataSourceLister interface.
type applicationReferenceDataSourceLister struct {
	indexer cache.Indexer
}

// NewApplicationReferenceDataSourceLister returns a new ApplicationReferenceDataSourceLister.
func NewApplicationReferenceDataSourceLister(indexer cache.Indexer) ApplicationReferenceDataSourceLister {
	return &applicationReferenceDataSourceLister{indexer: indexer}
}

// List lists all ApplicationReferenceDataSources in the indexer.
func (s *applicationReferenceDataSourceLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationReferenceDataSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationReferenceDataSource))
	})
	return ret, err
}

// ApplicationReferenceDataSources returns an object that can list and get ApplicationReferenceDataSources.
func (s *applicationReferenceDataSourceLister) ApplicationReferenceDataSources(namespace string) ApplicationReferenceDataSourceNamespaceLister {
	return applicationReferenceDataSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApplicationReferenceDataSourceNamespaceLister helps list and get ApplicationReferenceDataSources.
type ApplicationReferenceDataSourceNamespaceLister interface {
	// List lists all ApplicationReferenceDataSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationReferenceDataSource, err error)
	// Get retrieves the ApplicationReferenceDataSource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ApplicationReferenceDataSource, error)
	ApplicationReferenceDataSourceNamespaceListerExpansion
}

// applicationReferenceDataSourceNamespaceLister implements the ApplicationReferenceDataSourceNamespaceLister
// interface.
type applicationReferenceDataSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApplicationReferenceDataSources in the indexer for a given namespace.
func (s applicationReferenceDataSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationReferenceDataSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationReferenceDataSource))
	})
	return ret, err
}

// Get retrieves the ApplicationReferenceDataSource from the indexer for a given namespace and name.
func (s applicationReferenceDataSourceNamespaceLister) Get(name string) (*v1alpha1.ApplicationReferenceDataSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("applicationreferencedatasource"), name)
	}
	return obj.(*v1alpha1.ApplicationReferenceDataSource), nil
}
