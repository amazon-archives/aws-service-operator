/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/elasticbeanstalk/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigurationTemplateLister helps list ConfigurationTemplates.
type ConfigurationTemplateLister interface {
	// List lists all ConfigurationTemplates in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationTemplate, err error)
	// ConfigurationTemplates returns an object that can list and get ConfigurationTemplates.
	ConfigurationTemplates(namespace string) ConfigurationTemplateNamespaceLister
	ConfigurationTemplateListerExpansion
}

// configurationTemplateLister implements the ConfigurationTemplateLister interface.
type configurationTemplateLister struct {
	indexer cache.Indexer
}

// NewConfigurationTemplateLister returns a new ConfigurationTemplateLister.
func NewConfigurationTemplateLister(indexer cache.Indexer) ConfigurationTemplateLister {
	return &configurationTemplateLister{indexer: indexer}
}

// List lists all ConfigurationTemplates in the indexer.
func (s *configurationTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationTemplate))
	})
	return ret, err
}

// ConfigurationTemplates returns an object that can list and get ConfigurationTemplates.
func (s *configurationTemplateLister) ConfigurationTemplates(namespace string) ConfigurationTemplateNamespaceLister {
	return configurationTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigurationTemplateNamespaceLister helps list and get ConfigurationTemplates.
type ConfigurationTemplateNamespaceLister interface {
	// List lists all ConfigurationTemplates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationTemplate, err error)
	// Get retrieves the ConfigurationTemplate from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ConfigurationTemplate, error)
	ConfigurationTemplateNamespaceListerExpansion
}

// configurationTemplateNamespaceLister implements the ConfigurationTemplateNamespaceLister
// interface.
type configurationTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigurationTemplates in the indexer for a given namespace.
func (s configurationTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationTemplate))
	})
	return ret, err
}

// Get retrieves the ConfigurationTemplate from the indexer for a given namespace and name.
func (s configurationTemplateNamespaceLister) Get(name string) (*v1alpha1.ConfigurationTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configurationtemplate"), name)
	}
	return obj.(*v1alpha1.ConfigurationTemplate), nil
}
