/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/guardduty/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DetectorLister helps list Detectors.
type DetectorLister interface {
	// List lists all Detectors in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Detector, err error)
	// Detectors returns an object that can list and get Detectors.
	Detectors(namespace string) DetectorNamespaceLister
	DetectorListerExpansion
}

// detectorLister implements the DetectorLister interface.
type detectorLister struct {
	indexer cache.Indexer
}

// NewDetectorLister returns a new DetectorLister.
func NewDetectorLister(indexer cache.Indexer) DetectorLister {
	return &detectorLister{indexer: indexer}
}

// List lists all Detectors in the indexer.
func (s *detectorLister) List(selector labels.Selector) (ret []*v1alpha1.Detector, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Detector))
	})
	return ret, err
}

// Detectors returns an object that can list and get Detectors.
func (s *detectorLister) Detectors(namespace string) DetectorNamespaceLister {
	return detectorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DetectorNamespaceLister helps list and get Detectors.
type DetectorNamespaceLister interface {
	// List lists all Detectors in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Detector, err error)
	// Get retrieves the Detector from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Detector, error)
	DetectorNamespaceListerExpansion
}

// detectorNamespaceLister implements the DetectorNamespaceLister
// interface.
type detectorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Detectors in the indexer for a given namespace.
func (s detectorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Detector, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Detector))
	})
	return ret, err
}

// Get retrieves the Detector from the indexer for a given namespace and name.
func (s detectorNamespaceLister) Get(name string) (*v1alpha1.Detector, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("detector"), name)
	}
	return obj.(*v1alpha1.Detector), nil
}
