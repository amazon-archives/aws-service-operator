/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/stepfunctions/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StateMachineLister helps list StateMachines.
type StateMachineLister interface {
	// List lists all StateMachines in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.StateMachine, err error)
	// StateMachines returns an object that can list and get StateMachines.
	StateMachines(namespace string) StateMachineNamespaceLister
	StateMachineListerExpansion
}

// stateMachineLister implements the StateMachineLister interface.
type stateMachineLister struct {
	indexer cache.Indexer
}

// NewStateMachineLister returns a new StateMachineLister.
func NewStateMachineLister(indexer cache.Indexer) StateMachineLister {
	return &stateMachineLister{indexer: indexer}
}

// List lists all StateMachines in the indexer.
func (s *stateMachineLister) List(selector labels.Selector) (ret []*v1alpha1.StateMachine, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StateMachine))
	})
	return ret, err
}

// StateMachines returns an object that can list and get StateMachines.
func (s *stateMachineLister) StateMachines(namespace string) StateMachineNamespaceLister {
	return stateMachineNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StateMachineNamespaceLister helps list and get StateMachines.
type StateMachineNamespaceLister interface {
	// List lists all StateMachines in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.StateMachine, err error)
	// Get retrieves the StateMachine from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.StateMachine, error)
	StateMachineNamespaceListerExpansion
}

// stateMachineNamespaceLister implements the StateMachineNamespaceLister
// interface.
type stateMachineNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StateMachines in the indexer for a given namespace.
func (s stateMachineNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StateMachine, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StateMachine))
	})
	return ret, err
}

// Get retrieves the StateMachine from the indexer for a given namespace and name.
func (s stateMachineNamespaceLister) Get(name string) (*v1alpha1.StateMachine, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("statemachine"), name)
	}
	return obj.(*v1alpha1.StateMachine), nil
}
