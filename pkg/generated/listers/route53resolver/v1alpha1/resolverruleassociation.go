/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/route53resolver/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResolverRuleAssociationLister helps list ResolverRuleAssociations.
type ResolverRuleAssociationLister interface {
	// List lists all ResolverRuleAssociations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ResolverRuleAssociation, err error)
	// ResolverRuleAssociations returns an object that can list and get ResolverRuleAssociations.
	ResolverRuleAssociations(namespace string) ResolverRuleAssociationNamespaceLister
	ResolverRuleAssociationListerExpansion
}

// resolverRuleAssociationLister implements the ResolverRuleAssociationLister interface.
type resolverRuleAssociationLister struct {
	indexer cache.Indexer
}

// NewResolverRuleAssociationLister returns a new ResolverRuleAssociationLister.
func NewResolverRuleAssociationLister(indexer cache.Indexer) ResolverRuleAssociationLister {
	return &resolverRuleAssociationLister{indexer: indexer}
}

// List lists all ResolverRuleAssociations in the indexer.
func (s *resolverRuleAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.ResolverRuleAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResolverRuleAssociation))
	})
	return ret, err
}

// ResolverRuleAssociations returns an object that can list and get ResolverRuleAssociations.
func (s *resolverRuleAssociationLister) ResolverRuleAssociations(namespace string) ResolverRuleAssociationNamespaceLister {
	return resolverRuleAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResolverRuleAssociationNamespaceLister helps list and get ResolverRuleAssociations.
type ResolverRuleAssociationNamespaceLister interface {
	// List lists all ResolverRuleAssociations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ResolverRuleAssociation, err error)
	// Get retrieves the ResolverRuleAssociation from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ResolverRuleAssociation, error)
	ResolverRuleAssociationNamespaceListerExpansion
}

// resolverRuleAssociationNamespaceLister implements the ResolverRuleAssociationNamespaceLister
// interface.
type resolverRuleAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResolverRuleAssociations in the indexer for a given namespace.
func (s resolverRuleAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ResolverRuleAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResolverRuleAssociation))
	})
	return ret, err
}

// Get retrieves the ResolverRuleAssociation from the indexer for a given namespace and name.
func (s resolverRuleAssociationNamespaceLister) Get(name string) (*v1alpha1.ResolverRuleAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("resolverruleassociation"), name)
	}
	return obj.(*v1alpha1.ResolverRuleAssociation), nil
}
