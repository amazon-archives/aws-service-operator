/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/dms/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ReplicationInstanceLister helps list ReplicationInstances.
type ReplicationInstanceLister interface {
	// List lists all ReplicationInstances in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ReplicationInstance, err error)
	// ReplicationInstances returns an object that can list and get ReplicationInstances.
	ReplicationInstances(namespace string) ReplicationInstanceNamespaceLister
	ReplicationInstanceListerExpansion
}

// replicationInstanceLister implements the ReplicationInstanceLister interface.
type replicationInstanceLister struct {
	indexer cache.Indexer
}

// NewReplicationInstanceLister returns a new ReplicationInstanceLister.
func NewReplicationInstanceLister(indexer cache.Indexer) ReplicationInstanceLister {
	return &replicationInstanceLister{indexer: indexer}
}

// List lists all ReplicationInstances in the indexer.
func (s *replicationInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.ReplicationInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReplicationInstance))
	})
	return ret, err
}

// ReplicationInstances returns an object that can list and get ReplicationInstances.
func (s *replicationInstanceLister) ReplicationInstances(namespace string) ReplicationInstanceNamespaceLister {
	return replicationInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ReplicationInstanceNamespaceLister helps list and get ReplicationInstances.
type ReplicationInstanceNamespaceLister interface {
	// List lists all ReplicationInstances in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ReplicationInstance, err error)
	// Get retrieves the ReplicationInstance from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ReplicationInstance, error)
	ReplicationInstanceNamespaceListerExpansion
}

// replicationInstanceNamespaceLister implements the ReplicationInstanceNamespaceLister
// interface.
type replicationInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ReplicationInstances in the indexer for a given namespace.
func (s replicationInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ReplicationInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReplicationInstance))
	})
	return ret, err
}

// Get retrieves the ReplicationInstance from the indexer for a given namespace and name.
func (s replicationInstanceNamespaceLister) Get(name string) (*v1alpha1.ReplicationInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("replicationinstance"), name)
	}
	return obj.(*v1alpha1.ReplicationInstance), nil
}
