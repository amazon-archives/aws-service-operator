/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/iot/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ThingPrincipalAttachmentLister helps list ThingPrincipalAttachments.
type ThingPrincipalAttachmentLister interface {
	// List lists all ThingPrincipalAttachments in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ThingPrincipalAttachment, err error)
	// ThingPrincipalAttachments returns an object that can list and get ThingPrincipalAttachments.
	ThingPrincipalAttachments(namespace string) ThingPrincipalAttachmentNamespaceLister
	ThingPrincipalAttachmentListerExpansion
}

// thingPrincipalAttachmentLister implements the ThingPrincipalAttachmentLister interface.
type thingPrincipalAttachmentLister struct {
	indexer cache.Indexer
}

// NewThingPrincipalAttachmentLister returns a new ThingPrincipalAttachmentLister.
func NewThingPrincipalAttachmentLister(indexer cache.Indexer) ThingPrincipalAttachmentLister {
	return &thingPrincipalAttachmentLister{indexer: indexer}
}

// List lists all ThingPrincipalAttachments in the indexer.
func (s *thingPrincipalAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.ThingPrincipalAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ThingPrincipalAttachment))
	})
	return ret, err
}

// ThingPrincipalAttachments returns an object that can list and get ThingPrincipalAttachments.
func (s *thingPrincipalAttachmentLister) ThingPrincipalAttachments(namespace string) ThingPrincipalAttachmentNamespaceLister {
	return thingPrincipalAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ThingPrincipalAttachmentNamespaceLister helps list and get ThingPrincipalAttachments.
type ThingPrincipalAttachmentNamespaceLister interface {
	// List lists all ThingPrincipalAttachments in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ThingPrincipalAttachment, err error)
	// Get retrieves the ThingPrincipalAttachment from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ThingPrincipalAttachment, error)
	ThingPrincipalAttachmentNamespaceListerExpansion
}

// thingPrincipalAttachmentNamespaceLister implements the ThingPrincipalAttachmentNamespaceLister
// interface.
type thingPrincipalAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ThingPrincipalAttachments in the indexer for a given namespace.
func (s thingPrincipalAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ThingPrincipalAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ThingPrincipalAttachment))
	})
	return ret, err
}

// Get retrieves the ThingPrincipalAttachment from the indexer for a given namespace and name.
func (s thingPrincipalAttachmentNamespaceLister) Get(name string) (*v1alpha1.ThingPrincipalAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("thingprincipalattachment"), name)
	}
	return obj.(*v1alpha1.ThingPrincipalAttachment), nil
}
