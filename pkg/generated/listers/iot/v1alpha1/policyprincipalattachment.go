/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/iot/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PolicyPrincipalAttachmentLister helps list PolicyPrincipalAttachments.
type PolicyPrincipalAttachmentLister interface {
	// List lists all PolicyPrincipalAttachments in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PolicyPrincipalAttachment, err error)
	// PolicyPrincipalAttachments returns an object that can list and get PolicyPrincipalAttachments.
	PolicyPrincipalAttachments(namespace string) PolicyPrincipalAttachmentNamespaceLister
	PolicyPrincipalAttachmentListerExpansion
}

// policyPrincipalAttachmentLister implements the PolicyPrincipalAttachmentLister interface.
type policyPrincipalAttachmentLister struct {
	indexer cache.Indexer
}

// NewPolicyPrincipalAttachmentLister returns a new PolicyPrincipalAttachmentLister.
func NewPolicyPrincipalAttachmentLister(indexer cache.Indexer) PolicyPrincipalAttachmentLister {
	return &policyPrincipalAttachmentLister{indexer: indexer}
}

// List lists all PolicyPrincipalAttachments in the indexer.
func (s *policyPrincipalAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.PolicyPrincipalAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolicyPrincipalAttachment))
	})
	return ret, err
}

// PolicyPrincipalAttachments returns an object that can list and get PolicyPrincipalAttachments.
func (s *policyPrincipalAttachmentLister) PolicyPrincipalAttachments(namespace string) PolicyPrincipalAttachmentNamespaceLister {
	return policyPrincipalAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PolicyPrincipalAttachmentNamespaceLister helps list and get PolicyPrincipalAttachments.
type PolicyPrincipalAttachmentNamespaceLister interface {
	// List lists all PolicyPrincipalAttachments in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PolicyPrincipalAttachment, err error)
	// Get retrieves the PolicyPrincipalAttachment from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PolicyPrincipalAttachment, error)
	PolicyPrincipalAttachmentNamespaceListerExpansion
}

// policyPrincipalAttachmentNamespaceLister implements the PolicyPrincipalAttachmentNamespaceLister
// interface.
type policyPrincipalAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PolicyPrincipalAttachments in the indexer for a given namespace.
func (s policyPrincipalAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PolicyPrincipalAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolicyPrincipalAttachment))
	})
	return ret, err
}

// Get retrieves the PolicyPrincipalAttachment from the indexer for a given namespace and name.
func (s policyPrincipalAttachmentNamespaceLister) Get(name string) (*v1alpha1.PolicyPrincipalAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("policyprincipalattachment"), name)
	}
	return obj.(*v1alpha1.PolicyPrincipalAttachment), nil
}
