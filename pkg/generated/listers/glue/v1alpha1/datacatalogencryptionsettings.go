/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/glue/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataCatalogEncryptionSettingsLister helps list DataCatalogEncryptionSettingses.
type DataCatalogEncryptionSettingsLister interface {
	// List lists all DataCatalogEncryptionSettingses in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DataCatalogEncryptionSettings, err error)
	// DataCatalogEncryptionSettingses returns an object that can list and get DataCatalogEncryptionSettingses.
	DataCatalogEncryptionSettingses(namespace string) DataCatalogEncryptionSettingsNamespaceLister
	DataCatalogEncryptionSettingsListerExpansion
}

// dataCatalogEncryptionSettingsLister implements the DataCatalogEncryptionSettingsLister interface.
type dataCatalogEncryptionSettingsLister struct {
	indexer cache.Indexer
}

// NewDataCatalogEncryptionSettingsLister returns a new DataCatalogEncryptionSettingsLister.
func NewDataCatalogEncryptionSettingsLister(indexer cache.Indexer) DataCatalogEncryptionSettingsLister {
	return &dataCatalogEncryptionSettingsLister{indexer: indexer}
}

// List lists all DataCatalogEncryptionSettingses in the indexer.
func (s *dataCatalogEncryptionSettingsLister) List(selector labels.Selector) (ret []*v1alpha1.DataCatalogEncryptionSettings, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataCatalogEncryptionSettings))
	})
	return ret, err
}

// DataCatalogEncryptionSettingses returns an object that can list and get DataCatalogEncryptionSettingses.
func (s *dataCatalogEncryptionSettingsLister) DataCatalogEncryptionSettingses(namespace string) DataCatalogEncryptionSettingsNamespaceLister {
	return dataCatalogEncryptionSettingsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataCatalogEncryptionSettingsNamespaceLister helps list and get DataCatalogEncryptionSettingses.
type DataCatalogEncryptionSettingsNamespaceLister interface {
	// List lists all DataCatalogEncryptionSettingses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DataCatalogEncryptionSettings, err error)
	// Get retrieves the DataCatalogEncryptionSettings from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DataCatalogEncryptionSettings, error)
	DataCatalogEncryptionSettingsNamespaceListerExpansion
}

// dataCatalogEncryptionSettingsNamespaceLister implements the DataCatalogEncryptionSettingsNamespaceLister
// interface.
type dataCatalogEncryptionSettingsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataCatalogEncryptionSettingses in the indexer for a given namespace.
func (s dataCatalogEncryptionSettingsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataCatalogEncryptionSettings, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataCatalogEncryptionSettings))
	})
	return ret, err
}

// Get retrieves the DataCatalogEncryptionSettings from the indexer for a given namespace and name.
func (s dataCatalogEncryptionSettingsNamespaceLister) Get(name string) (*v1alpha1.DataCatalogEncryptionSettings, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datacatalogencryptionsettings"), name)
	}
	return obj.(*v1alpha1.DataCatalogEncryptionSettings), nil
}
