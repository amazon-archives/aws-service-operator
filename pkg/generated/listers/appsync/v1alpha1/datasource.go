/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/appsync/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataSourceLister helps list DataSources.
type DataSourceLister interface {
	// List lists all DataSources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DataSource, err error)
	// DataSources returns an object that can list and get DataSources.
	DataSources(namespace string) DataSourceNamespaceLister
	DataSourceListerExpansion
}

// dataSourceLister implements the DataSourceLister interface.
type dataSourceLister struct {
	indexer cache.Indexer
}

// NewDataSourceLister returns a new DataSourceLister.
func NewDataSourceLister(indexer cache.Indexer) DataSourceLister {
	return &dataSourceLister{indexer: indexer}
}

// List lists all DataSources in the indexer.
func (s *dataSourceLister) List(selector labels.Selector) (ret []*v1alpha1.DataSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataSource))
	})
	return ret, err
}

// DataSources returns an object that can list and get DataSources.
func (s *dataSourceLister) DataSources(namespace string) DataSourceNamespaceLister {
	return dataSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataSourceNamespaceLister helps list and get DataSources.
type DataSourceNamespaceLister interface {
	// List lists all DataSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DataSource, err error)
	// Get retrieves the DataSource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DataSource, error)
	DataSourceNamespaceListerExpansion
}

// dataSourceNamespaceLister implements the DataSourceNamespaceLister
// interface.
type dataSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataSources in the indexer for a given namespace.
func (s dataSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataSource))
	})
	return ret, err
}

// Get retrieves the DataSource from the indexer for a given namespace and name.
func (s dataSourceNamespaceLister) Get(name string) (*v1alpha1.DataSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datasource"), name)
	}
	return obj.(*v1alpha1.DataSource), nil
}
