/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/appsync/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FunctionConfigurationLister helps list FunctionConfigurations.
type FunctionConfigurationLister interface {
	// List lists all FunctionConfigurations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.FunctionConfiguration, err error)
	// FunctionConfigurations returns an object that can list and get FunctionConfigurations.
	FunctionConfigurations(namespace string) FunctionConfigurationNamespaceLister
	FunctionConfigurationListerExpansion
}

// functionConfigurationLister implements the FunctionConfigurationLister interface.
type functionConfigurationLister struct {
	indexer cache.Indexer
}

// NewFunctionConfigurationLister returns a new FunctionConfigurationLister.
func NewFunctionConfigurationLister(indexer cache.Indexer) FunctionConfigurationLister {
	return &functionConfigurationLister{indexer: indexer}
}

// List lists all FunctionConfigurations in the indexer.
func (s *functionConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.FunctionConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FunctionConfiguration))
	})
	return ret, err
}

// FunctionConfigurations returns an object that can list and get FunctionConfigurations.
func (s *functionConfigurationLister) FunctionConfigurations(namespace string) FunctionConfigurationNamespaceLister {
	return functionConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FunctionConfigurationNamespaceLister helps list and get FunctionConfigurations.
type FunctionConfigurationNamespaceLister interface {
	// List lists all FunctionConfigurations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.FunctionConfiguration, err error)
	// Get retrieves the FunctionConfiguration from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.FunctionConfiguration, error)
	FunctionConfigurationNamespaceListerExpansion
}

// functionConfigurationNamespaceLister implements the FunctionConfigurationNamespaceLister
// interface.
type functionConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FunctionConfigurations in the indexer for a given namespace.
func (s functionConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FunctionConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FunctionConfiguration))
	})
	return ret, err
}

// Get retrieves the FunctionConfiguration from the indexer for a given namespace and name.
func (s functionConfigurationNamespaceLister) Get(name string) (*v1alpha1.FunctionConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("functionconfiguration"), name)
	}
	return obj.(*v1alpha1.FunctionConfiguration), nil
}
