/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/appsync/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApiKeyLister helps list ApiKeys.
type ApiKeyLister interface {
	// List lists all ApiKeys in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ApiKey, err error)
	// ApiKeys returns an object that can list and get ApiKeys.
	ApiKeys(namespace string) ApiKeyNamespaceLister
	ApiKeyListerExpansion
}

// apiKeyLister implements the ApiKeyLister interface.
type apiKeyLister struct {
	indexer cache.Indexer
}

// NewApiKeyLister returns a new ApiKeyLister.
func NewApiKeyLister(indexer cache.Indexer) ApiKeyLister {
	return &apiKeyLister{indexer: indexer}
}

// List lists all ApiKeys in the indexer.
func (s *apiKeyLister) List(selector labels.Selector) (ret []*v1alpha1.ApiKey, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiKey))
	})
	return ret, err
}

// ApiKeys returns an object that can list and get ApiKeys.
func (s *apiKeyLister) ApiKeys(namespace string) ApiKeyNamespaceLister {
	return apiKeyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiKeyNamespaceLister helps list and get ApiKeys.
type ApiKeyNamespaceLister interface {
	// List lists all ApiKeys in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ApiKey, err error)
	// Get retrieves the ApiKey from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ApiKey, error)
	ApiKeyNamespaceListerExpansion
}

// apiKeyNamespaceLister implements the ApiKeyNamespaceLister
// interface.
type apiKeyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApiKeys in the indexer for a given namespace.
func (s apiKeyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApiKey, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiKey))
	})
	return ret, err
}

// Get retrieves the ApiKey from the indexer for a given namespace and name.
func (s apiKeyNamespaceLister) Get(name string) (*v1alpha1.ApiKey, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apikey"), name)
	}
	return obj.(*v1alpha1.ApiKey), nil
}
