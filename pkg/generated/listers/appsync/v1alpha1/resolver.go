/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/appsync/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResolverLister helps list Resolvers.
type ResolverLister interface {
	// List lists all Resolvers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Resolver, err error)
	// Resolvers returns an object that can list and get Resolvers.
	Resolvers(namespace string) ResolverNamespaceLister
	ResolverListerExpansion
}

// resolverLister implements the ResolverLister interface.
type resolverLister struct {
	indexer cache.Indexer
}

// NewResolverLister returns a new ResolverLister.
func NewResolverLister(indexer cache.Indexer) ResolverLister {
	return &resolverLister{indexer: indexer}
}

// List lists all Resolvers in the indexer.
func (s *resolverLister) List(selector labels.Selector) (ret []*v1alpha1.Resolver, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Resolver))
	})
	return ret, err
}

// Resolvers returns an object that can list and get Resolvers.
func (s *resolverLister) Resolvers(namespace string) ResolverNamespaceLister {
	return resolverNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResolverNamespaceLister helps list and get Resolvers.
type ResolverNamespaceLister interface {
	// List lists all Resolvers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Resolver, err error)
	// Get retrieves the Resolver from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Resolver, error)
	ResolverNamespaceListerExpansion
}

// resolverNamespaceLister implements the ResolverNamespaceLister
// interface.
type resolverNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Resolvers in the indexer for a given namespace.
func (s resolverNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Resolver, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Resolver))
	})
	return ret, err
}

// Get retrieves the Resolver from the indexer for a given namespace and name.
func (s resolverNamespaceLister) Get(name string) (*v1alpha1.Resolver, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("resolver"), name)
	}
	return obj.(*v1alpha1.Resolver), nil
}
