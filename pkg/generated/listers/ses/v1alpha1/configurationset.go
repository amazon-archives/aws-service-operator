/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/ses/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigurationSetLister helps list ConfigurationSets.
type ConfigurationSetLister interface {
	// List lists all ConfigurationSets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationSet, err error)
	// ConfigurationSets returns an object that can list and get ConfigurationSets.
	ConfigurationSets(namespace string) ConfigurationSetNamespaceLister
	ConfigurationSetListerExpansion
}

// configurationSetLister implements the ConfigurationSetLister interface.
type configurationSetLister struct {
	indexer cache.Indexer
}

// NewConfigurationSetLister returns a new ConfigurationSetLister.
func NewConfigurationSetLister(indexer cache.Indexer) ConfigurationSetLister {
	return &configurationSetLister{indexer: indexer}
}

// List lists all ConfigurationSets in the indexer.
func (s *configurationSetLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationSet))
	})
	return ret, err
}

// ConfigurationSets returns an object that can list and get ConfigurationSets.
func (s *configurationSetLister) ConfigurationSets(namespace string) ConfigurationSetNamespaceLister {
	return configurationSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigurationSetNamespaceLister helps list and get ConfigurationSets.
type ConfigurationSetNamespaceLister interface {
	// List lists all ConfigurationSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationSet, err error)
	// Get retrieves the ConfigurationSet from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ConfigurationSet, error)
	ConfigurationSetNamespaceListerExpansion
}

// configurationSetNamespaceLister implements the ConfigurationSetNamespaceLister
// interface.
type configurationSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigurationSets in the indexer for a given namespace.
func (s configurationSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationSet))
	})
	return ret, err
}

// Get retrieves the ConfigurationSet from the indexer for a given namespace and name.
func (s configurationSetNamespaceLister) Get(name string) (*v1alpha1.ConfigurationSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configurationset"), name)
	}
	return obj.(*v1alpha1.ConfigurationSet), nil
}
