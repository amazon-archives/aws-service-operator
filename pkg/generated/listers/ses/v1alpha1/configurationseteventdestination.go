/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/ses/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigurationSetEventDestinationLister helps list ConfigurationSetEventDestinations.
type ConfigurationSetEventDestinationLister interface {
	// List lists all ConfigurationSetEventDestinations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationSetEventDestination, err error)
	// ConfigurationSetEventDestinations returns an object that can list and get ConfigurationSetEventDestinations.
	ConfigurationSetEventDestinations(namespace string) ConfigurationSetEventDestinationNamespaceLister
	ConfigurationSetEventDestinationListerExpansion
}

// configurationSetEventDestinationLister implements the ConfigurationSetEventDestinationLister interface.
type configurationSetEventDestinationLister struct {
	indexer cache.Indexer
}

// NewConfigurationSetEventDestinationLister returns a new ConfigurationSetEventDestinationLister.
func NewConfigurationSetEventDestinationLister(indexer cache.Indexer) ConfigurationSetEventDestinationLister {
	return &configurationSetEventDestinationLister{indexer: indexer}
}

// List lists all ConfigurationSetEventDestinations in the indexer.
func (s *configurationSetEventDestinationLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationSetEventDestination, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationSetEventDestination))
	})
	return ret, err
}

// ConfigurationSetEventDestinations returns an object that can list and get ConfigurationSetEventDestinations.
func (s *configurationSetEventDestinationLister) ConfigurationSetEventDestinations(namespace string) ConfigurationSetEventDestinationNamespaceLister {
	return configurationSetEventDestinationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigurationSetEventDestinationNamespaceLister helps list and get ConfigurationSetEventDestinations.
type ConfigurationSetEventDestinationNamespaceLister interface {
	// List lists all ConfigurationSetEventDestinations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationSetEventDestination, err error)
	// Get retrieves the ConfigurationSetEventDestination from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ConfigurationSetEventDestination, error)
	ConfigurationSetEventDestinationNamespaceListerExpansion
}

// configurationSetEventDestinationNamespaceLister implements the ConfigurationSetEventDestinationNamespaceLister
// interface.
type configurationSetEventDestinationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigurationSetEventDestinations in the indexer for a given namespace.
func (s configurationSetEventDestinationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationSetEventDestination, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationSetEventDestination))
	})
	return ret, err
}

// Get retrieves the ConfigurationSetEventDestination from the indexer for a given namespace and name.
func (s configurationSetEventDestinationNamespaceLister) Get(name string) (*v1alpha1.ConfigurationSetEventDestination, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configurationseteventdestination"), name)
	}
	return obj.(*v1alpha1.ConfigurationSetEventDestination), nil
}
