/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/sqs/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// QueuePolicyLister helps list QueuePolicies.
type QueuePolicyLister interface {
	// List lists all QueuePolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.QueuePolicy, err error)
	// QueuePolicies returns an object that can list and get QueuePolicies.
	QueuePolicies(namespace string) QueuePolicyNamespaceLister
	QueuePolicyListerExpansion
}

// queuePolicyLister implements the QueuePolicyLister interface.
type queuePolicyLister struct {
	indexer cache.Indexer
}

// NewQueuePolicyLister returns a new QueuePolicyLister.
func NewQueuePolicyLister(indexer cache.Indexer) QueuePolicyLister {
	return &queuePolicyLister{indexer: indexer}
}

// List lists all QueuePolicies in the indexer.
func (s *queuePolicyLister) List(selector labels.Selector) (ret []*v1alpha1.QueuePolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.QueuePolicy))
	})
	return ret, err
}

// QueuePolicies returns an object that can list and get QueuePolicies.
func (s *queuePolicyLister) QueuePolicies(namespace string) QueuePolicyNamespaceLister {
	return queuePolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// QueuePolicyNamespaceLister helps list and get QueuePolicies.
type QueuePolicyNamespaceLister interface {
	// List lists all QueuePolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.QueuePolicy, err error)
	// Get retrieves the QueuePolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.QueuePolicy, error)
	QueuePolicyNamespaceListerExpansion
}

// queuePolicyNamespaceLister implements the QueuePolicyNamespaceLister
// interface.
type queuePolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all QueuePolicies in the indexer for a given namespace.
func (s queuePolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.QueuePolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.QueuePolicy))
	})
	return ret, err
}

// Get retrieves the QueuePolicy from the indexer for a given namespace and name.
func (s queuePolicyNamespaceLister) Get(name string) (*v1alpha1.QueuePolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("queuepolicy"), name)
	}
	return obj.(*v1alpha1.QueuePolicy), nil
}
