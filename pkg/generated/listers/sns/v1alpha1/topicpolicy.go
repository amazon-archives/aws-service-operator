/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/sns/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TopicPolicyLister helps list TopicPolicies.
type TopicPolicyLister interface {
	// List lists all TopicPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.TopicPolicy, err error)
	// TopicPolicies returns an object that can list and get TopicPolicies.
	TopicPolicies(namespace string) TopicPolicyNamespaceLister
	TopicPolicyListerExpansion
}

// topicPolicyLister implements the TopicPolicyLister interface.
type topicPolicyLister struct {
	indexer cache.Indexer
}

// NewTopicPolicyLister returns a new TopicPolicyLister.
func NewTopicPolicyLister(indexer cache.Indexer) TopicPolicyLister {
	return &topicPolicyLister{indexer: indexer}
}

// List lists all TopicPolicies in the indexer.
func (s *topicPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.TopicPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TopicPolicy))
	})
	return ret, err
}

// TopicPolicies returns an object that can list and get TopicPolicies.
func (s *topicPolicyLister) TopicPolicies(namespace string) TopicPolicyNamespaceLister {
	return topicPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TopicPolicyNamespaceLister helps list and get TopicPolicies.
type TopicPolicyNamespaceLister interface {
	// List lists all TopicPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.TopicPolicy, err error)
	// Get retrieves the TopicPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.TopicPolicy, error)
	TopicPolicyNamespaceListerExpansion
}

// topicPolicyNamespaceLister implements the TopicPolicyNamespaceLister
// interface.
type topicPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TopicPolicies in the indexer for a given namespace.
func (s topicPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TopicPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TopicPolicy))
	})
	return ret, err
}

// Get retrieves the TopicPolicy from the indexer for a given namespace and name.
func (s topicPolicyNamespaceLister) Get(name string) (*v1alpha1.TopicPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("topicpolicy"), name)
	}
	return obj.(*v1alpha1.TopicPolicy), nil
}
