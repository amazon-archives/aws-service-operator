/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by informer-gen. DO NOT EDIT.

package externalversions

import (
	"fmt"

	v1alpha1 "awsoperator.io/pkg/apis/apigateway/v1alpha1"
	apigatewayv2v1alpha1 "awsoperator.io/pkg/apis/apigatewayv2/v1alpha1"
	applicationautoscalingv1alpha1 "awsoperator.io/pkg/apis/applicationautoscaling/v1alpha1"
	appmeshv1alpha1 "awsoperator.io/pkg/apis/appmesh/v1alpha1"
	appstreamv1alpha1 "awsoperator.io/pkg/apis/appstream/v1alpha1"
	appsyncv1alpha1 "awsoperator.io/pkg/apis/appsync/v1alpha1"
	askv1alpha1 "awsoperator.io/pkg/apis/ask/v1alpha1"
	athenav1alpha1 "awsoperator.io/pkg/apis/athena/v1alpha1"
	autoscalingv1alpha1 "awsoperator.io/pkg/apis/autoscaling/v1alpha1"
	autoscalingplansv1alpha1 "awsoperator.io/pkg/apis/autoscalingplans/v1alpha1"
	batchv1alpha1 "awsoperator.io/pkg/apis/batch/v1alpha1"
	budgetsv1alpha1 "awsoperator.io/pkg/apis/budgets/v1alpha1"
	cdkv1alpha1 "awsoperator.io/pkg/apis/cdk/v1alpha1"
	certificatemanagerv1alpha1 "awsoperator.io/pkg/apis/certificatemanager/v1alpha1"
	cloud9v1alpha1 "awsoperator.io/pkg/apis/cloud9/v1alpha1"
	cloudformationv1alpha1 "awsoperator.io/pkg/apis/cloudformation/v1alpha1"
	cloudfrontv1alpha1 "awsoperator.io/pkg/apis/cloudfront/v1alpha1"
	cloudtrailv1alpha1 "awsoperator.io/pkg/apis/cloudtrail/v1alpha1"
	cloudwatchv1alpha1 "awsoperator.io/pkg/apis/cloudwatch/v1alpha1"
	codebuildv1alpha1 "awsoperator.io/pkg/apis/codebuild/v1alpha1"
	codecommitv1alpha1 "awsoperator.io/pkg/apis/codecommit/v1alpha1"
	codedeployv1alpha1 "awsoperator.io/pkg/apis/codedeploy/v1alpha1"
	codepipelinev1alpha1 "awsoperator.io/pkg/apis/codepipeline/v1alpha1"
	cognitov1alpha1 "awsoperator.io/pkg/apis/cognito/v1alpha1"
	configv1alpha1 "awsoperator.io/pkg/apis/config/v1alpha1"
	datapipelinev1alpha1 "awsoperator.io/pkg/apis/datapipeline/v1alpha1"
	daxv1alpha1 "awsoperator.io/pkg/apis/dax/v1alpha1"
	directoryservicev1alpha1 "awsoperator.io/pkg/apis/directoryservice/v1alpha1"
	dlmv1alpha1 "awsoperator.io/pkg/apis/dlm/v1alpha1"
	dmsv1alpha1 "awsoperator.io/pkg/apis/dms/v1alpha1"
	docdbv1alpha1 "awsoperator.io/pkg/apis/docdb/v1alpha1"
	dynamodbv1alpha1 "awsoperator.io/pkg/apis/dynamodb/v1alpha1"
	ec2v1alpha1 "awsoperator.io/pkg/apis/ec2/v1alpha1"
	ecrv1alpha1 "awsoperator.io/pkg/apis/ecr/v1alpha1"
	ecsv1alpha1 "awsoperator.io/pkg/apis/ecs/v1alpha1"
	efsv1alpha1 "awsoperator.io/pkg/apis/efs/v1alpha1"
	eksv1alpha1 "awsoperator.io/pkg/apis/eks/v1alpha1"
	elasticachev1alpha1 "awsoperator.io/pkg/apis/elasticache/v1alpha1"
	elasticbeanstalkv1alpha1 "awsoperator.io/pkg/apis/elasticbeanstalk/v1alpha1"
	elasticloadbalancingv1alpha1 "awsoperator.io/pkg/apis/elasticloadbalancing/v1alpha1"
	elasticloadbalancingv2v1alpha1 "awsoperator.io/pkg/apis/elasticloadbalancingv2/v1alpha1"
	elasticsearchv1alpha1 "awsoperator.io/pkg/apis/elasticsearch/v1alpha1"
	emrv1alpha1 "awsoperator.io/pkg/apis/emr/v1alpha1"
	eventsv1alpha1 "awsoperator.io/pkg/apis/events/v1alpha1"
	fsxv1alpha1 "awsoperator.io/pkg/apis/fsx/v1alpha1"
	gameliftv1alpha1 "awsoperator.io/pkg/apis/gamelift/v1alpha1"
	gluev1alpha1 "awsoperator.io/pkg/apis/glue/v1alpha1"
	greengrassv1alpha1 "awsoperator.io/pkg/apis/greengrass/v1alpha1"
	guarddutyv1alpha1 "awsoperator.io/pkg/apis/guardduty/v1alpha1"
	iamv1alpha1 "awsoperator.io/pkg/apis/iam/v1alpha1"
	inspectorv1alpha1 "awsoperator.io/pkg/apis/inspector/v1alpha1"
	iotv1alpha1 "awsoperator.io/pkg/apis/iot/v1alpha1"
	iot1clickv1alpha1 "awsoperator.io/pkg/apis/iot1click/v1alpha1"
	iotanalyticsv1alpha1 "awsoperator.io/pkg/apis/iotanalytics/v1alpha1"
	kinesisv1alpha1 "awsoperator.io/pkg/apis/kinesis/v1alpha1"
	kinesisanalyticsv1alpha1 "awsoperator.io/pkg/apis/kinesisanalytics/v1alpha1"
	kinesisanalyticsv2v1alpha1 "awsoperator.io/pkg/apis/kinesisanalyticsv2/v1alpha1"
	kinesisfirehosev1alpha1 "awsoperator.io/pkg/apis/kinesisfirehose/v1alpha1"
	kmsv1alpha1 "awsoperator.io/pkg/apis/kms/v1alpha1"
	lambdav1alpha1 "awsoperator.io/pkg/apis/lambda/v1alpha1"
	logsv1alpha1 "awsoperator.io/pkg/apis/logs/v1alpha1"
	mediastorev1alpha1 "awsoperator.io/pkg/apis/mediastore/v1alpha1"
	mqv1alpha1 "awsoperator.io/pkg/apis/mq/v1alpha1"
	neptunev1alpha1 "awsoperator.io/pkg/apis/neptune/v1alpha1"
	opsworksv1alpha1 "awsoperator.io/pkg/apis/opsworks/v1alpha1"
	opsworkscmv1alpha1 "awsoperator.io/pkg/apis/opsworkscm/v1alpha1"
	pinpointemailv1alpha1 "awsoperator.io/pkg/apis/pinpointemail/v1alpha1"
	ramv1alpha1 "awsoperator.io/pkg/apis/ram/v1alpha1"
	rdsv1alpha1 "awsoperator.io/pkg/apis/rds/v1alpha1"
	redshiftv1alpha1 "awsoperator.io/pkg/apis/redshift/v1alpha1"
	robomakerv1alpha1 "awsoperator.io/pkg/apis/robomaker/v1alpha1"
	route53v1alpha1 "awsoperator.io/pkg/apis/route53/v1alpha1"
	route53resolverv1alpha1 "awsoperator.io/pkg/apis/route53resolver/v1alpha1"
	s3v1alpha1 "awsoperator.io/pkg/apis/s3/v1alpha1"
	sagemakerv1alpha1 "awsoperator.io/pkg/apis/sagemaker/v1alpha1"
	sdbv1alpha1 "awsoperator.io/pkg/apis/sdb/v1alpha1"
	secretsmanagerv1alpha1 "awsoperator.io/pkg/apis/secretsmanager/v1alpha1"
	servicecatalogv1alpha1 "awsoperator.io/pkg/apis/servicecatalog/v1alpha1"
	servicediscoveryv1alpha1 "awsoperator.io/pkg/apis/servicediscovery/v1alpha1"
	sesv1alpha1 "awsoperator.io/pkg/apis/ses/v1alpha1"
	snsv1alpha1 "awsoperator.io/pkg/apis/sns/v1alpha1"
	sqsv1alpha1 "awsoperator.io/pkg/apis/sqs/v1alpha1"
	ssmv1alpha1 "awsoperator.io/pkg/apis/ssm/v1alpha1"
	stepfunctionsv1alpha1 "awsoperator.io/pkg/apis/stepfunctions/v1alpha1"
	transferv1alpha1 "awsoperator.io/pkg/apis/transfer/v1alpha1"
	wafv1alpha1 "awsoperator.io/pkg/apis/waf/v1alpha1"
	wafregionalv1alpha1 "awsoperator.io/pkg/apis/wafregional/v1alpha1"
	workspacesv1alpha1 "awsoperator.io/pkg/apis/workspaces/v1alpha1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	cache "k8s.io/client-go/tools/cache"
)

// GenericInformer is type of SharedIndexInformer which will locate and delegate to other
// sharedInformers based on type
type GenericInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() cache.GenericLister
}

type genericInformer struct {
	informer cache.SharedIndexInformer
	resource schema.GroupResource
}

// Informer returns the SharedIndexInformer.
func (f *genericInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

// Lister returns the GenericLister.
func (f *genericInformer) Lister() cache.GenericLister {
	return cache.NewGenericLister(f.Informer().GetIndexer(), f.resource)
}

// ForResource gives generic access to a shared informer of the matching type
// TODO extend this to unknown resources with a client pool
func (f *sharedInformerFactory) ForResource(resource schema.GroupVersionResource) (GenericInformer, error) {
	switch resource {
	// Group=apigateway.awsoperator.io, Version=v1alpha1
	case v1alpha1.SchemeGroupVersion.WithResource("accounts"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigateway().V1alpha1().Accounts().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("apigatewayresources"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigateway().V1alpha1().ApiGatewayResources().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("apikeys"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigateway().V1alpha1().ApiKeys().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("authorizers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigateway().V1alpha1().Authorizers().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("basepathmappings"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigateway().V1alpha1().BasePathMappings().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("clientcertificates"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigateway().V1alpha1().ClientCertificates().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("deployments"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigateway().V1alpha1().Deployments().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("documentationparts"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigateway().V1alpha1().DocumentationParts().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("documentationversions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigateway().V1alpha1().DocumentationVersions().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("domainnames"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigateway().V1alpha1().DomainNames().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("gatewayresponses"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigateway().V1alpha1().GatewayResponses().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("methods"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigateway().V1alpha1().Methods().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("models"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigateway().V1alpha1().Models().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("requestvalidators"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigateway().V1alpha1().RequestValidators().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("restapis"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigateway().V1alpha1().RestApis().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("stages"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigateway().V1alpha1().Stages().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("usageplans"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigateway().V1alpha1().UsagePlans().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("usageplankeys"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigateway().V1alpha1().UsagePlanKeys().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("vpclinks"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigateway().V1alpha1().VpcLinks().Informer()}, nil

		// Group=apigatewayv2.awsoperator.io, Version=v1alpha1
	case apigatewayv2v1alpha1.SchemeGroupVersion.WithResource("apis"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigatewayv2().V1alpha1().Apis().Informer()}, nil
	case apigatewayv2v1alpha1.SchemeGroupVersion.WithResource("apimappings"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigatewayv2().V1alpha1().ApiMappings().Informer()}, nil
	case apigatewayv2v1alpha1.SchemeGroupVersion.WithResource("authorizers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigatewayv2().V1alpha1().Authorizers().Informer()}, nil
	case apigatewayv2v1alpha1.SchemeGroupVersion.WithResource("deployments"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigatewayv2().V1alpha1().Deployments().Informer()}, nil
	case apigatewayv2v1alpha1.SchemeGroupVersion.WithResource("domainnames"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigatewayv2().V1alpha1().DomainNames().Informer()}, nil
	case apigatewayv2v1alpha1.SchemeGroupVersion.WithResource("integrations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigatewayv2().V1alpha1().Integrations().Informer()}, nil
	case apigatewayv2v1alpha1.SchemeGroupVersion.WithResource("integrationresponses"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigatewayv2().V1alpha1().IntegrationResponses().Informer()}, nil
	case apigatewayv2v1alpha1.SchemeGroupVersion.WithResource("models"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigatewayv2().V1alpha1().Models().Informer()}, nil
	case apigatewayv2v1alpha1.SchemeGroupVersion.WithResource("routes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigatewayv2().V1alpha1().Routes().Informer()}, nil
	case apigatewayv2v1alpha1.SchemeGroupVersion.WithResource("routeresponses"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigatewayv2().V1alpha1().RouteResponses().Informer()}, nil
	case apigatewayv2v1alpha1.SchemeGroupVersion.WithResource("stages"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Apigatewayv2().V1alpha1().Stages().Informer()}, nil

		// Group=applicationautoscaling.awsoperator.io, Version=v1alpha1
	case applicationautoscalingv1alpha1.SchemeGroupVersion.WithResource("scalabletargets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Applicationautoscaling().V1alpha1().ScalableTargets().Informer()}, nil
	case applicationautoscalingv1alpha1.SchemeGroupVersion.WithResource("scalingpolicies"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Applicationautoscaling().V1alpha1().ScalingPolicies().Informer()}, nil

		// Group=appmesh.awsoperator.io, Version=v1alpha1
	case appmeshv1alpha1.SchemeGroupVersion.WithResource("meshes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Appmesh().V1alpha1().Meshes().Informer()}, nil
	case appmeshv1alpha1.SchemeGroupVersion.WithResource("routes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Appmesh().V1alpha1().Routes().Informer()}, nil
	case appmeshv1alpha1.SchemeGroupVersion.WithResource("virtualnodes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Appmesh().V1alpha1().VirtualNodes().Informer()}, nil
	case appmeshv1alpha1.SchemeGroupVersion.WithResource("virtualrouters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Appmesh().V1alpha1().VirtualRouters().Informer()}, nil
	case appmeshv1alpha1.SchemeGroupVersion.WithResource("virtualservices"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Appmesh().V1alpha1().VirtualServices().Informer()}, nil

		// Group=appstream.awsoperator.io, Version=v1alpha1
	case appstreamv1alpha1.SchemeGroupVersion.WithResource("directoryconfigs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Appstream().V1alpha1().DirectoryConfigs().Informer()}, nil
	case appstreamv1alpha1.SchemeGroupVersion.WithResource("fleets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Appstream().V1alpha1().Fleets().Informer()}, nil
	case appstreamv1alpha1.SchemeGroupVersion.WithResource("imagebuilders"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Appstream().V1alpha1().ImageBuilders().Informer()}, nil
	case appstreamv1alpha1.SchemeGroupVersion.WithResource("stacks"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Appstream().V1alpha1().Stacks().Informer()}, nil
	case appstreamv1alpha1.SchemeGroupVersion.WithResource("stackfleetassociations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Appstream().V1alpha1().StackFleetAssociations().Informer()}, nil
	case appstreamv1alpha1.SchemeGroupVersion.WithResource("stackuserassociations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Appstream().V1alpha1().StackUserAssociations().Informer()}, nil
	case appstreamv1alpha1.SchemeGroupVersion.WithResource("users"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Appstream().V1alpha1().Users().Informer()}, nil

		// Group=appsync.awsoperator.io, Version=v1alpha1
	case appsyncv1alpha1.SchemeGroupVersion.WithResource("apikeys"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Appsync().V1alpha1().ApiKeys().Informer()}, nil
	case appsyncv1alpha1.SchemeGroupVersion.WithResource("datasources"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Appsync().V1alpha1().DataSources().Informer()}, nil
	case appsyncv1alpha1.SchemeGroupVersion.WithResource("functionconfigurations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Appsync().V1alpha1().FunctionConfigurations().Informer()}, nil
	case appsyncv1alpha1.SchemeGroupVersion.WithResource("graphqlapis"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Appsync().V1alpha1().GraphQLApis().Informer()}, nil
	case appsyncv1alpha1.SchemeGroupVersion.WithResource("graphqlschemas"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Appsync().V1alpha1().GraphQLSchemas().Informer()}, nil
	case appsyncv1alpha1.SchemeGroupVersion.WithResource("resolvers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Appsync().V1alpha1().Resolvers().Informer()}, nil

		// Group=ask.awsoperator.io, Version=v1alpha1
	case askv1alpha1.SchemeGroupVersion.WithResource("skills"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ask().V1alpha1().Skills().Informer()}, nil

		// Group=athena.awsoperator.io, Version=v1alpha1
	case athenav1alpha1.SchemeGroupVersion.WithResource("namedqueries"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Athena().V1alpha1().NamedQueries().Informer()}, nil

		// Group=autoscaling.awsoperator.io, Version=v1alpha1
	case autoscalingv1alpha1.SchemeGroupVersion.WithResource("autoscalinggroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Autoscaling().V1alpha1().AutoScalingGroups().Informer()}, nil
	case autoscalingv1alpha1.SchemeGroupVersion.WithResource("launchconfigurations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Autoscaling().V1alpha1().LaunchConfigurations().Informer()}, nil
	case autoscalingv1alpha1.SchemeGroupVersion.WithResource("lifecyclehooks"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Autoscaling().V1alpha1().LifecycleHooks().Informer()}, nil
	case autoscalingv1alpha1.SchemeGroupVersion.WithResource("scalingpolicies"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Autoscaling().V1alpha1().ScalingPolicies().Informer()}, nil
	case autoscalingv1alpha1.SchemeGroupVersion.WithResource("scheduledactions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Autoscaling().V1alpha1().ScheduledActions().Informer()}, nil

		// Group=autoscalingplans.awsoperator.io, Version=v1alpha1
	case autoscalingplansv1alpha1.SchemeGroupVersion.WithResource("scalingplans"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Autoscalingplans().V1alpha1().ScalingPlans().Informer()}, nil

		// Group=batch.awsoperator.io, Version=v1alpha1
	case batchv1alpha1.SchemeGroupVersion.WithResource("computeenvironments"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Batch().V1alpha1().ComputeEnvironments().Informer()}, nil
	case batchv1alpha1.SchemeGroupVersion.WithResource("jobdefinitions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Batch().V1alpha1().JobDefinitions().Informer()}, nil
	case batchv1alpha1.SchemeGroupVersion.WithResource("jobqueues"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Batch().V1alpha1().JobQueues().Informer()}, nil

		// Group=budgets.awsoperator.io, Version=v1alpha1
	case budgetsv1alpha1.SchemeGroupVersion.WithResource("budgets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Budgets().V1alpha1().Budgets().Informer()}, nil

		// Group=cdk.awsoperator.io, Version=v1alpha1
	case cdkv1alpha1.SchemeGroupVersion.WithResource("metadatas"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cdk().V1alpha1().Metadatas().Informer()}, nil

		// Group=certificatemanager.awsoperator.io, Version=v1alpha1
	case certificatemanagerv1alpha1.SchemeGroupVersion.WithResource("certificates"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Certificatemanager().V1alpha1().Certificates().Informer()}, nil

		// Group=cloud9.awsoperator.io, Version=v1alpha1
	case cloud9v1alpha1.SchemeGroupVersion.WithResource("environmentec2s"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cloud9().V1alpha1().EnvironmentEC2s().Informer()}, nil

		// Group=cloudformation.awsoperator.io, Version=v1alpha1
	case cloudformationv1alpha1.SchemeGroupVersion.WithResource("stacks"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cloudformation().V1alpha1().Stacks().Informer()}, nil

		// Group=cloudfront.awsoperator.io, Version=v1alpha1
	case cloudfrontv1alpha1.SchemeGroupVersion.WithResource("cloudfrontoriginaccessidentities"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cloudfront().V1alpha1().CloudFrontOriginAccessIdentities().Informer()}, nil
	case cloudfrontv1alpha1.SchemeGroupVersion.WithResource("distributions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cloudfront().V1alpha1().Distributions().Informer()}, nil
	case cloudfrontv1alpha1.SchemeGroupVersion.WithResource("streamingdistributions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cloudfront().V1alpha1().StreamingDistributions().Informer()}, nil

		// Group=cloudtrail.awsoperator.io, Version=v1alpha1
	case cloudtrailv1alpha1.SchemeGroupVersion.WithResource("trails"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cloudtrail().V1alpha1().Trails().Informer()}, nil

		// Group=cloudwatch.awsoperator.io, Version=v1alpha1
	case cloudwatchv1alpha1.SchemeGroupVersion.WithResource("alarms"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cloudwatch().V1alpha1().Alarms().Informer()}, nil
	case cloudwatchv1alpha1.SchemeGroupVersion.WithResource("dashboards"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cloudwatch().V1alpha1().Dashboards().Informer()}, nil

		// Group=codebuild.awsoperator.io, Version=v1alpha1
	case codebuildv1alpha1.SchemeGroupVersion.WithResource("projects"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Codebuild().V1alpha1().Projects().Informer()}, nil

		// Group=codecommit.awsoperator.io, Version=v1alpha1
	case codecommitv1alpha1.SchemeGroupVersion.WithResource("repositories"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Codecommit().V1alpha1().Repositories().Informer()}, nil

		// Group=codedeploy.awsoperator.io, Version=v1alpha1
	case codedeployv1alpha1.SchemeGroupVersion.WithResource("applications"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Codedeploy().V1alpha1().Applications().Informer()}, nil
	case codedeployv1alpha1.SchemeGroupVersion.WithResource("deploymentconfigs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Codedeploy().V1alpha1().DeploymentConfigs().Informer()}, nil
	case codedeployv1alpha1.SchemeGroupVersion.WithResource("deploymentgroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Codedeploy().V1alpha1().DeploymentGroups().Informer()}, nil

		// Group=codepipeline.awsoperator.io, Version=v1alpha1
	case codepipelinev1alpha1.SchemeGroupVersion.WithResource("customactiontypes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Codepipeline().V1alpha1().CustomActionTypes().Informer()}, nil
	case codepipelinev1alpha1.SchemeGroupVersion.WithResource("pipelines"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Codepipeline().V1alpha1().Pipelines().Informer()}, nil
	case codepipelinev1alpha1.SchemeGroupVersion.WithResource("webhooks"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Codepipeline().V1alpha1().Webhooks().Informer()}, nil

		// Group=cognito.awsoperator.io, Version=v1alpha1
	case cognitov1alpha1.SchemeGroupVersion.WithResource("identitypools"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cognito().V1alpha1().IdentityPools().Informer()}, nil
	case cognitov1alpha1.SchemeGroupVersion.WithResource("identitypoolroleattachments"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cognito().V1alpha1().IdentityPoolRoleAttachments().Informer()}, nil
	case cognitov1alpha1.SchemeGroupVersion.WithResource("userpools"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cognito().V1alpha1().UserPools().Informer()}, nil
	case cognitov1alpha1.SchemeGroupVersion.WithResource("userpoolclients"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cognito().V1alpha1().UserPoolClients().Informer()}, nil
	case cognitov1alpha1.SchemeGroupVersion.WithResource("userpoolgroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cognito().V1alpha1().UserPoolGroups().Informer()}, nil
	case cognitov1alpha1.SchemeGroupVersion.WithResource("userpoolusers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cognito().V1alpha1().UserPoolUsers().Informer()}, nil
	case cognitov1alpha1.SchemeGroupVersion.WithResource("userpoolusertogroupattachments"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Cognito().V1alpha1().UserPoolUserToGroupAttachments().Informer()}, nil

		// Group=config.awsoperator.io, Version=v1alpha1
	case configv1alpha1.SchemeGroupVersion.WithResource("aggregationauthorizations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Config().V1alpha1().AggregationAuthorizations().Informer()}, nil
	case configv1alpha1.SchemeGroupVersion.WithResource("configrules"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Config().V1alpha1().ConfigRules().Informer()}, nil
	case configv1alpha1.SchemeGroupVersion.WithResource("configurationaggregators"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Config().V1alpha1().ConfigurationAggregators().Informer()}, nil
	case configv1alpha1.SchemeGroupVersion.WithResource("configurationrecorders"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Config().V1alpha1().ConfigurationRecorders().Informer()}, nil
	case configv1alpha1.SchemeGroupVersion.WithResource("deliverychannels"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Config().V1alpha1().DeliveryChannels().Informer()}, nil

		// Group=datapipeline.awsoperator.io, Version=v1alpha1
	case datapipelinev1alpha1.SchemeGroupVersion.WithResource("pipelines"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Datapipeline().V1alpha1().Pipelines().Informer()}, nil

		// Group=dax.awsoperator.io, Version=v1alpha1
	case daxv1alpha1.SchemeGroupVersion.WithResource("clusters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Dax().V1alpha1().Clusters().Informer()}, nil
	case daxv1alpha1.SchemeGroupVersion.WithResource("parametergroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Dax().V1alpha1().ParameterGroups().Informer()}, nil
	case daxv1alpha1.SchemeGroupVersion.WithResource("subnetgroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Dax().V1alpha1().SubnetGroups().Informer()}, nil

		// Group=directoryservice.awsoperator.io, Version=v1alpha1
	case directoryservicev1alpha1.SchemeGroupVersion.WithResource("microsoftads"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Directoryservice().V1alpha1().MicrosoftADs().Informer()}, nil
	case directoryservicev1alpha1.SchemeGroupVersion.WithResource("simpleads"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Directoryservice().V1alpha1().SimpleADs().Informer()}, nil

		// Group=dlm.awsoperator.io, Version=v1alpha1
	case dlmv1alpha1.SchemeGroupVersion.WithResource("lifecyclepolicies"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Dlm().V1alpha1().LifecyclePolicies().Informer()}, nil

		// Group=dms.awsoperator.io, Version=v1alpha1
	case dmsv1alpha1.SchemeGroupVersion.WithResource("certificates"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Dms().V1alpha1().Certificates().Informer()}, nil
	case dmsv1alpha1.SchemeGroupVersion.WithResource("endpoints"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Dms().V1alpha1().Endpoints().Informer()}, nil
	case dmsv1alpha1.SchemeGroupVersion.WithResource("eventsubscriptions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Dms().V1alpha1().EventSubscriptions().Informer()}, nil
	case dmsv1alpha1.SchemeGroupVersion.WithResource("replicationinstances"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Dms().V1alpha1().ReplicationInstances().Informer()}, nil
	case dmsv1alpha1.SchemeGroupVersion.WithResource("replicationsubnetgroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Dms().V1alpha1().ReplicationSubnetGroups().Informer()}, nil
	case dmsv1alpha1.SchemeGroupVersion.WithResource("replicationtasks"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Dms().V1alpha1().ReplicationTasks().Informer()}, nil

		// Group=docdb.awsoperator.io, Version=v1alpha1
	case docdbv1alpha1.SchemeGroupVersion.WithResource("dbclusters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Docdb().V1alpha1().DBClusters().Informer()}, nil
	case docdbv1alpha1.SchemeGroupVersion.WithResource("dbclusterparametergroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Docdb().V1alpha1().DBClusterParameterGroups().Informer()}, nil
	case docdbv1alpha1.SchemeGroupVersion.WithResource("dbinstances"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Docdb().V1alpha1().DBInstances().Informer()}, nil
	case docdbv1alpha1.SchemeGroupVersion.WithResource("dbsubnetgroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Docdb().V1alpha1().DBSubnetGroups().Informer()}, nil

		// Group=dynamodb.awsoperator.io, Version=v1alpha1
	case dynamodbv1alpha1.SchemeGroupVersion.WithResource("tables"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Dynamodb().V1alpha1().Tables().Informer()}, nil

		// Group=ec2.awsoperator.io, Version=v1alpha1
	case ec2v1alpha1.SchemeGroupVersion.WithResource("capacityreservations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().CapacityReservations().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("customergateways"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().CustomerGateways().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("dhcpoptionses"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().DHCPOptionses().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("ec2fleets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().EC2Fleets().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("eips"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().EIPs().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("eipassociations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().EIPAssociations().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("egressonlyinternetgateways"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().EgressOnlyInternetGateways().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("flowlogs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().FlowLogs().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("hosts"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().Hosts().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("instances"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().Instances().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("internetgateways"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().InternetGateways().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("launchtemplates"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().LaunchTemplates().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("natgateways"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().NatGateways().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("networkacls"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().NetworkAcls().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("networkaclentries"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().NetworkAclEntries().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("networkinterfaces"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().NetworkInterfaces().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("networkinterfaceattachments"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().NetworkInterfaceAttachments().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("networkinterfacepermissions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().NetworkInterfacePermissions().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("placementgroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().PlacementGroups().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("routes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().Routes().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("routetables"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().RouteTables().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("securitygroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().SecurityGroups().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("securitygroupegresses"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().SecurityGroupEgresses().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("securitygroupingresses"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().SecurityGroupIngresses().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("spotfleets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().SpotFleets().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("subnets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().Subnets().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("subnetcidrblocks"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().SubnetCidrBlocks().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("subnetnetworkaclassociations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().SubnetNetworkAclAssociations().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("subnetroutetableassociations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().SubnetRouteTableAssociations().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("transitgateways"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().TransitGateways().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("transitgatewayattachments"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().TransitGatewayAttachments().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("transitgatewayroutes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().TransitGatewayRoutes().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("transitgatewayroutetables"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().TransitGatewayRouteTables().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("transitgatewayroutetableassociations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().TransitGatewayRouteTableAssociations().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("transitgatewayroutetablepropagations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().TransitGatewayRouteTablePropagations().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("vpcs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().VPCs().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("vpccidrblocks"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().VPCCidrBlocks().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("vpcdhcpoptionsassociations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().VPCDHCPOptionsAssociations().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("vpcendpoints"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().VPCEndpoints().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("vpcendpointconnectionnotifications"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().VPCEndpointConnectionNotifications().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("vpcendpointservices"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().VPCEndpointServices().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("vpcendpointservicepermissionses"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().VPCEndpointServicePermissionses().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("vpcgatewayattachments"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().VPCGatewayAttachments().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("vpcpeeringconnections"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().VPCPeeringConnections().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("vpnconnections"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().VPNConnections().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("vpnconnectionroutes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().VPNConnectionRoutes().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("vpngateways"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().VPNGateways().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("vpngatewayroutepropagations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().VPNGatewayRoutePropagations().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("volumes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().Volumes().Informer()}, nil
	case ec2v1alpha1.SchemeGroupVersion.WithResource("volumeattachments"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ec2().V1alpha1().VolumeAttachments().Informer()}, nil

		// Group=ecr.awsoperator.io, Version=v1alpha1
	case ecrv1alpha1.SchemeGroupVersion.WithResource("repositories"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ecr().V1alpha1().Repositories().Informer()}, nil

		// Group=ecs.awsoperator.io, Version=v1alpha1
	case ecsv1alpha1.SchemeGroupVersion.WithResource("clusters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ecs().V1alpha1().Clusters().Informer()}, nil
	case ecsv1alpha1.SchemeGroupVersion.WithResource("services"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ecs().V1alpha1().Services().Informer()}, nil
	case ecsv1alpha1.SchemeGroupVersion.WithResource("taskdefinitions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ecs().V1alpha1().TaskDefinitions().Informer()}, nil

		// Group=efs.awsoperator.io, Version=v1alpha1
	case efsv1alpha1.SchemeGroupVersion.WithResource("filesystems"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Efs().V1alpha1().FileSystems().Informer()}, nil
	case efsv1alpha1.SchemeGroupVersion.WithResource("mounttargets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Efs().V1alpha1().MountTargets().Informer()}, nil

		// Group=eks.awsoperator.io, Version=v1alpha1
	case eksv1alpha1.SchemeGroupVersion.WithResource("clusters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Eks().V1alpha1().Clusters().Informer()}, nil

		// Group=elasticache.awsoperator.io, Version=v1alpha1
	case elasticachev1alpha1.SchemeGroupVersion.WithResource("cacheclusters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Elasticache().V1alpha1().CacheClusters().Informer()}, nil
	case elasticachev1alpha1.SchemeGroupVersion.WithResource("parametergroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Elasticache().V1alpha1().ParameterGroups().Informer()}, nil
	case elasticachev1alpha1.SchemeGroupVersion.WithResource("replicationgroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Elasticache().V1alpha1().ReplicationGroups().Informer()}, nil
	case elasticachev1alpha1.SchemeGroupVersion.WithResource("securitygroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Elasticache().V1alpha1().SecurityGroups().Informer()}, nil
	case elasticachev1alpha1.SchemeGroupVersion.WithResource("securitygroupingresses"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Elasticache().V1alpha1().SecurityGroupIngresses().Informer()}, nil
	case elasticachev1alpha1.SchemeGroupVersion.WithResource("subnetgroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Elasticache().V1alpha1().SubnetGroups().Informer()}, nil

		// Group=elasticbeanstalk.awsoperator.io, Version=v1alpha1
	case elasticbeanstalkv1alpha1.SchemeGroupVersion.WithResource("applications"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Elasticbeanstalk().V1alpha1().Applications().Informer()}, nil
	case elasticbeanstalkv1alpha1.SchemeGroupVersion.WithResource("applicationversions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Elasticbeanstalk().V1alpha1().ApplicationVersions().Informer()}, nil
	case elasticbeanstalkv1alpha1.SchemeGroupVersion.WithResource("configurationtemplates"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Elasticbeanstalk().V1alpha1().ConfigurationTemplates().Informer()}, nil
	case elasticbeanstalkv1alpha1.SchemeGroupVersion.WithResource("environments"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Elasticbeanstalk().V1alpha1().Environments().Informer()}, nil

		// Group=elasticloadbalancing.awsoperator.io, Version=v1alpha1
	case elasticloadbalancingv1alpha1.SchemeGroupVersion.WithResource("loadbalancers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Elasticloadbalancing().V1alpha1().LoadBalancers().Informer()}, nil

		// Group=elasticloadbalancingv2.awsoperator.io, Version=v1alpha1
	case elasticloadbalancingv2v1alpha1.SchemeGroupVersion.WithResource("listeners"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Elasticloadbalancingv2().V1alpha1().Listeners().Informer()}, nil
	case elasticloadbalancingv2v1alpha1.SchemeGroupVersion.WithResource("listenercertificates"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Elasticloadbalancingv2().V1alpha1().ListenerCertificates().Informer()}, nil
	case elasticloadbalancingv2v1alpha1.SchemeGroupVersion.WithResource("listenerrules"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Elasticloadbalancingv2().V1alpha1().ListenerRules().Informer()}, nil
	case elasticloadbalancingv2v1alpha1.SchemeGroupVersion.WithResource("loadbalancers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Elasticloadbalancingv2().V1alpha1().LoadBalancers().Informer()}, nil
	case elasticloadbalancingv2v1alpha1.SchemeGroupVersion.WithResource("targetgroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Elasticloadbalancingv2().V1alpha1().TargetGroups().Informer()}, nil

		// Group=elasticsearch.awsoperator.io, Version=v1alpha1
	case elasticsearchv1alpha1.SchemeGroupVersion.WithResource("domains"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Elasticsearch().V1alpha1().Domains().Informer()}, nil

		// Group=emr.awsoperator.io, Version=v1alpha1
	case emrv1alpha1.SchemeGroupVersion.WithResource("clusters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Emr().V1alpha1().Clusters().Informer()}, nil
	case emrv1alpha1.SchemeGroupVersion.WithResource("instancefleetconfigs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Emr().V1alpha1().InstanceFleetConfigs().Informer()}, nil
	case emrv1alpha1.SchemeGroupVersion.WithResource("instancegroupconfigs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Emr().V1alpha1().InstanceGroupConfigs().Informer()}, nil
	case emrv1alpha1.SchemeGroupVersion.WithResource("securityconfigurations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Emr().V1alpha1().SecurityConfigurations().Informer()}, nil
	case emrv1alpha1.SchemeGroupVersion.WithResource("steps"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Emr().V1alpha1().Steps().Informer()}, nil

		// Group=events.awsoperator.io, Version=v1alpha1
	case eventsv1alpha1.SchemeGroupVersion.WithResource("eventbuspolicies"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Events().V1alpha1().EventBusPolicies().Informer()}, nil
	case eventsv1alpha1.SchemeGroupVersion.WithResource("rules"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Events().V1alpha1().Rules().Informer()}, nil

		// Group=fsx.awsoperator.io, Version=v1alpha1
	case fsxv1alpha1.SchemeGroupVersion.WithResource("filesystems"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Fsx().V1alpha1().FileSystems().Informer()}, nil

		// Group=gamelift.awsoperator.io, Version=v1alpha1
	case gameliftv1alpha1.SchemeGroupVersion.WithResource("aliases"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Gamelift().V1alpha1().Aliases().Informer()}, nil
	case gameliftv1alpha1.SchemeGroupVersion.WithResource("builds"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Gamelift().V1alpha1().Builds().Informer()}, nil
	case gameliftv1alpha1.SchemeGroupVersion.WithResource("fleets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Gamelift().V1alpha1().Fleets().Informer()}, nil

		// Group=glue.awsoperator.io, Version=v1alpha1
	case gluev1alpha1.SchemeGroupVersion.WithResource("classifiers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Glue().V1alpha1().Classifiers().Informer()}, nil
	case gluev1alpha1.SchemeGroupVersion.WithResource("connections"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Glue().V1alpha1().Connections().Informer()}, nil
	case gluev1alpha1.SchemeGroupVersion.WithResource("crawlers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Glue().V1alpha1().Crawlers().Informer()}, nil
	case gluev1alpha1.SchemeGroupVersion.WithResource("datacatalogencryptionsettingses"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Glue().V1alpha1().DataCatalogEncryptionSettingses().Informer()}, nil
	case gluev1alpha1.SchemeGroupVersion.WithResource("databases"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Glue().V1alpha1().Databases().Informer()}, nil
	case gluev1alpha1.SchemeGroupVersion.WithResource("devendpoints"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Glue().V1alpha1().DevEndpoints().Informer()}, nil
	case gluev1alpha1.SchemeGroupVersion.WithResource("jobs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Glue().V1alpha1().Jobs().Informer()}, nil
	case gluev1alpha1.SchemeGroupVersion.WithResource("partitions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Glue().V1alpha1().Partitions().Informer()}, nil
	case gluev1alpha1.SchemeGroupVersion.WithResource("securityconfigurations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Glue().V1alpha1().SecurityConfigurations().Informer()}, nil
	case gluev1alpha1.SchemeGroupVersion.WithResource("tables"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Glue().V1alpha1().Tables().Informer()}, nil
	case gluev1alpha1.SchemeGroupVersion.WithResource("triggers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Glue().V1alpha1().Triggers().Informer()}, nil

		// Group=greengrass.awsoperator.io, Version=v1alpha1
	case greengrassv1alpha1.SchemeGroupVersion.WithResource("connectordefinitions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Greengrass().V1alpha1().ConnectorDefinitions().Informer()}, nil
	case greengrassv1alpha1.SchemeGroupVersion.WithResource("connectordefinitionversions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Greengrass().V1alpha1().ConnectorDefinitionVersions().Informer()}, nil
	case greengrassv1alpha1.SchemeGroupVersion.WithResource("coredefinitions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Greengrass().V1alpha1().CoreDefinitions().Informer()}, nil
	case greengrassv1alpha1.SchemeGroupVersion.WithResource("coredefinitionversions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Greengrass().V1alpha1().CoreDefinitionVersions().Informer()}, nil
	case greengrassv1alpha1.SchemeGroupVersion.WithResource("devicedefinitions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Greengrass().V1alpha1().DeviceDefinitions().Informer()}, nil
	case greengrassv1alpha1.SchemeGroupVersion.WithResource("devicedefinitionversions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Greengrass().V1alpha1().DeviceDefinitionVersions().Informer()}, nil
	case greengrassv1alpha1.SchemeGroupVersion.WithResource("functiondefinitions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Greengrass().V1alpha1().FunctionDefinitions().Informer()}, nil
	case greengrassv1alpha1.SchemeGroupVersion.WithResource("functiondefinitionversions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Greengrass().V1alpha1().FunctionDefinitionVersions().Informer()}, nil
	case greengrassv1alpha1.SchemeGroupVersion.WithResource("groups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Greengrass().V1alpha1().Groups().Informer()}, nil
	case greengrassv1alpha1.SchemeGroupVersion.WithResource("groupversions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Greengrass().V1alpha1().GroupVersions().Informer()}, nil
	case greengrassv1alpha1.SchemeGroupVersion.WithResource("loggerdefinitions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Greengrass().V1alpha1().LoggerDefinitions().Informer()}, nil
	case greengrassv1alpha1.SchemeGroupVersion.WithResource("loggerdefinitionversions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Greengrass().V1alpha1().LoggerDefinitionVersions().Informer()}, nil
	case greengrassv1alpha1.SchemeGroupVersion.WithResource("resourcedefinitions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Greengrass().V1alpha1().ResourceDefinitions().Informer()}, nil
	case greengrassv1alpha1.SchemeGroupVersion.WithResource("resourcedefinitionversions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Greengrass().V1alpha1().ResourceDefinitionVersions().Informer()}, nil
	case greengrassv1alpha1.SchemeGroupVersion.WithResource("subscriptiondefinitions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Greengrass().V1alpha1().SubscriptionDefinitions().Informer()}, nil
	case greengrassv1alpha1.SchemeGroupVersion.WithResource("subscriptiondefinitionversions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Greengrass().V1alpha1().SubscriptionDefinitionVersions().Informer()}, nil

		// Group=guardduty.awsoperator.io, Version=v1alpha1
	case guarddutyv1alpha1.SchemeGroupVersion.WithResource("detectors"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Guardduty().V1alpha1().Detectors().Informer()}, nil
	case guarddutyv1alpha1.SchemeGroupVersion.WithResource("filters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Guardduty().V1alpha1().Filters().Informer()}, nil
	case guarddutyv1alpha1.SchemeGroupVersion.WithResource("ipsets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Guardduty().V1alpha1().IPSets().Informer()}, nil
	case guarddutyv1alpha1.SchemeGroupVersion.WithResource("masters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Guardduty().V1alpha1().Masters().Informer()}, nil
	case guarddutyv1alpha1.SchemeGroupVersion.WithResource("members"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Guardduty().V1alpha1().Members().Informer()}, nil
	case guarddutyv1alpha1.SchemeGroupVersion.WithResource("threatintelsets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Guardduty().V1alpha1().ThreatIntelSets().Informer()}, nil

		// Group=iam.awsoperator.io, Version=v1alpha1
	case iamv1alpha1.SchemeGroupVersion.WithResource("accesskeys"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iam().V1alpha1().AccessKeys().Informer()}, nil
	case iamv1alpha1.SchemeGroupVersion.WithResource("groups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iam().V1alpha1().Groups().Informer()}, nil
	case iamv1alpha1.SchemeGroupVersion.WithResource("instanceprofiles"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iam().V1alpha1().InstanceProfiles().Informer()}, nil
	case iamv1alpha1.SchemeGroupVersion.WithResource("managedpolicies"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iam().V1alpha1().ManagedPolicies().Informer()}, nil
	case iamv1alpha1.SchemeGroupVersion.WithResource("policies"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iam().V1alpha1().Policies().Informer()}, nil
	case iamv1alpha1.SchemeGroupVersion.WithResource("roles"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iam().V1alpha1().Roles().Informer()}, nil
	case iamv1alpha1.SchemeGroupVersion.WithResource("servicelinkedroles"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iam().V1alpha1().ServiceLinkedRoles().Informer()}, nil
	case iamv1alpha1.SchemeGroupVersion.WithResource("users"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iam().V1alpha1().Users().Informer()}, nil
	case iamv1alpha1.SchemeGroupVersion.WithResource("usertogroupadditions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iam().V1alpha1().UserToGroupAdditions().Informer()}, nil

		// Group=inspector.awsoperator.io, Version=v1alpha1
	case inspectorv1alpha1.SchemeGroupVersion.WithResource("assessmenttargets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Inspector().V1alpha1().AssessmentTargets().Informer()}, nil
	case inspectorv1alpha1.SchemeGroupVersion.WithResource("assessmenttemplates"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Inspector().V1alpha1().AssessmentTemplates().Informer()}, nil
	case inspectorv1alpha1.SchemeGroupVersion.WithResource("resourcegroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Inspector().V1alpha1().ResourceGroups().Informer()}, nil

		// Group=iot.awsoperator.io, Version=v1alpha1
	case iotv1alpha1.SchemeGroupVersion.WithResource("certificates"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iot().V1alpha1().Certificates().Informer()}, nil
	case iotv1alpha1.SchemeGroupVersion.WithResource("policies"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iot().V1alpha1().Policies().Informer()}, nil
	case iotv1alpha1.SchemeGroupVersion.WithResource("policyprincipalattachments"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iot().V1alpha1().PolicyPrincipalAttachments().Informer()}, nil
	case iotv1alpha1.SchemeGroupVersion.WithResource("things"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iot().V1alpha1().Things().Informer()}, nil
	case iotv1alpha1.SchemeGroupVersion.WithResource("thingprincipalattachments"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iot().V1alpha1().ThingPrincipalAttachments().Informer()}, nil
	case iotv1alpha1.SchemeGroupVersion.WithResource("topicrules"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iot().V1alpha1().TopicRules().Informer()}, nil

		// Group=iot1click.awsoperator.io, Version=v1alpha1
	case iot1clickv1alpha1.SchemeGroupVersion.WithResource("devices"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iot1click().V1alpha1().Devices().Informer()}, nil
	case iot1clickv1alpha1.SchemeGroupVersion.WithResource("placements"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iot1click().V1alpha1().Placements().Informer()}, nil
	case iot1clickv1alpha1.SchemeGroupVersion.WithResource("projects"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iot1click().V1alpha1().Projects().Informer()}, nil

		// Group=iotanalytics.awsoperator.io, Version=v1alpha1
	case iotanalyticsv1alpha1.SchemeGroupVersion.WithResource("channels"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iotanalytics().V1alpha1().Channels().Informer()}, nil
	case iotanalyticsv1alpha1.SchemeGroupVersion.WithResource("datasets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iotanalytics().V1alpha1().Datasets().Informer()}, nil
	case iotanalyticsv1alpha1.SchemeGroupVersion.WithResource("datastores"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iotanalytics().V1alpha1().Datastores().Informer()}, nil
	case iotanalyticsv1alpha1.SchemeGroupVersion.WithResource("pipelines"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Iotanalytics().V1alpha1().Pipelines().Informer()}, nil

		// Group=kinesis.awsoperator.io, Version=v1alpha1
	case kinesisv1alpha1.SchemeGroupVersion.WithResource("streams"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Kinesis().V1alpha1().Streams().Informer()}, nil
	case kinesisv1alpha1.SchemeGroupVersion.WithResource("streamconsumers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Kinesis().V1alpha1().StreamConsumers().Informer()}, nil

		// Group=kinesisanalytics.awsoperator.io, Version=v1alpha1
	case kinesisanalyticsv1alpha1.SchemeGroupVersion.WithResource("applications"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Kinesisanalytics().V1alpha1().Applications().Informer()}, nil
	case kinesisanalyticsv1alpha1.SchemeGroupVersion.WithResource("applicationoutputs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Kinesisanalytics().V1alpha1().ApplicationOutputs().Informer()}, nil
	case kinesisanalyticsv1alpha1.SchemeGroupVersion.WithResource("applicationreferencedatasources"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Kinesisanalytics().V1alpha1().ApplicationReferenceDataSources().Informer()}, nil

		// Group=kinesisanalyticsv2.awsoperator.io, Version=v1alpha1
	case kinesisanalyticsv2v1alpha1.SchemeGroupVersion.WithResource("applications"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Kinesisanalyticsv2().V1alpha1().Applications().Informer()}, nil
	case kinesisanalyticsv2v1alpha1.SchemeGroupVersion.WithResource("applicationcloudwatchloggingoptions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Kinesisanalyticsv2().V1alpha1().ApplicationCloudWatchLoggingOptions().Informer()}, nil
	case kinesisanalyticsv2v1alpha1.SchemeGroupVersion.WithResource("applicationoutputs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Kinesisanalyticsv2().V1alpha1().ApplicationOutputs().Informer()}, nil
	case kinesisanalyticsv2v1alpha1.SchemeGroupVersion.WithResource("applicationreferencedatasources"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Kinesisanalyticsv2().V1alpha1().ApplicationReferenceDataSources().Informer()}, nil

		// Group=kinesisfirehose.awsoperator.io, Version=v1alpha1
	case kinesisfirehosev1alpha1.SchemeGroupVersion.WithResource("deliverystreams"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Kinesisfirehose().V1alpha1().DeliveryStreams().Informer()}, nil

		// Group=kms.awsoperator.io, Version=v1alpha1
	case kmsv1alpha1.SchemeGroupVersion.WithResource("aliases"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Kms().V1alpha1().Aliases().Informer()}, nil
	case kmsv1alpha1.SchemeGroupVersion.WithResource("keys"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Kms().V1alpha1().Keys().Informer()}, nil

		// Group=lambda.awsoperator.io, Version=v1alpha1
	case lambdav1alpha1.SchemeGroupVersion.WithResource("aliases"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Lambda().V1alpha1().Aliases().Informer()}, nil
	case lambdav1alpha1.SchemeGroupVersion.WithResource("eventsourcemappings"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Lambda().V1alpha1().EventSourceMappings().Informer()}, nil
	case lambdav1alpha1.SchemeGroupVersion.WithResource("functions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Lambda().V1alpha1().Functions().Informer()}, nil
	case lambdav1alpha1.SchemeGroupVersion.WithResource("layerversions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Lambda().V1alpha1().LayerVersions().Informer()}, nil
	case lambdav1alpha1.SchemeGroupVersion.WithResource("layerversionpermissions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Lambda().V1alpha1().LayerVersionPermissions().Informer()}, nil
	case lambdav1alpha1.SchemeGroupVersion.WithResource("permissions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Lambda().V1alpha1().Permissions().Informer()}, nil
	case lambdav1alpha1.SchemeGroupVersion.WithResource("versions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Lambda().V1alpha1().Versions().Informer()}, nil

		// Group=logs.awsoperator.io, Version=v1alpha1
	case logsv1alpha1.SchemeGroupVersion.WithResource("destinations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Logs().V1alpha1().Destinations().Informer()}, nil
	case logsv1alpha1.SchemeGroupVersion.WithResource("loggroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Logs().V1alpha1().LogGroups().Informer()}, nil
	case logsv1alpha1.SchemeGroupVersion.WithResource("logstreams"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Logs().V1alpha1().LogStreams().Informer()}, nil
	case logsv1alpha1.SchemeGroupVersion.WithResource("metricfilters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Logs().V1alpha1().MetricFilters().Informer()}, nil
	case logsv1alpha1.SchemeGroupVersion.WithResource("subscriptionfilters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Logs().V1alpha1().SubscriptionFilters().Informer()}, nil

		// Group=mediastore.awsoperator.io, Version=v1alpha1
	case mediastorev1alpha1.SchemeGroupVersion.WithResource("containers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Mediastore().V1alpha1().Containers().Informer()}, nil

		// Group=mq.awsoperator.io, Version=v1alpha1
	case mqv1alpha1.SchemeGroupVersion.WithResource("brokers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Mq().V1alpha1().Brokers().Informer()}, nil
	case mqv1alpha1.SchemeGroupVersion.WithResource("configurations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Mq().V1alpha1().Configurations().Informer()}, nil
	case mqv1alpha1.SchemeGroupVersion.WithResource("configurationassociations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Mq().V1alpha1().ConfigurationAssociations().Informer()}, nil

		// Group=neptune.awsoperator.io, Version=v1alpha1
	case neptunev1alpha1.SchemeGroupVersion.WithResource("dbclusters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Neptune().V1alpha1().DBClusters().Informer()}, nil
	case neptunev1alpha1.SchemeGroupVersion.WithResource("dbclusterparametergroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Neptune().V1alpha1().DBClusterParameterGroups().Informer()}, nil
	case neptunev1alpha1.SchemeGroupVersion.WithResource("dbinstances"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Neptune().V1alpha1().DBInstances().Informer()}, nil
	case neptunev1alpha1.SchemeGroupVersion.WithResource("dbparametergroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Neptune().V1alpha1().DBParameterGroups().Informer()}, nil
	case neptunev1alpha1.SchemeGroupVersion.WithResource("dbsubnetgroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Neptune().V1alpha1().DBSubnetGroups().Informer()}, nil

		// Group=opsworks.awsoperator.io, Version=v1alpha1
	case opsworksv1alpha1.SchemeGroupVersion.WithResource("apps"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Opsworks().V1alpha1().Apps().Informer()}, nil
	case opsworksv1alpha1.SchemeGroupVersion.WithResource("elasticloadbalancerattachments"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Opsworks().V1alpha1().ElasticLoadBalancerAttachments().Informer()}, nil
	case opsworksv1alpha1.SchemeGroupVersion.WithResource("instances"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Opsworks().V1alpha1().Instances().Informer()}, nil
	case opsworksv1alpha1.SchemeGroupVersion.WithResource("layers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Opsworks().V1alpha1().Layers().Informer()}, nil
	case opsworksv1alpha1.SchemeGroupVersion.WithResource("stacks"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Opsworks().V1alpha1().Stacks().Informer()}, nil
	case opsworksv1alpha1.SchemeGroupVersion.WithResource("userprofiles"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Opsworks().V1alpha1().UserProfiles().Informer()}, nil
	case opsworksv1alpha1.SchemeGroupVersion.WithResource("volumes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Opsworks().V1alpha1().Volumes().Informer()}, nil

		// Group=opsworkscm.awsoperator.io, Version=v1alpha1
	case opsworkscmv1alpha1.SchemeGroupVersion.WithResource("servers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Opsworkscm().V1alpha1().Servers().Informer()}, nil

		// Group=pinpointemail.awsoperator.io, Version=v1alpha1
	case pinpointemailv1alpha1.SchemeGroupVersion.WithResource("configurationsets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Pinpointemail().V1alpha1().ConfigurationSets().Informer()}, nil
	case pinpointemailv1alpha1.SchemeGroupVersion.WithResource("configurationseteventdestinations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Pinpointemail().V1alpha1().ConfigurationSetEventDestinations().Informer()}, nil
	case pinpointemailv1alpha1.SchemeGroupVersion.WithResource("dedicatedippools"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Pinpointemail().V1alpha1().DedicatedIpPools().Informer()}, nil
	case pinpointemailv1alpha1.SchemeGroupVersion.WithResource("identities"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Pinpointemail().V1alpha1().Identities().Informer()}, nil

		// Group=ram.awsoperator.io, Version=v1alpha1
	case ramv1alpha1.SchemeGroupVersion.WithResource("resourceshares"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ram().V1alpha1().ResourceShares().Informer()}, nil

		// Group=rds.awsoperator.io, Version=v1alpha1
	case rdsv1alpha1.SchemeGroupVersion.WithResource("dbclusters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Rds().V1alpha1().DBClusters().Informer()}, nil
	case rdsv1alpha1.SchemeGroupVersion.WithResource("dbclusterparametergroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Rds().V1alpha1().DBClusterParameterGroups().Informer()}, nil
	case rdsv1alpha1.SchemeGroupVersion.WithResource("dbinstances"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Rds().V1alpha1().DBInstances().Informer()}, nil
	case rdsv1alpha1.SchemeGroupVersion.WithResource("dbparametergroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Rds().V1alpha1().DBParameterGroups().Informer()}, nil
	case rdsv1alpha1.SchemeGroupVersion.WithResource("dbsecuritygroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Rds().V1alpha1().DBSecurityGroups().Informer()}, nil
	case rdsv1alpha1.SchemeGroupVersion.WithResource("dbsecuritygroupingresses"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Rds().V1alpha1().DBSecurityGroupIngresses().Informer()}, nil
	case rdsv1alpha1.SchemeGroupVersion.WithResource("dbsubnetgroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Rds().V1alpha1().DBSubnetGroups().Informer()}, nil
	case rdsv1alpha1.SchemeGroupVersion.WithResource("eventsubscriptions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Rds().V1alpha1().EventSubscriptions().Informer()}, nil
	case rdsv1alpha1.SchemeGroupVersion.WithResource("optiongroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Rds().V1alpha1().OptionGroups().Informer()}, nil

		// Group=redshift.awsoperator.io, Version=v1alpha1
	case redshiftv1alpha1.SchemeGroupVersion.WithResource("clusters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Redshift().V1alpha1().Clusters().Informer()}, nil
	case redshiftv1alpha1.SchemeGroupVersion.WithResource("clusterparametergroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Redshift().V1alpha1().ClusterParameterGroups().Informer()}, nil
	case redshiftv1alpha1.SchemeGroupVersion.WithResource("clustersecuritygroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Redshift().V1alpha1().ClusterSecurityGroups().Informer()}, nil
	case redshiftv1alpha1.SchemeGroupVersion.WithResource("clustersecuritygroupingresses"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Redshift().V1alpha1().ClusterSecurityGroupIngresses().Informer()}, nil
	case redshiftv1alpha1.SchemeGroupVersion.WithResource("clustersubnetgroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Redshift().V1alpha1().ClusterSubnetGroups().Informer()}, nil

		// Group=robomaker.awsoperator.io, Version=v1alpha1
	case robomakerv1alpha1.SchemeGroupVersion.WithResource("fleets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Robomaker().V1alpha1().Fleets().Informer()}, nil
	case robomakerv1alpha1.SchemeGroupVersion.WithResource("robots"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Robomaker().V1alpha1().Robots().Informer()}, nil
	case robomakerv1alpha1.SchemeGroupVersion.WithResource("robotapplications"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Robomaker().V1alpha1().RobotApplications().Informer()}, nil
	case robomakerv1alpha1.SchemeGroupVersion.WithResource("robotapplicationversions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Robomaker().V1alpha1().RobotApplicationVersions().Informer()}, nil
	case robomakerv1alpha1.SchemeGroupVersion.WithResource("simulationapplications"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Robomaker().V1alpha1().SimulationApplications().Informer()}, nil
	case robomakerv1alpha1.SchemeGroupVersion.WithResource("simulationapplicationversions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Robomaker().V1alpha1().SimulationApplicationVersions().Informer()}, nil

		// Group=route53.awsoperator.io, Version=v1alpha1
	case route53v1alpha1.SchemeGroupVersion.WithResource("healthchecks"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Route53().V1alpha1().HealthChecks().Informer()}, nil
	case route53v1alpha1.SchemeGroupVersion.WithResource("hostedzones"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Route53().V1alpha1().HostedZones().Informer()}, nil
	case route53v1alpha1.SchemeGroupVersion.WithResource("recordsets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Route53().V1alpha1().RecordSets().Informer()}, nil
	case route53v1alpha1.SchemeGroupVersion.WithResource("recordsetgroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Route53().V1alpha1().RecordSetGroups().Informer()}, nil

		// Group=route53resolver.awsoperator.io, Version=v1alpha1
	case route53resolverv1alpha1.SchemeGroupVersion.WithResource("resolverendpoints"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Route53resolver().V1alpha1().ResolverEndpoints().Informer()}, nil
	case route53resolverv1alpha1.SchemeGroupVersion.WithResource("resolverrules"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Route53resolver().V1alpha1().ResolverRules().Informer()}, nil
	case route53resolverv1alpha1.SchemeGroupVersion.WithResource("resolverruleassociations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Route53resolver().V1alpha1().ResolverRuleAssociations().Informer()}, nil

		// Group=s3.awsoperator.io, Version=v1alpha1
	case s3v1alpha1.SchemeGroupVersion.WithResource("buckets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.S3().V1alpha1().Buckets().Informer()}, nil
	case s3v1alpha1.SchemeGroupVersion.WithResource("bucketpolicies"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.S3().V1alpha1().BucketPolicies().Informer()}, nil

		// Group=sagemaker.awsoperator.io, Version=v1alpha1
	case sagemakerv1alpha1.SchemeGroupVersion.WithResource("endpoints"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Sagemaker().V1alpha1().Endpoints().Informer()}, nil
	case sagemakerv1alpha1.SchemeGroupVersion.WithResource("endpointconfigs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Sagemaker().V1alpha1().EndpointConfigs().Informer()}, nil
	case sagemakerv1alpha1.SchemeGroupVersion.WithResource("models"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Sagemaker().V1alpha1().Models().Informer()}, nil
	case sagemakerv1alpha1.SchemeGroupVersion.WithResource("notebookinstances"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Sagemaker().V1alpha1().NotebookInstances().Informer()}, nil
	case sagemakerv1alpha1.SchemeGroupVersion.WithResource("notebookinstancelifecycleconfigs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Sagemaker().V1alpha1().NotebookInstanceLifecycleConfigs().Informer()}, nil

		// Group=sdb.awsoperator.io, Version=v1alpha1
	case sdbv1alpha1.SchemeGroupVersion.WithResource("domains"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Sdb().V1alpha1().Domains().Informer()}, nil

		// Group=secretsmanager.awsoperator.io, Version=v1alpha1
	case secretsmanagerv1alpha1.SchemeGroupVersion.WithResource("resourcepolicies"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Secretsmanager().V1alpha1().ResourcePolicies().Informer()}, nil
	case secretsmanagerv1alpha1.SchemeGroupVersion.WithResource("rotationschedules"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Secretsmanager().V1alpha1().RotationSchedules().Informer()}, nil
	case secretsmanagerv1alpha1.SchemeGroupVersion.WithResource("secrets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Secretsmanager().V1alpha1().Secrets().Informer()}, nil
	case secretsmanagerv1alpha1.SchemeGroupVersion.WithResource("secrettargetattachments"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Secretsmanager().V1alpha1().SecretTargetAttachments().Informer()}, nil

		// Group=servicecatalog.awsoperator.io, Version=v1alpha1
	case servicecatalogv1alpha1.SchemeGroupVersion.WithResource("acceptedportfolioshares"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicecatalog().V1alpha1().AcceptedPortfolioShares().Informer()}, nil
	case servicecatalogv1alpha1.SchemeGroupVersion.WithResource("cloudformationproducts"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicecatalog().V1alpha1().CloudFormationProducts().Informer()}, nil
	case servicecatalogv1alpha1.SchemeGroupVersion.WithResource("cloudformationprovisionedproducts"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicecatalog().V1alpha1().CloudFormationProvisionedProducts().Informer()}, nil
	case servicecatalogv1alpha1.SchemeGroupVersion.WithResource("launchnotificationconstraints"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicecatalog().V1alpha1().LaunchNotificationConstraints().Informer()}, nil
	case servicecatalogv1alpha1.SchemeGroupVersion.WithResource("launchroleconstraints"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicecatalog().V1alpha1().LaunchRoleConstraints().Informer()}, nil
	case servicecatalogv1alpha1.SchemeGroupVersion.WithResource("launchtemplateconstraints"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicecatalog().V1alpha1().LaunchTemplateConstraints().Informer()}, nil
	case servicecatalogv1alpha1.SchemeGroupVersion.WithResource("portfolios"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicecatalog().V1alpha1().Portfolios().Informer()}, nil
	case servicecatalogv1alpha1.SchemeGroupVersion.WithResource("portfolioprincipalassociations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicecatalog().V1alpha1().PortfolioPrincipalAssociations().Informer()}, nil
	case servicecatalogv1alpha1.SchemeGroupVersion.WithResource("portfolioproductassociations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicecatalog().V1alpha1().PortfolioProductAssociations().Informer()}, nil
	case servicecatalogv1alpha1.SchemeGroupVersion.WithResource("portfolioshares"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicecatalog().V1alpha1().PortfolioShares().Informer()}, nil
	case servicecatalogv1alpha1.SchemeGroupVersion.WithResource("resourceupdateconstraints"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicecatalog().V1alpha1().ResourceUpdateConstraints().Informer()}, nil
	case servicecatalogv1alpha1.SchemeGroupVersion.WithResource("tagoptions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicecatalog().V1alpha1().TagOptions().Informer()}, nil
	case servicecatalogv1alpha1.SchemeGroupVersion.WithResource("tagoptionassociations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicecatalog().V1alpha1().TagOptionAssociations().Informer()}, nil

		// Group=servicediscovery.awsoperator.io, Version=v1alpha1
	case servicediscoveryv1alpha1.SchemeGroupVersion.WithResource("httpnamespaces"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicediscovery().V1alpha1().HttpNamespaces().Informer()}, nil
	case servicediscoveryv1alpha1.SchemeGroupVersion.WithResource("instances"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicediscovery().V1alpha1().Instances().Informer()}, nil
	case servicediscoveryv1alpha1.SchemeGroupVersion.WithResource("privatednsnamespaces"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicediscovery().V1alpha1().PrivateDnsNamespaces().Informer()}, nil
	case servicediscoveryv1alpha1.SchemeGroupVersion.WithResource("publicdnsnamespaces"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicediscovery().V1alpha1().PublicDnsNamespaces().Informer()}, nil
	case servicediscoveryv1alpha1.SchemeGroupVersion.WithResource("services"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Servicediscovery().V1alpha1().Services().Informer()}, nil

		// Group=ses.awsoperator.io, Version=v1alpha1
	case sesv1alpha1.SchemeGroupVersion.WithResource("configurationsets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ses().V1alpha1().ConfigurationSets().Informer()}, nil
	case sesv1alpha1.SchemeGroupVersion.WithResource("configurationseteventdestinations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ses().V1alpha1().ConfigurationSetEventDestinations().Informer()}, nil
	case sesv1alpha1.SchemeGroupVersion.WithResource("receiptfilters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ses().V1alpha1().ReceiptFilters().Informer()}, nil
	case sesv1alpha1.SchemeGroupVersion.WithResource("receiptrules"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ses().V1alpha1().ReceiptRules().Informer()}, nil
	case sesv1alpha1.SchemeGroupVersion.WithResource("receiptrulesets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ses().V1alpha1().ReceiptRuleSets().Informer()}, nil
	case sesv1alpha1.SchemeGroupVersion.WithResource("templates"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ses().V1alpha1().Templates().Informer()}, nil

		// Group=sns.awsoperator.io, Version=v1alpha1
	case snsv1alpha1.SchemeGroupVersion.WithResource("subscriptions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Sns().V1alpha1().Subscriptions().Informer()}, nil
	case snsv1alpha1.SchemeGroupVersion.WithResource("topics"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Sns().V1alpha1().Topics().Informer()}, nil
	case snsv1alpha1.SchemeGroupVersion.WithResource("topicpolicies"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Sns().V1alpha1().TopicPolicies().Informer()}, nil

		// Group=sqs.awsoperator.io, Version=v1alpha1
	case sqsv1alpha1.SchemeGroupVersion.WithResource("queues"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Sqs().V1alpha1().Queues().Informer()}, nil
	case sqsv1alpha1.SchemeGroupVersion.WithResource("queuepolicies"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Sqs().V1alpha1().QueuePolicies().Informer()}, nil

		// Group=ssm.awsoperator.io, Version=v1alpha1
	case ssmv1alpha1.SchemeGroupVersion.WithResource("associations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ssm().V1alpha1().Associations().Informer()}, nil
	case ssmv1alpha1.SchemeGroupVersion.WithResource("documents"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ssm().V1alpha1().Documents().Informer()}, nil
	case ssmv1alpha1.SchemeGroupVersion.WithResource("maintenancewindows"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ssm().V1alpha1().MaintenanceWindows().Informer()}, nil
	case ssmv1alpha1.SchemeGroupVersion.WithResource("maintenancewindowtargets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ssm().V1alpha1().MaintenanceWindowTargets().Informer()}, nil
	case ssmv1alpha1.SchemeGroupVersion.WithResource("maintenancewindowtasks"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ssm().V1alpha1().MaintenanceWindowTasks().Informer()}, nil
	case ssmv1alpha1.SchemeGroupVersion.WithResource("parameters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ssm().V1alpha1().Parameters().Informer()}, nil
	case ssmv1alpha1.SchemeGroupVersion.WithResource("patchbaselines"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ssm().V1alpha1().PatchBaselines().Informer()}, nil
	case ssmv1alpha1.SchemeGroupVersion.WithResource("resourcedatasyncs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ssm().V1alpha1().ResourceDataSyncs().Informer()}, nil

		// Group=stepfunctions.awsoperator.io, Version=v1alpha1
	case stepfunctionsv1alpha1.SchemeGroupVersion.WithResource("activities"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Stepfunctions().V1alpha1().Activities().Informer()}, nil
	case stepfunctionsv1alpha1.SchemeGroupVersion.WithResource("statemachines"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Stepfunctions().V1alpha1().StateMachines().Informer()}, nil

		// Group=transfer.awsoperator.io, Version=v1alpha1
	case transferv1alpha1.SchemeGroupVersion.WithResource("servers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Transfer().V1alpha1().Servers().Informer()}, nil
	case transferv1alpha1.SchemeGroupVersion.WithResource("users"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Transfer().V1alpha1().Users().Informer()}, nil

		// Group=waf.awsoperator.io, Version=v1alpha1
	case wafv1alpha1.SchemeGroupVersion.WithResource("bytematchsets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Waf().V1alpha1().ByteMatchSets().Informer()}, nil
	case wafv1alpha1.SchemeGroupVersion.WithResource("ipsets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Waf().V1alpha1().IPSets().Informer()}, nil
	case wafv1alpha1.SchemeGroupVersion.WithResource("rules"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Waf().V1alpha1().Rules().Informer()}, nil
	case wafv1alpha1.SchemeGroupVersion.WithResource("sizeconstraintsets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Waf().V1alpha1().SizeConstraintSets().Informer()}, nil
	case wafv1alpha1.SchemeGroupVersion.WithResource("sqlinjectionmatchsets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Waf().V1alpha1().SqlInjectionMatchSets().Informer()}, nil
	case wafv1alpha1.SchemeGroupVersion.WithResource("webacls"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Waf().V1alpha1().WebACLs().Informer()}, nil
	case wafv1alpha1.SchemeGroupVersion.WithResource("xssmatchsets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Waf().V1alpha1().XssMatchSets().Informer()}, nil

		// Group=wafregional.awsoperator.io, Version=v1alpha1
	case wafregionalv1alpha1.SchemeGroupVersion.WithResource("bytematchsets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Wafregional().V1alpha1().ByteMatchSets().Informer()}, nil
	case wafregionalv1alpha1.SchemeGroupVersion.WithResource("geomatchsets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Wafregional().V1alpha1().GeoMatchSets().Informer()}, nil
	case wafregionalv1alpha1.SchemeGroupVersion.WithResource("ipsets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Wafregional().V1alpha1().IPSets().Informer()}, nil
	case wafregionalv1alpha1.SchemeGroupVersion.WithResource("ratebasedrules"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Wafregional().V1alpha1().RateBasedRules().Informer()}, nil
	case wafregionalv1alpha1.SchemeGroupVersion.WithResource("regexpatternsets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Wafregional().V1alpha1().RegexPatternSets().Informer()}, nil
	case wafregionalv1alpha1.SchemeGroupVersion.WithResource("rules"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Wafregional().V1alpha1().Rules().Informer()}, nil
	case wafregionalv1alpha1.SchemeGroupVersion.WithResource("sizeconstraintsets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Wafregional().V1alpha1().SizeConstraintSets().Informer()}, nil
	case wafregionalv1alpha1.SchemeGroupVersion.WithResource("sqlinjectionmatchsets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Wafregional().V1alpha1().SqlInjectionMatchSets().Informer()}, nil
	case wafregionalv1alpha1.SchemeGroupVersion.WithResource("webacls"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Wafregional().V1alpha1().WebACLs().Informer()}, nil
	case wafregionalv1alpha1.SchemeGroupVersion.WithResource("webaclassociations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Wafregional().V1alpha1().WebACLAssociations().Informer()}, nil
	case wafregionalv1alpha1.SchemeGroupVersion.WithResource("xssmatchsets"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Wafregional().V1alpha1().XssMatchSets().Informer()}, nil

		// Group=workspaces.awsoperator.io, Version=v1alpha1
	case workspacesv1alpha1.SchemeGroupVersion.WithResource("workspaces"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Workspaces().V1alpha1().Workspaces().Informer()}, nil

	}

	return nil, fmt.Errorf("no informer found for %v", resource)
}
