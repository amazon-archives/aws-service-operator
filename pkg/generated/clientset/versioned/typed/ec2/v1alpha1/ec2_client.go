/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/ec2/v1alpha1"
	"awsoperator.io/pkg/generated/clientset/versioned/scheme"
	rest "k8s.io/client-go/rest"
)

type Ec2V1alpha1Interface interface {
	RESTClient() rest.Interface
	CapacityReservationsGetter
	CustomerGatewaysGetter
	DHCPOptionsesGetter
	EC2FleetsGetter
	EIPsGetter
	EIPAssociationsGetter
	EgressOnlyInternetGatewaysGetter
	FlowLogsGetter
	HostsGetter
	InstancesGetter
	InternetGatewaysGetter
	LaunchTemplatesGetter
	NatGatewaysGetter
	NetworkAclsGetter
	NetworkAclEntriesGetter
	NetworkInterfacesGetter
	NetworkInterfaceAttachmentsGetter
	NetworkInterfacePermissionsGetter
	PlacementGroupsGetter
	RoutesGetter
	RouteTablesGetter
	SecurityGroupsGetter
	SecurityGroupEgressesGetter
	SecurityGroupIngressesGetter
	SpotFleetsGetter
	SubnetsGetter
	SubnetCidrBlocksGetter
	SubnetNetworkAclAssociationsGetter
	SubnetRouteTableAssociationsGetter
	TransitGatewaysGetter
	TransitGatewayAttachmentsGetter
	TransitGatewayRoutesGetter
	TransitGatewayRouteTablesGetter
	TransitGatewayRouteTableAssociationsGetter
	TransitGatewayRouteTablePropagationsGetter
	VPCsGetter
	VPCCidrBlocksGetter
	VPCDHCPOptionsAssociationsGetter
	VPCEndpointsGetter
	VPCEndpointConnectionNotificationsGetter
	VPCEndpointServicesGetter
	VPCEndpointServicePermissionsesGetter
	VPCGatewayAttachmentsGetter
	VPCPeeringConnectionsGetter
	VPNConnectionsGetter
	VPNConnectionRoutesGetter
	VPNGatewaysGetter
	VPNGatewayRoutePropagationsGetter
	VolumesGetter
	VolumeAttachmentsGetter
}

// Ec2V1alpha1Client is used to interact with features provided by the ec2.awsoperator.io group.
type Ec2V1alpha1Client struct {
	restClient rest.Interface
}

func (c *Ec2V1alpha1Client) CapacityReservations(namespace string) CapacityReservationInterface {
	return newCapacityReservations(c, namespace)
}

func (c *Ec2V1alpha1Client) CustomerGateways(namespace string) CustomerGatewayInterface {
	return newCustomerGateways(c, namespace)
}

func (c *Ec2V1alpha1Client) DHCPOptionses(namespace string) DHCPOptionsInterface {
	return newDHCPOptionses(c, namespace)
}

func (c *Ec2V1alpha1Client) EC2Fleets(namespace string) EC2FleetInterface {
	return newEC2Fleets(c, namespace)
}

func (c *Ec2V1alpha1Client) EIPs(namespace string) EIPInterface {
	return newEIPs(c, namespace)
}

func (c *Ec2V1alpha1Client) EIPAssociations(namespace string) EIPAssociationInterface {
	return newEIPAssociations(c, namespace)
}

func (c *Ec2V1alpha1Client) EgressOnlyInternetGateways(namespace string) EgressOnlyInternetGatewayInterface {
	return newEgressOnlyInternetGateways(c, namespace)
}

func (c *Ec2V1alpha1Client) FlowLogs(namespace string) FlowLogInterface {
	return newFlowLogs(c, namespace)
}

func (c *Ec2V1alpha1Client) Hosts(namespace string) HostInterface {
	return newHosts(c, namespace)
}

func (c *Ec2V1alpha1Client) Instances(namespace string) InstanceInterface {
	return newInstances(c, namespace)
}

func (c *Ec2V1alpha1Client) InternetGateways(namespace string) InternetGatewayInterface {
	return newInternetGateways(c, namespace)
}

func (c *Ec2V1alpha1Client) LaunchTemplates(namespace string) LaunchTemplateInterface {
	return newLaunchTemplates(c, namespace)
}

func (c *Ec2V1alpha1Client) NatGateways(namespace string) NatGatewayInterface {
	return newNatGateways(c, namespace)
}

func (c *Ec2V1alpha1Client) NetworkAcls(namespace string) NetworkAclInterface {
	return newNetworkAcls(c, namespace)
}

func (c *Ec2V1alpha1Client) NetworkAclEntries(namespace string) NetworkAclEntryInterface {
	return newNetworkAclEntries(c, namespace)
}

func (c *Ec2V1alpha1Client) NetworkInterfaces(namespace string) NetworkInterfaceInterface {
	return newNetworkInterfaces(c, namespace)
}

func (c *Ec2V1alpha1Client) NetworkInterfaceAttachments(namespace string) NetworkInterfaceAttachmentInterface {
	return newNetworkInterfaceAttachments(c, namespace)
}

func (c *Ec2V1alpha1Client) NetworkInterfacePermissions(namespace string) NetworkInterfacePermissionInterface {
	return newNetworkInterfacePermissions(c, namespace)
}

func (c *Ec2V1alpha1Client) PlacementGroups(namespace string) PlacementGroupInterface {
	return newPlacementGroups(c, namespace)
}

func (c *Ec2V1alpha1Client) Routes(namespace string) RouteInterface {
	return newRoutes(c, namespace)
}

func (c *Ec2V1alpha1Client) RouteTables(namespace string) RouteTableInterface {
	return newRouteTables(c, namespace)
}

func (c *Ec2V1alpha1Client) SecurityGroups(namespace string) SecurityGroupInterface {
	return newSecurityGroups(c, namespace)
}

func (c *Ec2V1alpha1Client) SecurityGroupEgresses(namespace string) SecurityGroupEgressInterface {
	return newSecurityGroupEgresses(c, namespace)
}

func (c *Ec2V1alpha1Client) SecurityGroupIngresses(namespace string) SecurityGroupIngressInterface {
	return newSecurityGroupIngresses(c, namespace)
}

func (c *Ec2V1alpha1Client) SpotFleets(namespace string) SpotFleetInterface {
	return newSpotFleets(c, namespace)
}

func (c *Ec2V1alpha1Client) Subnets(namespace string) SubnetInterface {
	return newSubnets(c, namespace)
}

func (c *Ec2V1alpha1Client) SubnetCidrBlocks(namespace string) SubnetCidrBlockInterface {
	return newSubnetCidrBlocks(c, namespace)
}

func (c *Ec2V1alpha1Client) SubnetNetworkAclAssociations(namespace string) SubnetNetworkAclAssociationInterface {
	return newSubnetNetworkAclAssociations(c, namespace)
}

func (c *Ec2V1alpha1Client) SubnetRouteTableAssociations(namespace string) SubnetRouteTableAssociationInterface {
	return newSubnetRouteTableAssociations(c, namespace)
}

func (c *Ec2V1alpha1Client) TransitGateways(namespace string) TransitGatewayInterface {
	return newTransitGateways(c, namespace)
}

func (c *Ec2V1alpha1Client) TransitGatewayAttachments(namespace string) TransitGatewayAttachmentInterface {
	return newTransitGatewayAttachments(c, namespace)
}

func (c *Ec2V1alpha1Client) TransitGatewayRoutes(namespace string) TransitGatewayRouteInterface {
	return newTransitGatewayRoutes(c, namespace)
}

func (c *Ec2V1alpha1Client) TransitGatewayRouteTables(namespace string) TransitGatewayRouteTableInterface {
	return newTransitGatewayRouteTables(c, namespace)
}

func (c *Ec2V1alpha1Client) TransitGatewayRouteTableAssociations(namespace string) TransitGatewayRouteTableAssociationInterface {
	return newTransitGatewayRouteTableAssociations(c, namespace)
}

func (c *Ec2V1alpha1Client) TransitGatewayRouteTablePropagations(namespace string) TransitGatewayRouteTablePropagationInterface {
	return newTransitGatewayRouteTablePropagations(c, namespace)
}

func (c *Ec2V1alpha1Client) VPCs(namespace string) VPCInterface {
	return newVPCs(c, namespace)
}

func (c *Ec2V1alpha1Client) VPCCidrBlocks(namespace string) VPCCidrBlockInterface {
	return newVPCCidrBlocks(c, namespace)
}

func (c *Ec2V1alpha1Client) VPCDHCPOptionsAssociations(namespace string) VPCDHCPOptionsAssociationInterface {
	return newVPCDHCPOptionsAssociations(c, namespace)
}

func (c *Ec2V1alpha1Client) VPCEndpoints(namespace string) VPCEndpointInterface {
	return newVPCEndpoints(c, namespace)
}

func (c *Ec2V1alpha1Client) VPCEndpointConnectionNotifications(namespace string) VPCEndpointConnectionNotificationInterface {
	return newVPCEndpointConnectionNotifications(c, namespace)
}

func (c *Ec2V1alpha1Client) VPCEndpointServices(namespace string) VPCEndpointServiceInterface {
	return newVPCEndpointServices(c, namespace)
}

func (c *Ec2V1alpha1Client) VPCEndpointServicePermissionses(namespace string) VPCEndpointServicePermissionsInterface {
	return newVPCEndpointServicePermissionses(c, namespace)
}

func (c *Ec2V1alpha1Client) VPCGatewayAttachments(namespace string) VPCGatewayAttachmentInterface {
	return newVPCGatewayAttachments(c, namespace)
}

func (c *Ec2V1alpha1Client) VPCPeeringConnections(namespace string) VPCPeeringConnectionInterface {
	return newVPCPeeringConnections(c, namespace)
}

func (c *Ec2V1alpha1Client) VPNConnections(namespace string) VPNConnectionInterface {
	return newVPNConnections(c, namespace)
}

func (c *Ec2V1alpha1Client) VPNConnectionRoutes(namespace string) VPNConnectionRouteInterface {
	return newVPNConnectionRoutes(c, namespace)
}

func (c *Ec2V1alpha1Client) VPNGateways(namespace string) VPNGatewayInterface {
	return newVPNGateways(c, namespace)
}

func (c *Ec2V1alpha1Client) VPNGatewayRoutePropagations(namespace string) VPNGatewayRoutePropagationInterface {
	return newVPNGatewayRoutePropagations(c, namespace)
}

func (c *Ec2V1alpha1Client) Volumes(namespace string) VolumeInterface {
	return newVolumes(c, namespace)
}

func (c *Ec2V1alpha1Client) VolumeAttachments(namespace string) VolumeAttachmentInterface {
	return newVolumeAttachments(c, namespace)
}

// NewForConfig creates a new Ec2V1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*Ec2V1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &Ec2V1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new Ec2V1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Ec2V1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new Ec2V1alpha1Client for the given RESTClient.
func New(c rest.Interface) *Ec2V1alpha1Client {
	return &Ec2V1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *Ec2V1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
