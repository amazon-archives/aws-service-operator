/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/apigateway/v1alpha1"
	"awsoperator.io/pkg/generated/clientset/versioned/scheme"
	rest "k8s.io/client-go/rest"
)

type ApigatewayV1alpha1Interface interface {
	RESTClient() rest.Interface
	AccountsGetter
	ApiGatewayResourcesGetter
	ApiKeysGetter
	AuthorizersGetter
	BasePathMappingsGetter
	ClientCertificatesGetter
	DeploymentsGetter
	DocumentationPartsGetter
	DocumentationVersionsGetter
	DomainNamesGetter
	GatewayResponsesGetter
	MethodsGetter
	ModelsGetter
	RequestValidatorsGetter
	RestApisGetter
	StagesGetter
	UsagePlansGetter
	UsagePlanKeysGetter
	VpcLinksGetter
}

// ApigatewayV1alpha1Client is used to interact with features provided by the apigateway.awsoperator.io group.
type ApigatewayV1alpha1Client struct {
	restClient rest.Interface
}

func (c *ApigatewayV1alpha1Client) Accounts(namespace string) AccountInterface {
	return newAccounts(c, namespace)
}

func (c *ApigatewayV1alpha1Client) ApiGatewayResources(namespace string) ApiGatewayResourceInterface {
	return newApiGatewayResources(c, namespace)
}

func (c *ApigatewayV1alpha1Client) ApiKeys(namespace string) ApiKeyInterface {
	return newApiKeys(c, namespace)
}

func (c *ApigatewayV1alpha1Client) Authorizers(namespace string) AuthorizerInterface {
	return newAuthorizers(c, namespace)
}

func (c *ApigatewayV1alpha1Client) BasePathMappings(namespace string) BasePathMappingInterface {
	return newBasePathMappings(c, namespace)
}

func (c *ApigatewayV1alpha1Client) ClientCertificates(namespace string) ClientCertificateInterface {
	return newClientCertificates(c, namespace)
}

func (c *ApigatewayV1alpha1Client) Deployments(namespace string) DeploymentInterface {
	return newDeployments(c, namespace)
}

func (c *ApigatewayV1alpha1Client) DocumentationParts(namespace string) DocumentationPartInterface {
	return newDocumentationParts(c, namespace)
}

func (c *ApigatewayV1alpha1Client) DocumentationVersions(namespace string) DocumentationVersionInterface {
	return newDocumentationVersions(c, namespace)
}

func (c *ApigatewayV1alpha1Client) DomainNames(namespace string) DomainNameInterface {
	return newDomainNames(c, namespace)
}

func (c *ApigatewayV1alpha1Client) GatewayResponses(namespace string) GatewayResponseInterface {
	return newGatewayResponses(c, namespace)
}

func (c *ApigatewayV1alpha1Client) Methods(namespace string) MethodInterface {
	return newMethods(c, namespace)
}

func (c *ApigatewayV1alpha1Client) Models(namespace string) ModelInterface {
	return newModels(c, namespace)
}

func (c *ApigatewayV1alpha1Client) RequestValidators(namespace string) RequestValidatorInterface {
	return newRequestValidators(c, namespace)
}

func (c *ApigatewayV1alpha1Client) RestApis(namespace string) RestApiInterface {
	return newRestApis(c, namespace)
}

func (c *ApigatewayV1alpha1Client) Stages(namespace string) StageInterface {
	return newStages(c, namespace)
}

func (c *ApigatewayV1alpha1Client) UsagePlans(namespace string) UsagePlanInterface {
	return newUsagePlans(c, namespace)
}

func (c *ApigatewayV1alpha1Client) UsagePlanKeys(namespace string) UsagePlanKeyInterface {
	return newUsagePlanKeys(c, namespace)
}

func (c *ApigatewayV1alpha1Client) VpcLinks(namespace string) VpcLinkInterface {
	return newVpcLinks(c, namespace)
}

// NewForConfig creates a new ApigatewayV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*ApigatewayV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &ApigatewayV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new ApigatewayV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *ApigatewayV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new ApigatewayV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *ApigatewayV1alpha1Client {
	return &ApigatewayV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *ApigatewayV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
