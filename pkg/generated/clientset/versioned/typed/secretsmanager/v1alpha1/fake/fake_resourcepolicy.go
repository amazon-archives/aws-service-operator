/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "awsoperator.io/pkg/apis/secretsmanager/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeResourcePolicies implements ResourcePolicyInterface
type FakeResourcePolicies struct {
	Fake *FakeSecretsmanagerV1alpha1
	ns   string
}

var resourcepoliciesResource = schema.GroupVersionResource{Group: "secretsmanager.awsoperator.io", Version: "v1alpha1", Resource: "resourcepolicies"}

var resourcepoliciesKind = schema.GroupVersionKind{Group: "secretsmanager.awsoperator.io", Version: "v1alpha1", Kind: "ResourcePolicy"}

// Get takes name of the resourcePolicy, and returns the corresponding resourcePolicy object, and an error if there is any.
func (c *FakeResourcePolicies) Get(name string, options v1.GetOptions) (result *v1alpha1.ResourcePolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(resourcepoliciesResource, c.ns, name), &v1alpha1.ResourcePolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ResourcePolicy), err
}

// List takes label and field selectors, and returns the list of ResourcePolicies that match those selectors.
func (c *FakeResourcePolicies) List(opts v1.ListOptions) (result *v1alpha1.ResourcePolicyList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(resourcepoliciesResource, resourcepoliciesKind, c.ns, opts), &v1alpha1.ResourcePolicyList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.ResourcePolicyList{ListMeta: obj.(*v1alpha1.ResourcePolicyList).ListMeta}
	for _, item := range obj.(*v1alpha1.ResourcePolicyList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested resourcePolicies.
func (c *FakeResourcePolicies) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(resourcepoliciesResource, c.ns, opts))

}

// Create takes the representation of a resourcePolicy and creates it.  Returns the server's representation of the resourcePolicy, and an error, if there is any.
func (c *FakeResourcePolicies) Create(resourcePolicy *v1alpha1.ResourcePolicy) (result *v1alpha1.ResourcePolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(resourcepoliciesResource, c.ns, resourcePolicy), &v1alpha1.ResourcePolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ResourcePolicy), err
}

// Update takes the representation of a resourcePolicy and updates it. Returns the server's representation of the resourcePolicy, and an error, if there is any.
func (c *FakeResourcePolicies) Update(resourcePolicy *v1alpha1.ResourcePolicy) (result *v1alpha1.ResourcePolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(resourcepoliciesResource, c.ns, resourcePolicy), &v1alpha1.ResourcePolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ResourcePolicy), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeResourcePolicies) UpdateStatus(resourcePolicy *v1alpha1.ResourcePolicy) (*v1alpha1.ResourcePolicy, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(resourcepoliciesResource, "status", c.ns, resourcePolicy), &v1alpha1.ResourcePolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ResourcePolicy), err
}

// Delete takes name of the resourcePolicy and deletes it. Returns an error if one occurs.
func (c *FakeResourcePolicies) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(resourcepoliciesResource, c.ns, name), &v1alpha1.ResourcePolicy{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeResourcePolicies) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(resourcepoliciesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.ResourcePolicyList{})
	return err
}

// Patch applies the patch and returns the patched resourcePolicy.
func (c *FakeResourcePolicies) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ResourcePolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(resourcepoliciesResource, c.ns, name, pt, data, subresources...), &v1alpha1.ResourcePolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ResourcePolicy), err
}
