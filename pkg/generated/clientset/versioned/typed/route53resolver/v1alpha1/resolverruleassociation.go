/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1alpha1 "awsoperator.io/pkg/apis/route53resolver/v1alpha1"
	scheme "awsoperator.io/pkg/generated/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ResolverRuleAssociationsGetter has a method to return a ResolverRuleAssociationInterface.
// A group's client should implement this interface.
type ResolverRuleAssociationsGetter interface {
	ResolverRuleAssociations(namespace string) ResolverRuleAssociationInterface
}

// ResolverRuleAssociationInterface has methods to work with ResolverRuleAssociation resources.
type ResolverRuleAssociationInterface interface {
	Create(*v1alpha1.ResolverRuleAssociation) (*v1alpha1.ResolverRuleAssociation, error)
	Update(*v1alpha1.ResolverRuleAssociation) (*v1alpha1.ResolverRuleAssociation, error)
	UpdateStatus(*v1alpha1.ResolverRuleAssociation) (*v1alpha1.ResolverRuleAssociation, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.ResolverRuleAssociation, error)
	List(opts v1.ListOptions) (*v1alpha1.ResolverRuleAssociationList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ResolverRuleAssociation, err error)
	ResolverRuleAssociationExpansion
}

// resolverRuleAssociations implements ResolverRuleAssociationInterface
type resolverRuleAssociations struct {
	client rest.Interface
	ns     string
}

// newResolverRuleAssociations returns a ResolverRuleAssociations
func newResolverRuleAssociations(c *Route53resolverV1alpha1Client, namespace string) *resolverRuleAssociations {
	return &resolverRuleAssociations{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the resolverRuleAssociation, and returns the corresponding resolverRuleAssociation object, and an error if there is any.
func (c *resolverRuleAssociations) Get(name string, options v1.GetOptions) (result *v1alpha1.ResolverRuleAssociation, err error) {
	result = &v1alpha1.ResolverRuleAssociation{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("resolverruleassociations").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ResolverRuleAssociations that match those selectors.
func (c *resolverRuleAssociations) List(opts v1.ListOptions) (result *v1alpha1.ResolverRuleAssociationList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.ResolverRuleAssociationList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("resolverruleassociations").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested resolverRuleAssociations.
func (c *resolverRuleAssociations) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("resolverruleassociations").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a resolverRuleAssociation and creates it.  Returns the server's representation of the resolverRuleAssociation, and an error, if there is any.
func (c *resolverRuleAssociations) Create(resolverRuleAssociation *v1alpha1.ResolverRuleAssociation) (result *v1alpha1.ResolverRuleAssociation, err error) {
	result = &v1alpha1.ResolverRuleAssociation{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("resolverruleassociations").
		Body(resolverRuleAssociation).
		Do().
		Into(result)
	return
}

// Update takes the representation of a resolverRuleAssociation and updates it. Returns the server's representation of the resolverRuleAssociation, and an error, if there is any.
func (c *resolverRuleAssociations) Update(resolverRuleAssociation *v1alpha1.ResolverRuleAssociation) (result *v1alpha1.ResolverRuleAssociation, err error) {
	result = &v1alpha1.ResolverRuleAssociation{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("resolverruleassociations").
		Name(resolverRuleAssociation.Name).
		Body(resolverRuleAssociation).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *resolverRuleAssociations) UpdateStatus(resolverRuleAssociation *v1alpha1.ResolverRuleAssociation) (result *v1alpha1.ResolverRuleAssociation, err error) {
	result = &v1alpha1.ResolverRuleAssociation{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("resolverruleassociations").
		Name(resolverRuleAssociation.Name).
		SubResource("status").
		Body(resolverRuleAssociation).
		Do().
		Into(result)
	return
}

// Delete takes name of the resolverRuleAssociation and deletes it. Returns an error if one occurs.
func (c *resolverRuleAssociations) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("resolverruleassociations").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *resolverRuleAssociations) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("resolverruleassociations").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched resolverRuleAssociation.
func (c *resolverRuleAssociations) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ResolverRuleAssociation, err error) {
	result = &v1alpha1.ResolverRuleAssociation{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("resolverruleassociations").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
