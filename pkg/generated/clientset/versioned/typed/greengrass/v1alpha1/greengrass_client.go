/*
Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License"). You may
not use this file except in compliance with the License. A copy of the
License is located at

     http://aws.amazon.com/apache2.0/

or in the "license" file accompanying this file. This file is distributed
on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "awsoperator.io/pkg/apis/greengrass/v1alpha1"
	"awsoperator.io/pkg/generated/clientset/versioned/scheme"
	rest "k8s.io/client-go/rest"
)

type GreengrassV1alpha1Interface interface {
	RESTClient() rest.Interface
	ConnectorDefinitionsGetter
	ConnectorDefinitionVersionsGetter
	CoreDefinitionsGetter
	CoreDefinitionVersionsGetter
	DeviceDefinitionsGetter
	DeviceDefinitionVersionsGetter
	FunctionDefinitionsGetter
	FunctionDefinitionVersionsGetter
	GroupsGetter
	GroupVersionsGetter
	LoggerDefinitionsGetter
	LoggerDefinitionVersionsGetter
	ResourceDefinitionsGetter
	ResourceDefinitionVersionsGetter
	SubscriptionDefinitionsGetter
	SubscriptionDefinitionVersionsGetter
}

// GreengrassV1alpha1Client is used to interact with features provided by the greengrass.awsoperator.io group.
type GreengrassV1alpha1Client struct {
	restClient rest.Interface
}

func (c *GreengrassV1alpha1Client) ConnectorDefinitions(namespace string) ConnectorDefinitionInterface {
	return newConnectorDefinitions(c, namespace)
}

func (c *GreengrassV1alpha1Client) ConnectorDefinitionVersions(namespace string) ConnectorDefinitionVersionInterface {
	return newConnectorDefinitionVersions(c, namespace)
}

func (c *GreengrassV1alpha1Client) CoreDefinitions(namespace string) CoreDefinitionInterface {
	return newCoreDefinitions(c, namespace)
}

func (c *GreengrassV1alpha1Client) CoreDefinitionVersions(namespace string) CoreDefinitionVersionInterface {
	return newCoreDefinitionVersions(c, namespace)
}

func (c *GreengrassV1alpha1Client) DeviceDefinitions(namespace string) DeviceDefinitionInterface {
	return newDeviceDefinitions(c, namespace)
}

func (c *GreengrassV1alpha1Client) DeviceDefinitionVersions(namespace string) DeviceDefinitionVersionInterface {
	return newDeviceDefinitionVersions(c, namespace)
}

func (c *GreengrassV1alpha1Client) FunctionDefinitions(namespace string) FunctionDefinitionInterface {
	return newFunctionDefinitions(c, namespace)
}

func (c *GreengrassV1alpha1Client) FunctionDefinitionVersions(namespace string) FunctionDefinitionVersionInterface {
	return newFunctionDefinitionVersions(c, namespace)
}

func (c *GreengrassV1alpha1Client) Groups(namespace string) GroupInterface {
	return newGroups(c, namespace)
}

func (c *GreengrassV1alpha1Client) GroupVersions(namespace string) GroupVersionInterface {
	return newGroupVersions(c, namespace)
}

func (c *GreengrassV1alpha1Client) LoggerDefinitions(namespace string) LoggerDefinitionInterface {
	return newLoggerDefinitions(c, namespace)
}

func (c *GreengrassV1alpha1Client) LoggerDefinitionVersions(namespace string) LoggerDefinitionVersionInterface {
	return newLoggerDefinitionVersions(c, namespace)
}

func (c *GreengrassV1alpha1Client) ResourceDefinitions(namespace string) ResourceDefinitionInterface {
	return newResourceDefinitions(c, namespace)
}

func (c *GreengrassV1alpha1Client) ResourceDefinitionVersions(namespace string) ResourceDefinitionVersionInterface {
	return newResourceDefinitionVersions(c, namespace)
}

func (c *GreengrassV1alpha1Client) SubscriptionDefinitions(namespace string) SubscriptionDefinitionInterface {
	return newSubscriptionDefinitions(c, namespace)
}

func (c *GreengrassV1alpha1Client) SubscriptionDefinitionVersions(namespace string) SubscriptionDefinitionVersionInterface {
	return newSubscriptionDefinitionVersions(c, namespace)
}

// NewForConfig creates a new GreengrassV1alpha1Client for the given config.
func NewForConfig(c *rest.Config) (*GreengrassV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &GreengrassV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new GreengrassV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *GreengrassV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new GreengrassV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *GreengrassV1alpha1Client {
	return &GreengrassV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *GreengrassV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
