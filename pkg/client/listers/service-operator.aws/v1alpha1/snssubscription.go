/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/awslabs/aws-service-operator/pkg/apis/service-operator.aws/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SNSSubscriptionLister helps list SNSSubscriptions.
type SNSSubscriptionLister interface {
	// List lists all SNSSubscriptions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SNSSubscription, err error)
	// SNSSubscriptions returns an object that can list and get SNSSubscriptions.
	SNSSubscriptions(namespace string) SNSSubscriptionNamespaceLister
	SNSSubscriptionListerExpansion
}

// sNSSubscriptionLister implements the SNSSubscriptionLister interface.
type sNSSubscriptionLister struct {
	indexer cache.Indexer
}

// NewSNSSubscriptionLister returns a new SNSSubscriptionLister.
func NewSNSSubscriptionLister(indexer cache.Indexer) SNSSubscriptionLister {
	return &sNSSubscriptionLister{indexer: indexer}
}

// List lists all SNSSubscriptions in the indexer.
func (s *sNSSubscriptionLister) List(selector labels.Selector) (ret []*v1alpha1.SNSSubscription, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SNSSubscription))
	})
	return ret, err
}

// SNSSubscriptions returns an object that can list and get SNSSubscriptions.
func (s *sNSSubscriptionLister) SNSSubscriptions(namespace string) SNSSubscriptionNamespaceLister {
	return sNSSubscriptionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SNSSubscriptionNamespaceLister helps list and get SNSSubscriptions.
type SNSSubscriptionNamespaceLister interface {
	// List lists all SNSSubscriptions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SNSSubscription, err error)
	// Get retrieves the SNSSubscription from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SNSSubscription, error)
	SNSSubscriptionNamespaceListerExpansion
}

// sNSSubscriptionNamespaceLister implements the SNSSubscriptionNamespaceLister
// interface.
type sNSSubscriptionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SNSSubscriptions in the indexer for a given namespace.
func (s sNSSubscriptionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SNSSubscription, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SNSSubscription))
	})
	return ret, err
}

// Get retrieves the SNSSubscription from the indexer for a given namespace and name.
func (s sNSSubscriptionNamespaceLister) Get(name string) (*v1alpha1.SNSSubscription, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("snssubscription"), name)
	}
	return obj.(*v1alpha1.SNSSubscription), nil
}
