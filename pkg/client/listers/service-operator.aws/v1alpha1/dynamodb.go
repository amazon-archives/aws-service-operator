/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/awslabs/aws-service-operator/pkg/apis/service-operator.aws/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DynamoDBLister helps list DynamoDBs.
type DynamoDBLister interface {
	// List lists all DynamoDBs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DynamoDB, err error)
	// DynamoDBs returns an object that can list and get DynamoDBs.
	DynamoDBs(namespace string) DynamoDBNamespaceLister
	DynamoDBListerExpansion
}

// dynamoDBLister implements the DynamoDBLister interface.
type dynamoDBLister struct {
	indexer cache.Indexer
}

// NewDynamoDBLister returns a new DynamoDBLister.
func NewDynamoDBLister(indexer cache.Indexer) DynamoDBLister {
	return &dynamoDBLister{indexer: indexer}
}

// List lists all DynamoDBs in the indexer.
func (s *dynamoDBLister) List(selector labels.Selector) (ret []*v1alpha1.DynamoDB, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DynamoDB))
	})
	return ret, err
}

// DynamoDBs returns an object that can list and get DynamoDBs.
func (s *dynamoDBLister) DynamoDBs(namespace string) DynamoDBNamespaceLister {
	return dynamoDBNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DynamoDBNamespaceLister helps list and get DynamoDBs.
type DynamoDBNamespaceLister interface {
	// List lists all DynamoDBs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DynamoDB, err error)
	// Get retrieves the DynamoDB from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DynamoDB, error)
	DynamoDBNamespaceListerExpansion
}

// dynamoDBNamespaceLister implements the DynamoDBNamespaceLister
// interface.
type dynamoDBNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DynamoDBs in the indexer for a given namespace.
func (s dynamoDBNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DynamoDB, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DynamoDB))
	})
	return ret, err
}

// Get retrieves the DynamoDB from the indexer for a given namespace and name.
func (s dynamoDBNamespaceLister) Get(name string) (*v1alpha1.DynamoDB, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dynamodb"), name)
	}
	return obj.(*v1alpha1.DynamoDB), nil
}
