/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/awslabs/aws-service-operator/pkg/apis/service-operator.aws/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SNSTopicLister helps list SNSTopics.
type SNSTopicLister interface {
	// List lists all SNSTopics in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SNSTopic, err error)
	// SNSTopics returns an object that can list and get SNSTopics.
	SNSTopics(namespace string) SNSTopicNamespaceLister
	SNSTopicListerExpansion
}

// sNSTopicLister implements the SNSTopicLister interface.
type sNSTopicLister struct {
	indexer cache.Indexer
}

// NewSNSTopicLister returns a new SNSTopicLister.
func NewSNSTopicLister(indexer cache.Indexer) SNSTopicLister {
	return &sNSTopicLister{indexer: indexer}
}

// List lists all SNSTopics in the indexer.
func (s *sNSTopicLister) List(selector labels.Selector) (ret []*v1alpha1.SNSTopic, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SNSTopic))
	})
	return ret, err
}

// SNSTopics returns an object that can list and get SNSTopics.
func (s *sNSTopicLister) SNSTopics(namespace string) SNSTopicNamespaceLister {
	return sNSTopicNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SNSTopicNamespaceLister helps list and get SNSTopics.
type SNSTopicNamespaceLister interface {
	// List lists all SNSTopics in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SNSTopic, err error)
	// Get retrieves the SNSTopic from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SNSTopic, error)
	SNSTopicNamespaceListerExpansion
}

// sNSTopicNamespaceLister implements the SNSTopicNamespaceLister
// interface.
type sNSTopicNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SNSTopics in the indexer for a given namespace.
func (s sNSTopicNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SNSTopic, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SNSTopic))
	})
	return ret, err
}

// Get retrieves the SNSTopic from the indexer for a given namespace and name.
func (s sNSTopicNamespaceLister) Get(name string) (*v1alpha1.SNSTopic, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("snstopic"), name)
	}
	return obj.(*v1alpha1.SNSTopic), nil
}
