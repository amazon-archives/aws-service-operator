/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/awslabs/aws-service-operator/pkg/apis/service-operator.aws/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ECRRepositoryLister helps list ECRRepositories.
type ECRRepositoryLister interface {
	// List lists all ECRRepositories in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ECRRepository, err error)
	// ECRRepositories returns an object that can list and get ECRRepositories.
	ECRRepositories(namespace string) ECRRepositoryNamespaceLister
	ECRRepositoryListerExpansion
}

// eCRRepositoryLister implements the ECRRepositoryLister interface.
type eCRRepositoryLister struct {
	indexer cache.Indexer
}

// NewECRRepositoryLister returns a new ECRRepositoryLister.
func NewECRRepositoryLister(indexer cache.Indexer) ECRRepositoryLister {
	return &eCRRepositoryLister{indexer: indexer}
}

// List lists all ECRRepositories in the indexer.
func (s *eCRRepositoryLister) List(selector labels.Selector) (ret []*v1alpha1.ECRRepository, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ECRRepository))
	})
	return ret, err
}

// ECRRepositories returns an object that can list and get ECRRepositories.
func (s *eCRRepositoryLister) ECRRepositories(namespace string) ECRRepositoryNamespaceLister {
	return eCRRepositoryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ECRRepositoryNamespaceLister helps list and get ECRRepositories.
type ECRRepositoryNamespaceLister interface {
	// List lists all ECRRepositories in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ECRRepository, err error)
	// Get retrieves the ECRRepository from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ECRRepository, error)
	ECRRepositoryNamespaceListerExpansion
}

// eCRRepositoryNamespaceLister implements the ECRRepositoryNamespaceLister
// interface.
type eCRRepositoryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ECRRepositories in the indexer for a given namespace.
func (s eCRRepositoryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ECRRepository, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ECRRepository))
	})
	return ret, err
}

// Get retrieves the ECRRepository from the indexer for a given namespace and name.
func (s eCRRepositoryNamespaceLister) Get(name string) (*v1alpha1.ECRRepository, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ecrrepository"), name)
	}
	return obj.(*v1alpha1.ECRRepository), nil
}
