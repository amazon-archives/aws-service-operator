/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/awslabs/aws-service-operator/pkg/apis/service-operator.aws/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// S3BucketLister helps list S3Buckets.
type S3BucketLister interface {
	// List lists all S3Buckets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.S3Bucket, err error)
	// S3Buckets returns an object that can list and get S3Buckets.
	S3Buckets(namespace string) S3BucketNamespaceLister
	S3BucketListerExpansion
}

// s3BucketLister implements the S3BucketLister interface.
type s3BucketLister struct {
	indexer cache.Indexer
}

// NewS3BucketLister returns a new S3BucketLister.
func NewS3BucketLister(indexer cache.Indexer) S3BucketLister {
	return &s3BucketLister{indexer: indexer}
}

// List lists all S3Buckets in the indexer.
func (s *s3BucketLister) List(selector labels.Selector) (ret []*v1alpha1.S3Bucket, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.S3Bucket))
	})
	return ret, err
}

// S3Buckets returns an object that can list and get S3Buckets.
func (s *s3BucketLister) S3Buckets(namespace string) S3BucketNamespaceLister {
	return s3BucketNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// S3BucketNamespaceLister helps list and get S3Buckets.
type S3BucketNamespaceLister interface {
	// List lists all S3Buckets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.S3Bucket, err error)
	// Get retrieves the S3Bucket from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.S3Bucket, error)
	S3BucketNamespaceListerExpansion
}

// s3BucketNamespaceLister implements the S3BucketNamespaceLister
// interface.
type s3BucketNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all S3Buckets in the indexer for a given namespace.
func (s s3BucketNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.S3Bucket, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.S3Bucket))
	})
	return ret, err
}

// Get retrieves the S3Bucket from the indexer for a given namespace and name.
func (s s3BucketNamespaceLister) Get(name string) (*v1alpha1.S3Bucket, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("s3bucket"), name)
	}
	return obj.(*v1alpha1.S3Bucket), nil
}
