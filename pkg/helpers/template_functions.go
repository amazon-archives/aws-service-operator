// >>>>>>> DO NOT EDIT THIS FILE <<<<<<<<<<
// This file is autogenerated via `aws-operator-codegen process`
// If you'd like the change anything about this file make edits to the .templ
// file in the pkg/codegen/assets directory.

package helpers

import (
	awsclient "github.com/awslabs/aws-service-operator/pkg/client/clientset/versioned/typed/service-operator.aws/v1alpha1"
	"github.com/awslabs/aws-service-operator/pkg/config"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// New Will return helpers to be passed into the templates
func New() Helpers {
	return Helpers{
		KubernetesResourceName:          KubernetesResourceName,
		GetCloudFormationTemplateByName: GetCloudFormationTemplateByName,
		GetDynamoDBByName:               GetDynamoDBByName,
		GetECRRepositoryByName:          GetECRRepositoryByName,
		GetS3BucketByName:               GetS3BucketByName,
		GetSNSSubscriptionByName:        GetSNSSubscriptionByName,
		GetSNSTopicByName:               GetSNSTopicByName,
		GetSQSQueueByName:               GetSQSQueueByName,
	}
}

// Helpers defines all the Helper functions that are exposed to the templates
type Helpers struct {
	KubernetesResourceName          func(string) string
	GetCloudFormationTemplateByName func(*config.Config, string, string) (interface{}, error)
	GetDynamoDBByName               func(*config.Config, string, string) (interface{}, error)
	GetECRRepositoryByName          func(*config.Config, string, string) (interface{}, error)
	GetS3BucketByName               func(*config.Config, string, string) (interface{}, error)
	GetSNSSubscriptionByName        func(*config.Config, string, string) (interface{}, error)
	GetSNSTopicByName               func(*config.Config, string, string) (interface{}, error)
	GetSQSQueueByName               func(*config.Config, string, string) (interface{}, error)
}

// GetCloudFormationTemplateByName will find the resource by name
func GetCloudFormationTemplateByName(config *config.Config, name string, namespace string) (interface{}, error) {
	logger := config.Logger
	clientSet, _ := awsclient.NewForConfig(config.RESTConfig)
	resource, err := clientSet.CloudFormationTemplates(namespace).Get(name, metav1.GetOptions{})
	if err != nil {
		logger.WithError(err).Error("error getting sns topic")
		return "", err
	}

	return resource, nil
}

// GetDynamoDBByName will find the resource by name
func GetDynamoDBByName(config *config.Config, name string, namespace string) (interface{}, error) {
	logger := config.Logger
	clientSet, _ := awsclient.NewForConfig(config.RESTConfig)
	resource, err := clientSet.DynamoDBs(namespace).Get(name, metav1.GetOptions{})
	if err != nil {
		logger.WithError(err).Error("error getting sns topic")
		return "", err
	}

	return resource, nil
}

// GetECRRepositoryByName will find the resource by name
func GetECRRepositoryByName(config *config.Config, name string, namespace string) (interface{}, error) {
	logger := config.Logger
	clientSet, _ := awsclient.NewForConfig(config.RESTConfig)
	resource, err := clientSet.ECRRepositories(namespace).Get(name, metav1.GetOptions{})
	if err != nil {
		logger.WithError(err).Error("error getting sns topic")
		return "", err
	}

	return resource, nil
}

// GetS3BucketByName will find the resource by name
func GetS3BucketByName(config *config.Config, name string, namespace string) (interface{}, error) {
	logger := config.Logger
	clientSet, _ := awsclient.NewForConfig(config.RESTConfig)
	resource, err := clientSet.S3Buckets(namespace).Get(name, metav1.GetOptions{})
	if err != nil {
		logger.WithError(err).Error("error getting sns topic")
		return "", err
	}

	return resource, nil
}

// GetSNSSubscriptionByName will find the resource by name
func GetSNSSubscriptionByName(config *config.Config, name string, namespace string) (interface{}, error) {
	logger := config.Logger
	clientSet, _ := awsclient.NewForConfig(config.RESTConfig)
	resource, err := clientSet.SNSSubscriptions(namespace).Get(name, metav1.GetOptions{})
	if err != nil {
		logger.WithError(err).Error("error getting sns topic")
		return "", err
	}

	return resource, nil
}

// GetSNSTopicByName will find the resource by name
func GetSNSTopicByName(config *config.Config, name string, namespace string) (interface{}, error) {
	logger := config.Logger
	clientSet, _ := awsclient.NewForConfig(config.RESTConfig)
	resource, err := clientSet.SNSTopics(namespace).Get(name, metav1.GetOptions{})
	if err != nil {
		logger.WithError(err).Error("error getting sns topic")
		return "", err
	}

	return resource, nil
}

// GetSQSQueueByName will find the resource by name
func GetSQSQueueByName(config *config.Config, name string, namespace string) (interface{}, error) {
	logger := config.Logger
	clientSet, _ := awsclient.NewForConfig(config.RESTConfig)
	resource, err := clientSet.SQSQueues(namespace).Get(name, metav1.GetOptions{})
	if err != nil {
		logger.WithError(err).Error("error getting sns topic")
		return "", err
	}

	return resource, nil
}
