// >>>>>>> DO NOT EDIT THIS FILE <<<<<<<<<<
// This file is autogenerated via `aws-operator-codegen process`
// If you'd like the change anything about this file make edits to the .templ
// file in the pkg/codegen/assets directory.

package eksnodegroup

import (
	"errors"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/cloudformation"
	awsV1alpha1 "github.com/awslabs/aws-service-operator/pkg/apis/service-operator.aws/v1alpha1"
	"github.com/awslabs/aws-service-operator/pkg/config"
	"github.com/awslabs/aws-service-operator/pkg/helpers"
)

// New generates a new object
func New(config config.Config, eksnodegroup *awsV1alpha1.EKSNodeGroup, topicARN string) *Cloudformation {
	return &Cloudformation{
		EKSNodeGroup: eksnodegroup,
		config:       config,
		topicARN:     topicARN,
	}
}

// Cloudformation defines the eksnodegroup cfts
type Cloudformation struct {
	config       config.Config
	EKSNodeGroup *awsV1alpha1.EKSNodeGroup
	topicARN     string
}

// StackName returns the name of the stack based on the aws-operator-config
func (s *Cloudformation) StackName() string {
	return helpers.StackName(s.config.ClusterName, "eksnodegroup", s.EKSNodeGroup.Name, s.EKSNodeGroup.Namespace)
}

// GetOutputs return the stack outputs from the DescribeStacks call
func (s *Cloudformation) GetOutputs() (map[string]string, error) {
	outputs := map[string]string{}
	sess := s.config.AWSSession
	svc := cloudformation.New(sess)

	stackInputs := cloudformation.DescribeStacksInput{
		StackName: aws.String(s.StackName()),
	}

	output, err := svc.DescribeStacks(&stackInputs)
	if err != nil {
		return nil, err
	}
	// Not sure if this is even possible
	if len(output.Stacks) != 1 {
		return nil, errors.New("no stacks returned with that stack name")
	}

	for _, out := range output.Stacks[0].Outputs {
		outputs[*out.OutputKey] = *out.OutputValue
	}

	return outputs, err
}

// CreateStack will create the stack with the supplied params
func (s *Cloudformation) CreateStack() (output *cloudformation.CreateStackOutput, err error) {
	sess := s.config.AWSSession
	svc := cloudformation.New(sess)

	cftemplate := helpers.GetCloudFormationTemplate(s.config, "eksnodegroup", s.EKSNodeGroup.Spec.CloudFormationTemplateName, s.EKSNodeGroup.Spec.CloudFormationTemplateNamespace)

	stackInputs := cloudformation.CreateStackInput{
		StackName:   aws.String(s.StackName()),
		TemplateURL: aws.String(cftemplate),
		NotificationARNs: []*string{
			aws.String(s.topicARN),
		},
		Capabilities: []*string{
			aws.String("CAPABILITY_IAM"),
		},
	}

	resourceName := helpers.CreateParam("ResourceName", s.EKSNodeGroup.Name)
	resourceVersion := helpers.CreateParam("ResourceVersion", s.EKSNodeGroup.ResourceVersion)
	namespace := helpers.CreateParam("Namespace", s.EKSNodeGroup.Namespace)
	clusterName := helpers.CreateParam("ClusterName", s.config.ClusterName)
	nodeGroupName := helpers.CreateParam("NodeGroupName", helpers.Stringify(s.EKSNodeGroup.Name))
	nodeimageIDTemp := "{{.Obj.Spec.Node.NodeImageId}}"
	nodeimageIDValue, err := helpers.Templatize(nodeimageIDTemp, helpers.Data{Obj: s.EKSNodeGroup, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	nodeimageID := helpers.CreateParam("NodeImageId", helpers.Stringify(nodeimageIDValue))
	nodekeyNameTemp := "{{.Obj.Spec.Node.KeyName}}"
	nodekeyNameValue, err := helpers.Templatize(nodekeyNameTemp, helpers.Data{Obj: s.EKSNodeGroup, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	nodekeyName := helpers.CreateParam("KeyName", helpers.Stringify(nodekeyNameValue))
	nodeinstanceTypeTemp := "{{.Obj.Spec.Node.NodeInstanceType}}"
	nodeinstanceTypeValue, err := helpers.Templatize(nodeinstanceTypeTemp, helpers.Data{Obj: s.EKSNodeGroup, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	nodeinstanceType := helpers.CreateParam("NodeInstanceType", helpers.Stringify(nodeinstanceTypeValue))
	nodevolumeSizeTemp := "{{.Obj.Spec.Node.NodeVolumeSize}}"
	nodevolumeSizeValue, err := helpers.Templatize(nodevolumeSizeTemp, helpers.Data{Obj: s.EKSNodeGroup, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	nodevolumeSize := helpers.CreateParam("NodeVolumeSize", helpers.Stringify(nodevolumeSizeValue))
	nodebootstrapArgumentsTemp := "{{.Obj.Spec.Node.BootstrapArguments}}"
	nodebootstrapArgumentsValue, err := helpers.Templatize(nodebootstrapArgumentsTemp, helpers.Data{Obj: s.EKSNodeGroup, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	nodebootstrapArguments := helpers.CreateParam("BootstrapArguments", helpers.Stringify(nodebootstrapArgumentsValue))
	autoScalingGroupminSizeTemp := "{{.Obj.Spec.AutoScalingGroup.NodeAutoScalingGroupMinSize}}"
	autoScalingGroupminSizeValue, err := helpers.Templatize(autoScalingGroupminSizeTemp, helpers.Data{Obj: s.EKSNodeGroup, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	autoScalingGroupminSize := helpers.CreateParam("NodeAutoScalingGroupMinSize", helpers.Stringify(autoScalingGroupminSizeValue))
	autoScalingGroupmaxSizeTemp := "{{.Obj.Spec.AutoScalingGroup.NodeAutoScalingGroupMaxSize}}"
	autoScalingGroupmaxSizeValue, err := helpers.Templatize(autoScalingGroupmaxSizeTemp, helpers.Data{Obj: s.EKSNodeGroup, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	autoScalingGroupmaxSize := helpers.CreateParam("NodeAutoScalingGroupMaxSize", helpers.Stringify(autoScalingGroupmaxSizeValue))
	autoScalingGroupdesiredCapacityTemp := "{{.Obj.Spec.AutoScalingGroup.NodeAutoScalingGroupDesiredCapacity}}"
	autoScalingGroupdesiredCapacityValue, err := helpers.Templatize(autoScalingGroupdesiredCapacityTemp, helpers.Data{Obj: s.EKSNodeGroup, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	autoScalingGroupdesiredCapacity := helpers.CreateParam("NodeAutoScalingGroupDesiredCapacity", helpers.Stringify(autoScalingGroupdesiredCapacityValue))
	networkingcontrolPlaneSecurityGroupTemp := "{{.Obj.Spec.Networking.ClusterControlPlaneSecurityGroup}}"
	networkingcontrolPlaneSecurityGroupValue, err := helpers.Templatize(networkingcontrolPlaneSecurityGroupTemp, helpers.Data{Obj: s.EKSNodeGroup, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	networkingcontrolPlaneSecurityGroup := helpers.CreateParam("ClusterControlPlaneSecurityGroup", helpers.Stringify(networkingcontrolPlaneSecurityGroupValue))
	networkingvpcIDTemp := "{{.Obj.Spec.Networking.VpcId}}"
	networkingvpcIDValue, err := helpers.Templatize(networkingvpcIDTemp, helpers.Data{Obj: s.EKSNodeGroup, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	networkingvpcID := helpers.CreateParam("VpcId", helpers.Stringify(networkingvpcIDValue))
	networkingsubnetsTemp := "{{.Obj.Spec.Networking.Subnets}}"
	networkingsubnetsValue, err := helpers.Templatize(networkingsubnetsTemp, helpers.Data{Obj: s.EKSNodeGroup, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	networkingsubnets := helpers.CreateParam("Subnets", helpers.Stringify(networkingsubnetsValue))

	parameters := []*cloudformation.Parameter{}
	parameters = append(parameters, resourceName)
	parameters = append(parameters, resourceVersion)
	parameters = append(parameters, namespace)
	parameters = append(parameters, clusterName)
	parameters = append(parameters, nodeGroupName)
	parameters = append(parameters, nodeimageID)
	parameters = append(parameters, nodekeyName)
	parameters = append(parameters, nodeinstanceType)
	parameters = append(parameters, nodevolumeSize)
	parameters = append(parameters, nodebootstrapArguments)
	parameters = append(parameters, autoScalingGroupminSize)
	parameters = append(parameters, autoScalingGroupmaxSize)
	parameters = append(parameters, autoScalingGroupdesiredCapacity)
	parameters = append(parameters, networkingcontrolPlaneSecurityGroup)
	parameters = append(parameters, networkingvpcID)
	parameters = append(parameters, networkingsubnets)

	stackInputs.SetParameters(parameters)

	resourceNameTag := helpers.CreateTag("ResourceName", s.EKSNodeGroup.Name)
	resourceVersionTag := helpers.CreateTag("ResourceVersion", s.EKSNodeGroup.ResourceVersion)
	namespaceTag := helpers.CreateTag("Namespace", s.EKSNodeGroup.Namespace)
	clusterNameTag := helpers.CreateTag("ClusterName", s.config.ClusterName)

	tags := []*cloudformation.Tag{}
	tags = append(tags, resourceNameTag)
	tags = append(tags, resourceVersionTag)
	tags = append(tags, namespaceTag)
	tags = append(tags, clusterNameTag)

	stackInputs.SetTags(tags)

	output, err = svc.CreateStack(&stackInputs)
	return
}

// UpdateStack will update the existing stack
func (s *Cloudformation) UpdateStack(updated *awsV1alpha1.EKSNodeGroup) (output *cloudformation.UpdateStackOutput, err error) {
	sess := s.config.AWSSession
	svc := cloudformation.New(sess)

	cftemplate := helpers.GetCloudFormationTemplate(s.config, "eksnodegroup", updated.Spec.CloudFormationTemplateName, updated.Spec.CloudFormationTemplateNamespace)

	stackInputs := cloudformation.UpdateStackInput{
		StackName:   aws.String(s.StackName()),
		TemplateURL: aws.String(cftemplate),
		NotificationARNs: []*string{
			aws.String(s.topicARN),
		},
		Capabilities: []*string{
			aws.String("CAPABILITY_IAM"),
		},
	}

	resourceName := helpers.CreateParam("ResourceName", s.EKSNodeGroup.Name)
	resourceVersion := helpers.CreateParam("ResourceVersion", s.EKSNodeGroup.ResourceVersion)
	namespace := helpers.CreateParam("Namespace", s.EKSNodeGroup.Namespace)
	clusterName := helpers.CreateParam("ClusterName", s.config.ClusterName)
	nodeGroupName := helpers.CreateParam("NodeGroupName", helpers.Stringify(s.EKSNodeGroup.Name))
	nodeimageIDTemp := "{{.Obj.Spec.Node.NodeImageId}}"
	nodeimageIDValue, err := helpers.Templatize(nodeimageIDTemp, helpers.Data{Obj: updated, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	nodeimageID := helpers.CreateParam("NodeImageId", helpers.Stringify(nodeimageIDValue))
	nodekeyNameTemp := "{{.Obj.Spec.Node.KeyName}}"
	nodekeyNameValue, err := helpers.Templatize(nodekeyNameTemp, helpers.Data{Obj: updated, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	nodekeyName := helpers.CreateParam("KeyName", helpers.Stringify(nodekeyNameValue))
	nodeinstanceTypeTemp := "{{.Obj.Spec.Node.NodeInstanceType}}"
	nodeinstanceTypeValue, err := helpers.Templatize(nodeinstanceTypeTemp, helpers.Data{Obj: updated, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	nodeinstanceType := helpers.CreateParam("NodeInstanceType", helpers.Stringify(nodeinstanceTypeValue))
	nodevolumeSizeTemp := "{{.Obj.Spec.Node.NodeVolumeSize}}"
	nodevolumeSizeValue, err := helpers.Templatize(nodevolumeSizeTemp, helpers.Data{Obj: updated, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	nodevolumeSize := helpers.CreateParam("NodeVolumeSize", helpers.Stringify(nodevolumeSizeValue))
	nodebootstrapArgumentsTemp := "{{.Obj.Spec.Node.BootstrapArguments}}"
	nodebootstrapArgumentsValue, err := helpers.Templatize(nodebootstrapArgumentsTemp, helpers.Data{Obj: updated, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	nodebootstrapArguments := helpers.CreateParam("BootstrapArguments", helpers.Stringify(nodebootstrapArgumentsValue))
	autoScalingGroupminSizeTemp := "{{.Obj.Spec.AutoScalingGroup.NodeAutoScalingGroupMinSize}}"
	autoScalingGroupminSizeValue, err := helpers.Templatize(autoScalingGroupminSizeTemp, helpers.Data{Obj: updated, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	autoScalingGroupminSize := helpers.CreateParam("NodeAutoScalingGroupMinSize", helpers.Stringify(autoScalingGroupminSizeValue))
	autoScalingGroupmaxSizeTemp := "{{.Obj.Spec.AutoScalingGroup.NodeAutoScalingGroupMaxSize}}"
	autoScalingGroupmaxSizeValue, err := helpers.Templatize(autoScalingGroupmaxSizeTemp, helpers.Data{Obj: updated, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	autoScalingGroupmaxSize := helpers.CreateParam("NodeAutoScalingGroupMaxSize", helpers.Stringify(autoScalingGroupmaxSizeValue))
	autoScalingGroupdesiredCapacityTemp := "{{.Obj.Spec.AutoScalingGroup.NodeAutoScalingGroupDesiredCapacity}}"
	autoScalingGroupdesiredCapacityValue, err := helpers.Templatize(autoScalingGroupdesiredCapacityTemp, helpers.Data{Obj: updated, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	autoScalingGroupdesiredCapacity := helpers.CreateParam("NodeAutoScalingGroupDesiredCapacity", helpers.Stringify(autoScalingGroupdesiredCapacityValue))
	networkingcontrolPlaneSecurityGroupTemp := "{{.Obj.Spec.Networking.ClusterControlPlaneSecurityGroup}}"
	networkingcontrolPlaneSecurityGroupValue, err := helpers.Templatize(networkingcontrolPlaneSecurityGroupTemp, helpers.Data{Obj: updated, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	networkingcontrolPlaneSecurityGroup := helpers.CreateParam("ClusterControlPlaneSecurityGroup", helpers.Stringify(networkingcontrolPlaneSecurityGroupValue))
	networkingvpcIDTemp := "{{.Obj.Spec.Networking.VpcId}}"
	networkingvpcIDValue, err := helpers.Templatize(networkingvpcIDTemp, helpers.Data{Obj: updated, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	networkingvpcID := helpers.CreateParam("VpcId", helpers.Stringify(networkingvpcIDValue))
	networkingsubnetsTemp := "{{.Obj.Spec.Networking.Subnets}}"
	networkingsubnetsValue, err := helpers.Templatize(networkingsubnetsTemp, helpers.Data{Obj: updated, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	networkingsubnets := helpers.CreateParam("Subnets", helpers.Stringify(networkingsubnetsValue))

	parameters := []*cloudformation.Parameter{}
	parameters = append(parameters, resourceName)
	parameters = append(parameters, resourceVersion)
	parameters = append(parameters, namespace)
	parameters = append(parameters, clusterName)
	parameters = append(parameters, nodeGroupName)
	parameters = append(parameters, nodeimageID)
	parameters = append(parameters, nodekeyName)
	parameters = append(parameters, nodeinstanceType)
	parameters = append(parameters, nodevolumeSize)
	parameters = append(parameters, nodebootstrapArguments)
	parameters = append(parameters, autoScalingGroupminSize)
	parameters = append(parameters, autoScalingGroupmaxSize)
	parameters = append(parameters, autoScalingGroupdesiredCapacity)
	parameters = append(parameters, networkingcontrolPlaneSecurityGroup)
	parameters = append(parameters, networkingvpcID)
	parameters = append(parameters, networkingsubnets)

	stackInputs.SetParameters(parameters)

	resourceNameTag := helpers.CreateTag("ResourceName", s.EKSNodeGroup.Name)
	resourceVersionTag := helpers.CreateTag("ResourceVersion", s.EKSNodeGroup.ResourceVersion)
	namespaceTag := helpers.CreateTag("Namespace", s.EKSNodeGroup.Namespace)
	clusterNameTag := helpers.CreateTag("ClusterName", s.config.ClusterName)

	tags := []*cloudformation.Tag{}
	tags = append(tags, resourceNameTag)
	tags = append(tags, resourceVersionTag)
	tags = append(tags, namespaceTag)
	tags = append(tags, clusterNameTag)

	stackInputs.SetTags(tags)

	output, err = svc.UpdateStack(&stackInputs)
	return
}

// DeleteStack will delete the stack
func (s *Cloudformation) DeleteStack() (err error) {
	sess := s.config.AWSSession
	svc := cloudformation.New(sess)

	stackInputs := cloudformation.DeleteStackInput{}
	stackInputs.SetStackName(s.StackName())

	_, err = svc.DeleteStack(&stackInputs)
	return
}

// WaitUntilStackDeleted will delete the stack
func (s *Cloudformation) WaitUntilStackDeleted() (err error) {
	sess := s.config.AWSSession
	svc := cloudformation.New(sess)

	stackInputs := cloudformation.DescribeStacksInput{
		StackName: aws.String(s.StackName()),
	}

	err = svc.WaitUntilStackDeleteComplete(&stackInputs)
	return
}
