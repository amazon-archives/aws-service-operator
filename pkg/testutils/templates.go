// Code generated by go-bindata.
// sources:
// assets/dynamodb.yaml
// DO NOT EDIT!

package testutils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dynamodbYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x51\x8b\x9b\x5c\x10\x7d\xf7\x57\x0c\xfb\x22\x7c\x20\x98\xe5\x5b\xe8\xfa\x66\x37\x2d\x81\xb4\x69\x88\xe9\x06\x5a\xf6\x61\xa2\x93\x78\x41\xef\x95\x71\x6e\xb3\x96\xfe\xf8\xe2\x35\x31\x86\x24\x34\x0b\xad\x6f\x9e\x39\x73\x3d\xe7\xce\x19\x83\x20\xf0\xe2\x55\xb2\xa4\xb2\x2a\x50\xe8\xa3\xe1\x12\xe5\x99\xb8\x56\x46\x47\xe0\xdf\x87\xa3\x30\x08\x1f\x83\xf0\xd1\xf7\xc6\x54\xa7\xac\x2a\xe9\x2a\xf1\x2a\x81\xa7\xc2\xd8\xac\x6b\x51\x46\xc3\xb8\xd1\x58\x9a\xf1\x7b\xdf\x9b\x23\x63\x49\x42\x5c\x47\x1e\xc0\x04\xeb\x7c\x4a\xcd\x87\x82\x4a\xd2\x32\xc3\x92\x5a\x14\xe0\xe4\xc0\x96\xb4\x6c\x2a\x82\x39\xab\x12\xb9\x99\x52\x03\x2d\xd5\x31\xdb\x42\x04\x89\xb0\xd2\x5b\x07\xc4\x45\x61\x76\x94\xcd\x51\x84\x58\x47\x70\xf7\x1d\x83\x9f\x71\xf0\x2d\x0c\x1e\x5f\xfe\xbb\x73\x94\xcf\x4a\x7f\x22\xbd\x95\x3c\x02\x7f\xe4\x77\x10\xbe\xf6\xd0\x7d\xf8\xff\xbb\x0e\x7d\x32\xba\x16\x46\xa5\xe5\x44\x50\x69\x6b\x81\xd4\x68\x41\xa5\xc1\xe8\xa2\x01\x2c\xaa\x1c\xb5\x2d\xd7\xc4\x2a\x85\x34\x47\xc6\xb4\xf5\x78\x66\xd1\xc9\xbd\xcd\x62\xfb\x7e\xd9\xe2\x98\x36\x68\x0b\x89\x20\xb9\xe2\x38\xf9\x35\x7b\xb9\xc9\xea\xe8\xcf\x3e\xd7\x04\xa4\x24\x27\x86\x04\x0c\xc3\xcc\x03\x58\x10\x66\x4f\x58\x61\xaa\xa4\xf9\xaa\x95\xd4\x17\x1c\xcd\xd9\xfc\x50\x6d\x54\x28\x03\x26\xcc\x40\x72\x36\x76\x9b\x57\x56\x06\xa6\x66\xee\xca\x4e\x4d\xf9\x0f\xfe\x41\xfa\x33\x16\x96\x06\x08\xbe\x1e\x90\x51\x18\x86\xe1\x4d\xe2\xd7\x24\x3b\x22\x0d\x0f\x80\x3a\x03\xd7\xe7\x01\xac\x58\x09\xbd\xc5\xc3\xae\x6d\x78\x83\x89\x51\xf8\xcf\x5d\x2c\xa8\x36\x96\x53\x72\xd2\xb3\xfd\x86\x2d\x71\x5d\xec\x13\xd6\xa9\x8b\x57\x49\x14\x1d\xf6\x2f\x8a\x5c\xdd\x95\xe7\x6c\x2a\x62\x51\xb4\xb7\x0e\x10\x8b\xb0\x5a\x5b\xa1\x31\x6d\x94\x56\xad\x82\xbe\x16\x1c\xab\xc7\x35\xed\x9e\x05\x6d\xa2\x0b\x9b\xdc\x33\xfa\xc6\x63\xf8\xaf\x36\xf6\xa1\x07\x98\x52\x93\xa4\x39\x95\xf8\x17\x24\x4c\xa9\xe9\x6e\x63\x12\x27\x93\x3d\x3a\x98\xee\xb2\x1f\xeb\xf1\xd0\x2b\x21\x1f\x7c\xef\x8c\xd1\x13\xae\xa5\x6b\xd0\x7c\x4e\xf1\xbe\x58\xa9\x6c\x47\x75\x53\x3a\x9a\xec\xf2\xe2\x0d\xda\x4f\xc6\x7d\x9e\x5c\x07\x83\xc6\x92\xc0\x6c\x40\x72\x02\x4d\xbb\xa2\x81\x94\x09\x85\xb2\xfe\x7f\x0c\xd2\x12\x7f\x07\x00\x00\xff\xff\x05\x8c\x0e\x7c\xea\x05\x00\x00")

func dynamodbYamlBytes() ([]byte, error) {
	return bindataRead(
		_dynamodbYaml,
		"dynamodb.yaml",
	)
}

func dynamodbYaml() (*asset, error) {
	bytes, err := dynamodbYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dynamodb.yaml", size: 1514, mode: os.FileMode(420), modTime: time.Unix(1558036945, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dynamodb.yaml": dynamodbYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dynamodb.yaml": &bintree{dynamodbYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

